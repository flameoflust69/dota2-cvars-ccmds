{
    "_fov": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Automates fov command to server.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3908
    },
    "achievement_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Turn on achievement debug msgs.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2269
    },
    "achievement_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Turn off achievements.",
        "flags": "game, replicated, cheat",
        "flagsRaw": 24580,
        "hasDefensiveFlag": false,
        "index": 2270
    },
    "adsp_alley_min": {
        "data_type": "int32",
        "default_value": "122",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 723
    },
    "adsp_courtyard_min": {
        "data_type": "int32",
        "default_value": "126",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 724
    },
    "adsp_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 729
    },
    "adsp_door_height": {
        "data_type": "int32",
        "default_value": "112",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 730
    },
    "adsp_duct_min": {
        "data_type": "int32",
        "default_value": "106",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 719
    },
    "adsp_hall_min": {
        "data_type": "int32",
        "default_value": "110",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 720
    },
    "adsp_low_ceiling": {
        "data_type": "int32",
        "default_value": "108",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 732
    },
    "adsp_opencourtyard_min": {
        "data_type": "int32",
        "default_value": "126",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 728
    },
    "adsp_openspace_min": {
        "data_type": "int32",
        "default_value": "130",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 725
    },
    "adsp_openstreet_min": {
        "data_type": "int32",
        "default_value": "118",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 727
    },
    "adsp_openwall_min": {
        "data_type": "int32",
        "default_value": "130",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 726
    },
    "adsp_room_min": {
        "data_type": "int32",
        "default_value": "102",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 718
    },
    "adsp_street_min": {
        "data_type": "int32",
        "default_value": "118",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 722
    },
    "adsp_tunnel_min": {
        "data_type": "int32",
        "default_value": "114",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 721
    },
    "adsp_wall_height": {
        "data_type": "int32",
        "default_value": "128",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 731
    },
    "ai_debug_dyninteractions": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Debug the NPC dynamic interaction system.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2343
    },
    "ai_debug_los": {
        "data_type": "int32",
        "default_value": "0",
        "description": "NPC Line-Of-Sight debug mode. If 1, solid entities that block NPC LOC will be highlighted with white bounding boxes. If 2, it'll show non-solid entities that would do it if they were solid.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1790
    },
    "ai_debug_off_nav": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1964
    },
    "ai_debug_ragdoll_magnets": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1809
    },
    "ai_debug_scripted_sequence": {
        "data_type": "string",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1761
    },
    "ai_debug_shoot_positions": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2287
    },
    "ai_debug_soundent": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Reports sounds being entered into the AI sound list. Set to 1 to see all sounds, set to 2 to only see DANGER sounds.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1770
    },
    "ai_debug_soundent_duration": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "Length of time to display ai_debug_soundent visual displays.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1771
    },
    "ai_debug_speech": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1959
    },
    "ai_disabled": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2288
    },
    "ai_expression_frametime": {
        "data_type": "float",
        "default_value": "0.05",
        "description": "Maximum frametime to still play background expressions.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1792
    },
    "ai_expression_optimization": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Disable npc background expressions when you can't see them.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1791
    },
    "ai_force_serverside_ragdoll": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1968
    },
    "ai_sequence_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2065
    },
    "ai_show_current_nav": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1965
    },
    "ai_use_visibility_cache": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Sets whether or not NPCs can cache their Visibility checks against other entities. If set to 2, also tests to make sure that NPC->Target results match that of Target->NPC.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1966
    },
    "ai_use_visibility_cache_reciprocation": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Sets whether or not the visibility check cache should be reciprocal.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1967
    },
    "allow_clientside_entities": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4339
    },
    "anim_decode_forcewritealltransforms": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force BatchAnimationDecode to write transformations for all bones",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 560
    },
    "anim_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1953
    },
    "anim_noposeparameters": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, all pose parameters on client/server are forced to neutral value",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2275
    },
    "anim_resource_validate_on_load": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Validates the animation group channel list against the animations on load for every animation",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 565
    },
    "anim_showmainactivity": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show the idle, walk, run, and/or sprint activities.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4283
    },
    "animated_material_attributes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4296
    },
    "animevent_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Print info about each animevent fired",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2274
    },
    "animgraph_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Debug animation graph",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2058
    },
    "animgraph_debug_animevents": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Print info about animevents emitted by AnimGraph",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2060
    },
    "animgraph_debug_entindex": {
        "data_type": "int32",
        "default_value": "0",
        "description": "The entity to specifically debug",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2059
    },
    "animgraph_debug_filterent": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Filter setting for animgraph_debug_variables output. If set to -1, show debug for all entities. If set to 0, show debug for any NPCs that have been npc_selected. If set to >0, something other than 0, show debug for the entity with the matching entindex.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2055
    },
    "animgraph_debug_set_filter_params": {
        "data_type": "string",
        "default_value": "",
        "description": "Comma separated list of params to filter against when drawing debug text overlays",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2048
    },
    "animgraph_debug_show_unreferenced_params": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2049
    },
    "animgraph_debug_tags": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2047
    },
    "animgraph_debug_variables": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Turn on to see animgraph variable changes for entities passing animgraph_debug_filterent.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2052
    },
    "animgraph_debug_variables_ignore_missing": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set, animgraph_debug_variables won't show debug for warnings about sets to missing variables.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2053
    },
    "animgraph_debug_variables_ignore_nonchanges": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set, animgraph_debug_variables won't show debug for variable sets that don't change the value.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2054
    },
    "animgraph_draw_traces": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2310
    },
    "animgraph_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable animation graph",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2056
    },
    "animgraph_enable_dirty_netvar_optimization": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 508
    },
    "animgraph_enable_parallel_update": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2305
    },
    "animgraph_footlock_auto_ledge_detection": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Attempt to detect when the foot is partially hanging off a ledge and stop it tilting to reach the bottom",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 512
    },
    "animgraph_footlock_auto_stair_detection": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Attempt to detect when the foot is on a stair and will stop it from tilting to reach the next step",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 513
    },
    "animgraph_footlock_calculate_tilt": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 511
    },
    "animgraph_footlock_debug_foot_index": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 514
    },
    "animgraph_footlock_debug_type": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 515
    },
    "animgraph_footlock_draw_footbase": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 523
    },
    "animgraph_footlock_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "A master convar that effectively disables the entire footlock node.",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 519
    },
    "animgraph_footlock_ground_roll": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 526
    },
    "animgraph_footlock_hip_offset_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 520
    },
    "animgraph_footlock_ik_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable IK.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 524
    },
    "animgraph_footlock_tilt_mode": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 521
    },
    "animgraph_footlock_trace_ground_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Convar for toggling foot lock ground tracking.",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 510
    },
    "animgraph_footlock_use_hip_shift": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 522
    },
    "animgraph_force_full_network_updates": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 507
    },
    "animgraph_force_tick_all_graphs": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2306
    },
    "animgraph_ik_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 517
    },
    "animgraph_motionmatching_print_compressionstats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 525
    },
    "animgraph_network_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable animation graph networking. The setting is only read at graph creation time; to use please set on the command line.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2057
    },
    "animgraph_record_all": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Automatically start recording AnimGraphs when they get created, and save them to disk when they are destroyed",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2061
    },
    "animgraph_slope_draw_raycasts": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2308
    },
    "animgraph_slope_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2045
    },
    "animgraph_slowdownonslopes_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 518
    },
    "animgraph_trace_ignore_prop_physics": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2311
    },
    "animgraph_trace_static_only": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2309
    },
    "animgraph_verify_dirty_netvar_optimization": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 509
    },
    "async_serialize": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force async reads to serialize for profiling",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 35
    },
    "audio_input_test_signal": {
        "data_type": "bool",
        "default_value": "false",
        "description": "For testing the audio input pathway with a sine tone instead of SDL3.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 715
    },
    "autosave_fully_async": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 1 to have autosaves execute completely on the save thread, forces 'render only' mode while the save completes",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1921
    },
    "battery_saver": {
        "data_type": "bool",
        "default_value": "false",
        "description": "OBSOLETE replaced by mobile_fps_* - Battery saver mode. 0=off, 1=on",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 26
    },
    "blink_duration": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "How many seconds an eye blink will last.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4156
    },
    "bot_mimic": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4168
    },
    "bot_mimic_spec_buttons": {
        "data_type": "bool",
        "default_value": "true",
        "description": "+attack, +jump etc are used for spectator control instead of being passed on to spectated bot",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4260
    },
    "break_damage_inherit_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2303
    },
    "break_invulnerable_spawn_duration": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2304
    },
    "breakable_multiplayer": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1893
    },
    "broadcaster_quickstats_baselen": {
        "data_type": "float",
        "default_value": "6",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2653
    },
    "broadcaster_quickstats_image_mode": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2654
    },
    "broadcaster_quickstats_len": {
        "data_type": "float",
        "default_value": "9",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2652
    },
    "broadcaster_quickstats_maxl": {
        "data_type": "int32",
        "default_value": "200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2651
    },
    "broadcaster_quickstats_minl": {
        "data_type": "int32",
        "default_value": "100",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2650
    },
    "broadcaster_quickstats_minmovielen": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2655
    },
    "broadcaster_quickstatsleague": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2649
    },
    "buddha": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Player takes damage but won't die",
        "flags": "game, notify, cheat",
        "flagsRaw": 16644,
        "hasDefensiveFlag": false,
        "index": 1794
    },
    "buddha_ignore_bots": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Bots always buddha 0",
        "flags": "game, notify, cheat",
        "flagsRaw": 16644,
        "hasDefensiveFlag": false,
        "index": 1795
    },
    "buddha_reset_hp": {
        "data_type": "int32",
        "default_value": "1",
        "description": "HP to set when damaged below zero in Buddha Mode",
        "flags": "game, notify, cheat",
        "flagsRaw": 16644,
        "hasDefensiveFlag": false,
        "index": 1796
    },
    "bug_submitter_override": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 146
    },
    "buildcubemaps_renderdoc_capture": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Capture a specific cubemap with RenderDoc during buildcubemaps.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4363
    },
    "c_maxdistance": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4078
    },
    "c_maxpitch": {
        "data_type": "float",
        "default_value": "90",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4074
    },
    "c_maxyaw": {
        "data_type": "float",
        "default_value": "135",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4076
    },
    "c_mindistance": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4079
    },
    "c_minpitch": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4075
    },
    "c_minyaw": {
        "data_type": "float",
        "default_value": "-135",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4077
    },
    "c_orthoheight": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4081
    },
    "c_orthowidth": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4080
    },
    "c_thirdpersonshoulder": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4082
    },
    "c_thirdpersonshoulderaimdist": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4086
    },
    "c_thirdpersonshoulderdist": {
        "data_type": "float",
        "default_value": "40",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4084
    },
    "c_thirdpersonshoulderheight": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4085
    },
    "c_thirdpersonshoulderoffset": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4083
    },
    "cam_collision": {
        "data_type": "int32",
        "default_value": "1",
        "description": "When in thirdperson and cam_collision is set to 1, an attempt is made to keep the camera from passing though walls.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4072
    },
    "cam_idealdelta": {
        "data_type": "float",
        "default_value": "4",
        "description": "Controls the speed when matching offset to ideal angles in thirdperson view",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4068
    },
    "cam_idealdist": {
        "data_type": "float",
        "default_value": "150",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4071
    },
    "cam_ideallag": {
        "data_type": "float",
        "default_value": "4",
        "description": "Amount of lag used when matching offset to ideal angles in thirdperson view",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4067
    },
    "cam_idealpitch": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4070
    },
    "cam_idealyaw": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4069
    },
    "cam_showangles": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When in thirdperson, print viewangles/idealangles/cameraoffsets to the console.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4073
    },
    "cam_snapto": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4066
    },
    "camera_datadriven_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3636
    },
    "camera_datadriven_disable_cache": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1805
    },
    "cavern_crawl_config_current_variant": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, hidden, archive, release",
        "flagsRaw": 524440,
        "hasDefensiveFlag": false,
        "index": 3179
    },
    "cavern_crawl_config_current_variant_event": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, hidden, archive, release",
        "flagsRaw": 524440,
        "hasDefensiveFlag": false,
        "index": 3180
    },
    "cavern_crawl_draw_paths": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2633
    },
    "cavern_crawl_draw_rewards": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2634
    },
    "cavern_crawl_pregame_intro_shown": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2656
    },
    "cavern_crawl_test_claim_map_variant": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2632
    },
    "cavern_crawl_test_pre_game": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2448
    },
    "cavern_post_game_progress_fake_variant": {
        "data_type": "int32",
        "default_value": "255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3203
    },
    "cc_captiontrace": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Show missing closecaptions (0 = no, 1 = devconsole, 2 = show in hud)",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3933
    },
    "cc_delay_time": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "Close caption delay before showing caption.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3932
    },
    "cc_lang": {
        "data_type": "string",
        "default_value": "",
        "description": "Current close caption language (emtpy = use game UI language)",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3947
    },
    "cc_linger_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "Close caption linger time.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3931
    },
    "cc_log": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Log caption names and contents (0 = off, 1 = found captions, 2 = unfound captions, 3 = all captions)",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3934
    },
    "cc_norepeat": {
        "data_type": "float",
        "default_value": "5",
        "description": "In multiplayer games, don't repeat captions more often than this many seconds.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1758
    },
    "cc_showmissing": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show missing closecaption entries.",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1757
    },
    "cc_spectator_only": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3945
    },
    "cc_subtitles": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, don't show sound effect captions, just voice overs (i.e., won't help hearing impaired players).",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3935
    },
    "cc_vr_caption_catchup_interval": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "Duration it takes for attached caption to ideal point",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3942
    },
    "cc_vr_caption_speed": {
        "data_type": "int32",
        "default_value": "1",
        "description": "0 = slow, 1 = medium (default), 2 = fast",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3944
    },
    "cc_vr_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Debug visualization of VR closed caption placement",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3937
    },
    "cc_vr_depth_test": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Have closed caption Panorama panel perform depth testing against the scene",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3938
    },
    "cc_vr_epsilon": {
        "data_type": "float",
        "default_value": "2.5",
        "description": "Epsilon to trigger movement of VR subtitle panel in world space",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3941
    },
    "cc_vr_font_size": {
        "data_type": "int32",
        "default_value": "1",
        "description": "0 = small, 1 = med (default), 2 = large",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3943
    },
    "cc_vr_forward_offset": {
        "data_type": "float",
        "default_value": "30",
        "description": "Subtitle offset distance (forward, in front of player)",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3939
    },
    "cc_vr_vertical_offset": {
        "data_type": "float",
        "default_value": "-6.5",
        "description": "Subtitle vertical offset distance (positive is up)",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3940
    },
    "cc_vr_width": {
        "data_type": "int32",
        "default_value": "1",
        "description": "0 = narrow, 1 = med (default), 2 = wide",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3946
    },
    "chat_force_ceb_level": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3130
    },
    "chat_force_team_spray": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3129
    },
    "chat_force_ti11_battlepass_chat_wheel_level": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3131
    },
    "chat_sound": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, play sound when receiving chat messages",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3123
    },
    "chat_wheel_emoticon_0": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2530
    },
    "chat_wheel_emoticon_1": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2531
    },
    "chat_wheel_emoticon_10": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2540
    },
    "chat_wheel_emoticon_11": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2541
    },
    "chat_wheel_emoticon_12": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2542
    },
    "chat_wheel_emoticon_13": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2543
    },
    "chat_wheel_emoticon_14": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2544
    },
    "chat_wheel_emoticon_15": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2545
    },
    "chat_wheel_emoticon_2": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2532
    },
    "chat_wheel_emoticon_3": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2533
    },
    "chat_wheel_emoticon_4": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2534
    },
    "chat_wheel_emoticon_5": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2535
    },
    "chat_wheel_emoticon_6": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2536
    },
    "chat_wheel_emoticon_7": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2537
    },
    "chat_wheel_emoticon_8": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2538
    },
    "chat_wheel_emoticon_9": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2539
    },
    "chat_wheel_phrase_0": {
        "data_type": "int32",
        "default_value": "8",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2713
    },
    "chat_wheel_phrase_1": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2714
    },
    "chat_wheel_phrase_10": {
        "data_type": "int32",
        "default_value": "79",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2524
    },
    "chat_wheel_phrase_11": {
        "data_type": "int32",
        "default_value": "66",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2525
    },
    "chat_wheel_phrase_12": {
        "data_type": "int32",
        "default_value": "80",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2526
    },
    "chat_wheel_phrase_13": {
        "data_type": "int32",
        "default_value": "61",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2527
    },
    "chat_wheel_phrase_14": {
        "data_type": "int32",
        "default_value": "62",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2528
    },
    "chat_wheel_phrase_15": {
        "data_type": "int32",
        "default_value": "70",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2529
    },
    "chat_wheel_phrase_2": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2715
    },
    "chat_wheel_phrase_3": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2716
    },
    "chat_wheel_phrase_4": {
        "data_type": "int32",
        "default_value": "4",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2717
    },
    "chat_wheel_phrase_5": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2718
    },
    "chat_wheel_phrase_6": {
        "data_type": "int32",
        "default_value": "6",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2719
    },
    "chat_wheel_phrase_7": {
        "data_type": "int32",
        "default_value": "7",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2720
    },
    "chat_wheel_phrase_8": {
        "data_type": "int32",
        "default_value": "65",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2721
    },
    "chat_wheel_phrase_9": {
        "data_type": "int32",
        "default_value": "69",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2722
    },
    "check_transmit_dump_ents": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1822
    },
    "cheers_batch_delay": {
        "data_type": "int32",
        "default_value": "1000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3184
    },
    "chet_debug_idle": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set one, many debug prints to help track down the TLK_IDLE issue. Set two for super verbose info",
        "flags": "devonly, game, archive, cheat",
        "flagsRaw": 16518,
        "hasDefensiveFlag": false,
        "index": 1958
    },
    "cl_ShowBoneSetupEnts": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show which entities are having their bones setup each frame.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4040
    },
    "cl_aggregate_particles": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1068
    },
    "cl_anglespeedkey": {
        "data_type": "float",
        "default_value": "0.67",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4055
    },
    "cl_anim_queue_changes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4336
    },
    "cl_anim_sequence_transitioner": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable animation sequence transitioner.",
        "flags": "devonly, client, replicated",
        "flagsRaw": 8202,
        "hasDefensiveFlag": false,
        "index": 4337
    },
    "cl_animgraph_history_force_temporal_consistency": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4366
    },
    "cl_auto_cursor_scale": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Automatic cursor size scaling.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 414
    },
    "cl_boxmove": {
        "data_type": "int32",
        "default_value": "0",
        "description": "run in a square, # represents how many usercommands to run before turning.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4061
    },
    "cl_boxmove_speed": {
        "data_type": "float",
        "default_value": "1",
        "description": "how fast to run (1 to use player max run speed).",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4062
    },
    "cl_cache_sendtable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Cache sendtables",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 367
    },
    "cl_cameraoverride_fade_in_amount": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4234
    },
    "cl_cameraoverride_shadow_depth_bias": {
        "data_type": "float",
        "default_value": "0.006",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4235
    },
    "cl_cameraoverride_shadow_end": {
        "data_type": "float",
        "default_value": "0.8",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4236
    },
    "cl_change_callback_limit": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "change callback msec warning limit",
        "flags": "client, release",
        "flagsRaw": 524296,
        "hasDefensiveFlag": false,
        "index": 4038
    },
    "cl_chat_active": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4048
    },
    "cl_clock_correction": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable/disable clock correction on the client.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 323
    },
    "cl_clock_correction_adjustment_max_amount": {
        "data_type": "float",
        "default_value": "200",
        "description": "Sets the maximum number of milliseconds per second it is allowed to correct the client clock. It will only correct this amount if the difference between the client and server clock is equal to or larger than cl_clock_correction_adjustment_max_offset.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 327
    },
    "cl_clock_correction_adjustment_max_offset": {
        "data_type": "float",
        "default_value": "90",
        "description": "As the clock offset goes from cl_clock_correction_adjustment_min_offset to this value (in milliseconds), it moves towards applying cl_clock_correction_adjustment_max_amount of adjustment. That way, the response is small when the offset is small.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 329
    },
    "cl_clock_correction_adjustment_min_offset": {
        "data_type": "float",
        "default_value": "10",
        "description": "If the clock offset is less than this amount (in milliseconds), then no clock correction is applied.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 328
    },
    "cl_clock_correction_force_server_tick": {
        "data_type": "int32",
        "default_value": "999",
        "description": "Force clock correction to match the server tick + this offset (999 disables it).",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 326
    },
    "cl_clock_recvmargin_adjust_limit_slowdown": {
        "data_type": "float",
        "default_value": "93",
        "description": "Recvmargin-based clock sync will not slow down time slower than N%",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 354
    },
    "cl_clock_recvmargin_adjust_limit_speedup": {
        "data_type": "float",
        "default_value": "106",
        "description": "Recvmargin-based clock sync will not speed up time faster than N%",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 353
    },
    "cl_clock_recvmargin_desired": {
        "data_type": "float",
        "default_value": "5",
        "description": "Recvmargin-based clock sync will try to maintain N ms margin between tick arrival and polling network",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 347
    },
    "cl_clock_recvmargin_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable new client clock synchronization strategy that tries to achieve a certain client recv margin",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 346
    },
    "cl_clock_recvmargin_minsamples_slowdown": {
        "data_type": "int32",
        "default_value": "3",
        "description": "Recvmargin-based clock sync will not slow down unless we have N indicating samples",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 349
    },
    "cl_clock_recvmargin_minsamples_speedup": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "Recvmargin-based clock sync will not speed up unless we have N seconds of indicating samples",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 348
    },
    "cl_clock_recvmargin_spew_interval": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 355
    },
    "cl_clock_recvmargin_timeconstant_slowdown": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "Recvmargin-based clock sync will remove 63.2% of the error in N seconds",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 352
    },
    "cl_clock_recvmargin_timeconstant_speedup": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "Recvmargin-based clock sync will remove 63.2% of the error in N seconds",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 351
    },
    "cl_clock_recvmargin_window": {
        "data_type": "float",
        "default_value": "1",
        "description": "Recvmargin-based clock sync will use past N seconds",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 350
    },
    "cl_clock_showdebuginfo": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Show debugging info about the clock drift, 1= resets, 2=adjustments, 3=verbose",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 325
    },
    "cl_clock_unhook": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 334
    },
    "cl_clockdbg": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 333
    },
    "cl_clockdrift_max_ticks": {
        "data_type": "int32",
        "default_value": "3",
        "description": "Maximum number of ticks the clock is allowed to drift before the client snaps its clock to the server's.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 324
    },
    "cl_connectionretrytime_p2p": {
        "data_type": "float",
        "default_value": "20",
        "description": "Number of seconds over which to spread retry attempts for P2P.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 331
    },
    "cl_cq_min_queue": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Allows client to disable (=-1), defer to server (=0), or request a certain min-command queue size for games that support the command queue (IsUsingCommandQueue()) for CUserCmds.",
        "flags": "client, userinfo",
        "flagsRaw": 520,
        "hasDefensiveFlag": false,
        "index": 4214
    },
    "cl_cursor_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "Cursor size scaling factor.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 413
    },
    "cl_debug_overlay_fullposition": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4359
    },
    "cl_debug_overlays_broadcast": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Render debug overlays from server.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 373
    },
    "cl_debugviewangle": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Plots view angles yaw at various stages of the frame/tick in Tracy.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4064
    },
    "cl_demo_steadycam_blendframes": {
        "data_type": "int32",
        "default_value": "5",
        "description": "blend over this many frames",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3912
    },
    "cl_demo_steadycam_deflection": {
        "data_type": "float",
        "default_value": "5",
        "description": "if camera orientation changes this much update orientation",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3911
    },
    "cl_demo_steadycam_enable": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Stabilize camera orientation/position during demo playback.  1 == remove roll, 2 == steadycam",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3909
    },
    "cl_demo_steadycam_radius": {
        "data_type": "float",
        "default_value": "16",
        "description": "if camera moves this much from last anchor update anchor",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3910
    },
    "cl_demo_view_offset_left": {
        "data_type": "float",
        "default_value": "0",
        "description": "View offset during demo playback (+/- 1.25 is a good default for human average left/right eye offset)",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3906
    },
    "cl_demoviewoverride": {
        "data_type": "float",
        "default_value": "0",
        "description": "Override view during demo playback",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3905
    },
    "cl_disable_ragdolls": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4295
    },
    "cl_disconnect_soundevent": {
        "data_type": "string",
        "default_value": "core.stop_all_soundevents",
        "description": "This soundevent is called to stop the desired soundevents when the game is disconnected.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 336
    },
    "cl_disconnect_voice_fade": {
        "data_type": "float",
        "default_value": "2",
        "description": "This is a fade of current voices that is called when the game is disconnected. -1.f for no fade on disconnect",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 337
    },
    "cl_display_game_events": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4252
    },
    "cl_dormant_spew": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Spew state on when client entities become dormant or active.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4046
    },
    "cl_dota_alt_unit_movetodirection": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Does holding alt enable move to direction mode?",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3712
    },
    "cl_dota_ambient_tree_shake": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3839
    },
    "cl_dota_ambient_tree_shake_cooldown": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3840
    },
    "cl_dota_ambient_tree_shake_duration": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3844
    },
    "cl_dota_ambient_tree_shake_peak_time": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3843
    },
    "cl_dota_ambient_tree_shake_range": {
        "data_type": "float",
        "default_value": "128",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3841
    },
    "cl_dota_ambient_tree_shake_strength": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3842
    },
    "cl_dota_cache_hitboxes_model_bind_pose": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3222
    },
    "cl_dota_cd_captain_pick_time": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4266
    },
    "cl_dota_gridnav_show": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3970
    },
    "cl_dota_gridnav_show_size": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Control the size of the gridnav display. 1 = small, 2 = medium, 3 = large",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3971
    },
    "cl_dota_mk_tree_shake_duration": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4332
    },
    "cl_dota_mk_tree_shake_peak_time": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4331
    },
    "cl_dota_mk_tree_shake_strength": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4330
    },
    "cl_dota_projectile_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3787
    },
    "cl_dota_projectile_disable_attachment_points": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3788
    },
    "cl_dota_recent_games_include_custom_games": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2964
    },
    "cl_dota_recent_games_include_event_games": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2965
    },
    "cl_dota_recent_games_include_practice_matches": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2963
    },
    "cl_dota_speech_announcer_voice": {
        "data_type": "string",
        "default_value": "",
        "description": "Specify which new-style announcer pack you want to use. For debugging only.",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 4319
    },
    "cl_dota_speech_spec_ancientattack": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 0 to prevent hearing 'your ancient is under attack' lines.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4324
    },
    "cl_dota_speech_spec_barracksattack": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 0 to prevent hearing 'your rax is under attack' lines.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4322
    },
    "cl_dota_speech_spec_barracksfalls": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 0 to prevent hearing 'your rax has fallen' lines.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4323
    },
    "cl_dota_speech_spec_enemybasefalls": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 0 to prevent hearing 'enemy's tower/rax has fallen' lines.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4325
    },
    "cl_dota_speech_spec_idles": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 0 to prevent hearing announcers' idle lines.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4326
    },
    "cl_dota_speech_spec_towerattack": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 0 to prevent hearing 'your tower is under attack' lines.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4320
    },
    "cl_dota_speech_spec_towerfalls": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 0 to prevent hearing 'your tower has fallen' lines.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4321
    },
    "cl_dota_unified_tree_hitboxes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3221
    },
    "cl_draw_simulating_entities": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4142
    },
    "cl_draw_simulating_entities_distance": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4143
    },
    "cl_drawhud": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable the rendering of the hud",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4100
    },
    "cl_enable_eye_occlusion": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4161
    },
    "cl_ent_joint_axis_size": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4238
    },
    "cl_ent_joint_filter_substring": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4240
    },
    "cl_ent_joint_names": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4239
    },
    "cl_ent_joint_only_ik_joints": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4242
    },
    "cl_ent_joint_use_bind_pose": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4241
    },
    "cl_ent_pivot_size": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "client, archive, cheat",
        "flagsRaw": 16520,
        "hasDefensiveFlag": false,
        "index": 4358
    },
    "cl_ent_show_contexts": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show entity contexts in ent_text display",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4361
    },
    "cl_ent_showonlyattachment": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4245
    },
    "cl_ent_showonlyhitbox": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4134
    },
    "cl_ent_skeleton_only_ik_joints": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4243
    },
    "cl_ent_text_flags_active": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "client, archive, cheat",
        "flagsRaw": 16520,
        "hasDefensiveFlag": false,
        "index": 4362
    },
    "cl_ent_text_no_name_really_i_mean_it": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4360
    },
    "cl_error_report_time": {
        "data_type": "float",
        "default_value": "0",
        "description": "Minimum time in seconds that must elapse before printing prediction error summary. 0 to disable.",
        "flags": "client, release",
        "flagsRaw": 524296,
        "hasDefensiveFlag": false,
        "index": 4024
    },
    "cl_extrapolate": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable/disable extrapolation if interpolation history runs out.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4137
    },
    "cl_extrapolate_amount": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "Set how many seconds the client will extrapolate entities for.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4153
    },
    "cl_eye_occlusion_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4162
    },
    "cl_eye_sin_wave": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4167
    },
    "cl_eye_target_override": {
        "data_type": "Vector3",
        "default_value": "0 0 0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4165
    },
    "cl_eye_yaw_multiplier": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4166
    },
    "cl_fasttempentcollision": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3952
    },
    "cl_flushentitypacket": {
        "data_type": "int32",
        "default_value": "0",
        "description": "For debugging. Force the engine to flush an entity packet.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 314
    },
    "cl_force_next_signon_to_reset": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 345
    },
    "cl_globallight_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4223
    },
    "cl_globallight_depth_bias": {
        "data_type": "float",
        "default_value": "-999",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4232
    },
    "cl_globallight_expansion": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4222
    },
    "cl_globallight_freeze": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4221
    },
    "cl_globallight_orig_calc_frustum": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4227
    },
    "cl_globallight_shadow_mode": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4224
    },
    "cl_globallight_slope_scale_depth_bias": {
        "data_type": "float",
        "default_value": "-999",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4231
    },
    "cl_globallight_use_alt_focus_region": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4230
    },
    "cl_globallight_use_optimized_calc_frustum": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4237
    },
    "cl_globallight_use_shaadow_near_offset": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4233
    },
    "cl_globallight_world_bottom_height": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4228
    },
    "cl_globallight_world_top_height": {
        "data_type": "float",
        "default_value": "4096",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4229
    },
    "cl_glow_brightness": {
        "data_type": "float",
        "default_value": "1",
        "description": "Brightness of player halos",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4105
    },
    "cl_glow_item_far_b": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, release",
        "flagsRaw": 524296,
        "hasDefensiveFlag": false,
        "index": 4104
    },
    "cl_glow_item_far_g": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "client, release",
        "flagsRaw": 524296,
        "hasDefensiveFlag": false,
        "index": 4103
    },
    "cl_glow_item_far_r": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "",
        "flags": "client, release",
        "flagsRaw": 524296,
        "hasDefensiveFlag": false,
        "index": 4102
    },
    "cl_hitbox_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4382
    },
    "cl_hold_game_events_force_delay_ticks": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Debugging convar to force late dispatch of game events.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4249
    },
    "cl_hold_game_events_until_server_tick": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Holds game events until client has received the tick the event was fired on.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4248
    },
    "cl_ignorepackets": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force client to ignore packets (for debugging).",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 339
    },
    "cl_interp_all": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Disable interpolation list optimizations.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4139
    },
    "cl_interp_animationvars": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Interpolate LATCH_ANIMATION_BIT vars if interpolation interval is greater than simulation interval",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4145
    },
    "cl_interp_hermite": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to zero do disable hermite interpolation.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4152
    },
    "cl_interp_npcs": {
        "data_type": "float",
        "default_value": "0",
        "description": "Interpolate NPC positions starting this many seconds in past (or the value as per cl_interp_ratio, if greater)",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4138
    },
    "cl_interp_ratio": {
        "data_type": "float",
        "default_value": "2",
        "description": "Sets the client simulation interpolation amount, in terms of server updates (final amount is cl_interp_ratio / cl_updaterate).",
        "flags": "client, userinfo",
        "flagsRaw": 520,
        "hasDefensiveFlag": false,
        "index": 4216
    },
    "cl_interp_simulationvars": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Interpolate LATCH_SIMULATION_BIT vars if interpolation interval is greater than animation interval",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4146
    },
    "cl_interp_threadmodeticks": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Additional interpolation ticks to use when interpolating with threaded engine mode set.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4135
    },
    "cl_interpolate": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Interpolate entities on the client.",
        "flags": "devonly, client, userinfo",
        "flagsRaw": 522,
        "hasDefensiveFlag": false,
        "index": 366
    },
    "cl_interpolate_report": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable to show interpolation profile timing\n",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4151
    },
    "cl_jiggle_bone_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Display physics-based 'jiggle bone' debugging information",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 618
    },
    "cl_jiggle_bone_debug_pitch_constraints": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Display physics-based 'jiggle bone' debugging information",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 620
    },
    "cl_jiggle_bone_debug_yaw_constraints": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Display physics-based 'jiggle bone' debugging information",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 619
    },
    "cl_jiggle_bone_invert": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 621
    },
    "cl_jiggle_bone_sanity": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Prevent jiggle bones from pointing directly away from their target in case of numerical instability.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 622
    },
    "cl_lagcompensation": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Perform server side lag compensation of weapon firing events.",
        "flags": "client, userinfo",
        "flagsRaw": 520,
        "hasDefensiveFlag": false,
        "index": 4022
    },
    "cl_language": {
        "data_type": "string",
        "default_value": "english",
        "description": "Language",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 17
    },
    "cl_latch_report": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable to output stats about latching",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4150
    },
    "cl_leveloverview": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3898
    },
    "cl_lightquery_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4368
    },
    "cl_lock_camera": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3907
    },
    "cl_log_tick": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Log when a tick is received\n",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 370
    },
    "cl_log_tick_skips": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Log when the tick delta >= this",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 371
    },
    "cl_massreport": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4367
    },
    "cl_mouselook": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 1 to use mouse for look, 0 for keyboard look. Cannot be set while connected to a server.",
        "flags": "client, archive, userinfo, per_user, notconnected",
        "flagsRaw": 4227720,
        "hasDefensiveFlag": false,
        "index": 4063
    },
    "cl_net_showeventlisteners": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show listening addition/removals",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4251
    },
    "cl_net_showevents": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Dump game events to console (1=client only, 2=all).",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4250
    },
    "cl_network_quality2": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 1073741960,
        "hasDefensiveFlag": false,
        "index": 2874
    },
    "cl_panel_freeze_time_after_press": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "time to freeze mouse/pointer motion after a mouse button press",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4351
    },
    "cl_parallel_readpacketentities": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 1 to use threading snapshot reading (if game supports and server is sending bitcounts).",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 315
    },
    "cl_parallel_readpacketentities_threshold": {
        "data_type": "int32",
        "default_value": "8",
        "description": "Use parallel processing of snapshot reading if above this many entries.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 316
    },
    "cl_parallel_readpacketentities_type": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "\n\t-1 = use default (parallel controller split)\n\t0 = single threaded combined (i.e., ReadFieldList and Decode combined into one call)\n\t1 = single threaded split (first pass ReadFieldList, second pass Decode)\n\t2 = worker thread for decode (main thread does ReadFieldList, worker thread does Decode)\n\t3 = parallel combined (threadpool does read/decode on work items in parallel)\n\t4 = parallel split\n\t5 = parallel controller combined (like parallel, but uses a parallelcontroller so each thread in pool can share a single SerializedEntity\n\t6 = parallel controller split\n",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 318
    },
    "cl_particle_batch_mode": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1062
    },
    "cl_particle_fallback_base": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Base for falling back to cheaper effects under load.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1064
    },
    "cl_particle_fallback_multiplier": {
        "data_type": "float",
        "default_value": "0",
        "description": "Multiplier for falling back to cheaper effects under load.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1063
    },
    "cl_particle_log_creates": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Print debug message every time a particle collection is created",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1073
    },
    "cl_particle_max_count": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1067
    },
    "cl_particle_retire_cost": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1065
    },
    "cl_particle_sim_fallback_base_multiplier": {
        "data_type": "float",
        "default_value": "5",
        "description": "How aggressive the switch to fallbacks will be depending on how far over the cl_particle_sim_fallback_threshold_ms the sim time is.  Higher numbers are more aggressive.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1075
    },
    "cl_particle_sim_fallback_threshold_ms": {
        "data_type": "float",
        "default_value": "6",
        "description": "Amount of simulation time that can elapse before new systems start falling back to cheaper versions",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1074
    },
    "cl_particle_simulate": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enables/Disables Particle Simulation",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1066
    },
    "cl_pclass": {
        "data_type": "string",
        "default_value": "",
        "description": "Dump entity by prediction classname.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4026
    },
    "cl_pdump": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Dump info about this entity to screen.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4025
    },
    "cl_phys_animated_hierarchy": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4372
    },
    "cl_phys_block_dist": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4374
    },
    "cl_phys_block_fraction": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4373
    },
    "cl_phys_debug_callback_entities": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Print all entities that get touch callbacks. Each entity is printed only once.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4381
    },
    "cl_phys_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable all physics simulation",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4369
    },
    "cl_phys_networked_start_sleep": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4262
    },
    "cl_phys_sleep_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable sleeping for dynamic physics bodies.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4371
    },
    "cl_phys_stop_at_collision": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4370
    },
    "cl_phys_timescale": {
        "data_type": "float",
        "default_value": "1",
        "description": "Scale time for physics",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4376
    },
    "cl_phys_visualize_awake": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4379
    },
    "cl_pitchdown": {
        "data_type": "float",
        "default_value": "89",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4058
    },
    "cl_pitchspeed": {
        "data_type": "float",
        "default_value": "225",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4057
    },
    "cl_pitchup": {
        "data_type": "float",
        "default_value": "89",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4059
    },
    "cl_playback_screenshots": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Allows the client to playback screenshot and jpeg commands in demos.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 188
    },
    "cl_playerspraydisable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Disable player sprays.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3956
    },
    "cl_portrait_bg_translucent_test": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Renders the hero on a gray background for translucency blending testing",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3968
    },
    "cl_portrait_deferred": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use deferred rendering for portraits.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3969
    },
    "cl_pred_build_verbose": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Verbose spew when building prediction optimized data runs.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4316
    },
    "cl_pred_optimize": {
        "data_type": "int32",
        "default_value": "2",
        "description": "Optimize for not copying data if didn't receive a network update (1), and also for not repredicting if there were no errors (2).",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4027
    },
    "cl_pred_parallel_postnetwork": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4029
    },
    "cl_pred_print_every_cmd": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Print something every time we predict a command",
        "flags": "client, release",
        "flagsRaw": 524296,
        "hasDefensiveFlag": false,
        "index": 4028
    },
    "cl_predict": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Perform client side prediction.",
        "flags": "client, userinfo, cheat",
        "flagsRaw": 16904,
        "hasDefensiveFlag": false,
        "index": 4218
    },
    "cl_predict_after_every_createmove": {
        "data_type": "bool",
        "default_value": "true",
        "description": "run prediction after every CreateMove instead of only after CreateMove for the final tick in a frame.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 50
    },
    "cl_predictioncopy_runs": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4313
    },
    "cl_profilereadpacketentities": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 317
    },
    "cl_prop_fadeout_alpha": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4342
    },
    "cl_prop_fadeout_height": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4346
    },
    "cl_prop_fadeout_mode": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4341
    },
    "cl_prop_fadeout_portrait_max_distance": {
        "data_type": "float",
        "default_value": "2000",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4348
    },
    "cl_prop_fadeout_portrait_min_distance": {
        "data_type": "float",
        "default_value": "1800",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4347
    },
    "cl_prop_fadeout_radius": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4343
    },
    "cl_prop_fadeout_radius_end": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4344
    },
    "cl_prop_fadeout_specator_zoom_end": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4350
    },
    "cl_prop_fadeout_specator_zoom_start": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4349
    },
    "cl_prop_fadeout_time": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4345
    },
    "cl_ragdoll_default_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4294
    },
    "cl_ragdoll_limit": {
        "data_type": "int32",
        "default_value": "20",
        "description": "Maximum number of ragdolls to show (-1 disables limit)",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4031
    },
    "cl_ragdoll_lru_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4030
    },
    "cl_ragdoll_reload": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4293
    },
    "cl_resend": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "Delay in seconds before the client will resend the 'connect' attempt",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 330
    },
    "cl_retire_low_priority_lights": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Low priority dlights are replaced by high priority ones",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4179
    },
    "cl_sceneentity_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Display all thinking scene entities and its data.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4201
    },
    "cl_screenmessage_notifytime": {
        "data_type": "float",
        "default_value": "8",
        "description": "How long to display screen message text",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4244
    },
    "cl_script_attach_debugger_at_startup": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4298
    },
    "cl_script_break_in_native_debugger_on_error": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4297
    },
    "cl_sendtable_cache_filename": {
        "data_type": "string",
        "default_value": "sendtables.bin",
        "description": "Send tables cache file",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 368
    },
    "cl_sequence_debug": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4211
    },
    "cl_sequence_debug2": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4212
    },
    "cl_sequence_debug_verbose": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4338
    },
    "cl_sequence_model_substring": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4213
    },
    "cl_show_mouseclick_effects": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3852
    },
    "cl_show_splashes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3988
    },
    "cl_showanimstate": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Show the (client) animation state for the specified entity (-1 for none).",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4335
    },
    "cl_showdemooverlay": {
        "data_type": "float",
        "default_value": "0",
        "description": "How often to flash demo recording/playback overlay (0 - disable overlay, -1 - show always)",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 313
    },
    "cl_showerror": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Show prediction errors, 2 for above plus detailed field deltas, 3 to filter out serverside known prediction errors, -entindex for specific entity.",
        "flags": "client, release",
        "flagsRaw": 524296,
        "hasDefensiveFlag": false,
        "index": 4023
    },
    "cl_showfps": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Draw fps meter at top of screen (1 = fps, 2 = smooth fps, 3 = server MS, 4 = Show FPS and Log to file )",
        "flags": "client, release",
        "flagsRaw": 524296,
        "hasDefensiveFlag": false,
        "index": 4049
    },
    "cl_showmem": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Draw approximate memory use at top of screen",
        "flags": "client, release",
        "flagsRaw": 524296,
        "hasDefensiveFlag": false,
        "index": 4051
    },
    "cl_showpos": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Draw current position at top of screen",
        "flags": "client, cheat, release",
        "flagsRaw": 540680,
        "hasDefensiveFlag": false,
        "index": 4050
    },
    "cl_showtextmsg": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable/disable text messages printing on the screen.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4047
    },
    "cl_showusercmd": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show user command encoding",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4054
    },
    "cl_simulate_dormant_entities": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4141
    },
    "cl_skel_constraints_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 563
    },
    "cl_skeleton_instance_smear_boneflags": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Smear boneflags across the model.  Costs computation, but tests to make sure your bone flags are consistent.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4261
    },
    "cl_skip_update_animations": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable to skip game animations",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4365
    },
    "cl_smooth": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Smooth view/eye origin after prediction errors",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4169
    },
    "cl_smooth_targetspeed": {
        "data_type": "float",
        "default_value": "150",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4171
    },
    "cl_smoothtime": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "Smooth client's view after prediction error over this many seconds",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4170
    },
    "cl_snd_cast_clear": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 657
    },
    "cl_snd_cast_retrigger": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 658
    },
    "cl_snd_new_visualize": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Displays soundevent name played at it's 3d position",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3895
    },
    "cl_spawngroup_log": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Dump the contents of the next spawngroup manifest to file.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 372
    },
    "cl_spawngroup_spewresources": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Spew all manifest add/updates.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 369
    },
    "cl_spectator_interp_ratio": {
        "data_type": "float",
        "default_value": "2",
        "description": "When connected to hltv or playing a demo, multiply the interp time by this.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4217
    },
    "cl_tickpacket_desired_queuelength": {
        "data_type": "float",
        "default_value": "99",
        "description": "Desired command queue length on the server, used to avoid command queue starvation due to packet loss.  The effective value is the smaller of this value and cl_interp_ratio, hence the large default value.  This value, multiplied by the tick interval, is added to cl_tickpacket_recvmargin_desired to obtain the effective desired recv margin.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 363
    },
    "cl_tickpacket_recvmargin_adjust_limit": {
        "data_type": "float",
        "default_value": "5",
        "description": "Recvmargin-based usercommand pacing will not speed up or slow down command pacing by more than N% compared to realtime",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 361
    },
    "cl_tickpacket_recvmargin_desired": {
        "data_type": "float",
        "default_value": "5",
        "description": "Recvmargin-based usercommand pacing will try to maintain N ms margin between user command arriving at the server and the server needing that user command.  See also cl_tickpacket_desired_queuelength.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 357
    },
    "cl_tickpacket_recvmargin_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable new method for pacing out usercommands that keeps a packet prepared at all times, and tries to send it to achieve a desired server recv margin",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 356
    },
    "cl_tickpacket_recvmargin_minsamples": {
        "data_type": "int32",
        "default_value": "10",
        "description": "Recvmargin-based usercommand pacing will not take action unless we have N samples",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 358
    },
    "cl_tickpacket_recvmargin_spew_interval": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 362
    },
    "cl_tickpacket_recvmargin_timeconstant": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "Recvmargin-based usercommand pacing will remove 63.2% of the error in N seconds",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 360
    },
    "cl_tickpacket_recvmargin_window": {
        "data_type": "float",
        "default_value": "0.75",
        "description": "Recvmargin-based usercommand pacing will use past N seconds",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 359
    },
    "cl_tickpacket_send_every_tick": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Send a network packet each time we generate a new usercommand, even if our frame rate is slow and we generate multiple commands in one frame",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 51
    },
    "cl_ticks_warning_level": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Print a message about problems with ticks and interpolation.  0=never, 1=warnings, 2=all, even if hidden by interpolation",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 364
    },
    "cl_timeout": {
        "data_type": "float",
        "default_value": "30",
        "description": "After this many seconds without receiving a packet from the server, the client will disconnect itself",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 335
    },
    "cl_tracer_whiz_distance": {
        "data_type": "float",
        "default_value": "72",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3953
    },
    "cl_tracer_whiz_infront_distance": {
        "data_type": "float",
        "default_value": "32",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3954
    },
    "cl_updaterate": {
        "data_type": "float",
        "default_value": "20",
        "description": "Number of packets per second of updates you are requesting from the server",
        "flags": "client, archive, userinfo",
        "flagsRaw": 648,
        "hasDefensiveFlag": false,
        "index": 4215
    },
    "cl_usercmd_dbg": {
        "data_type": "int32",
        "default_value": "0",
        "description": "show usercmd payload sizing info for packets with more than this many usercmds",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 342
    },
    "cl_usercmd_max_per_movemsg ": {
        "data_type": "int32",
        "default_value": "4",
        "description": "max number of CUserCmds to send in one client move message",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 343
    },
    "cl_usercmd_showsize": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 344
    },
    "cl_usesocketsforloopback": {
        "data_type": "bool",
        "default_value": "true",
        "description": "When connecting to local listen server (for example, using the 'map' command), default to loopback=false, which connects to '127.0.0.1' instead of 'loopback'.  This uses the network stack so that fake lag/loss can be simulated.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 171
    },
    "cl_viewtarget_clamp": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4160
    },
    "cl_voice_transmit_lobby": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4219
    },
    "cl_voiceenabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4187
    },
    "cl_vsnd_morph_override_ease_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Controls whether the compiled in vsnd morph data ease in/out values are used or values set from the convars (cl_vsnd_morph_override_ease_in, cl_vsnd_morph_override_ease_out) are used",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4157
    },
    "cl_vsnd_morph_override_ease_in": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "If cl_enable_vsnd_morph_override_ease_enabled is true, ease into vsnd morph driven animation over the specified number of seconds.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4158
    },
    "cl_vsnd_morph_override_ease_out": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "If cl_enable_vsnd_morph_override_ease_enabled is true, ease out of vsnd morph driven animation over the specified number of seconds.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4159
    },
    "cl_weather": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3705
    },
    "cl_yawspeed": {
        "data_type": "float",
        "default_value": "210",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4056
    },
    "client_metrics_upload_batch_seconds": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4311
    },
    "clientport": {
        "data_type": "int32",
        "default_value": "0",
        "description": "If non-zero, client binds port to specific address.  Usually you should leave this blank to use a different random system-assigned port for each connection.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 175
    },
    "closecaption": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable close captioning.",
        "flags": "client, archive, userinfo",
        "flagsRaw": 648,
        "hasDefensiveFlag": false,
        "index": 262
    },
    "cloth_approximate_collide": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 609
    },
    "cloth_batch": {
        "data_type": "int32",
        "default_value": "32",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 617
    },
    "cloth_damping_bias": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 594
    },
    "cloth_damping_multiplier": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 593
    },
    "cloth_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 592
    },
    "cloth_debug_draw": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4129
    },
    "cloth_debug_draw_nodepth_alpha": {
        "data_type": "int32",
        "default_value": "16",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 601
    },
    "cloth_dry_drag": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 607
    },
    "cloth_dry_drag_soften": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 608
    },
    "cloth_ground_offset": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 602
    },
    "cloth_ground_plane_thickness": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 595
    },
    "cloth_guard_threshold": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 590
    },
    "cloth_interpolation_strategy": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 587
    },
    "cloth_iv_dump": {
        "data_type": "int32",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4131
    },
    "cloth_iv_store_back": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, replicated",
        "flagsRaw": 8202,
        "hasDefensiveFlag": true,
        "index": 4133
    },
    "cloth_legacy_stretch_force": {
        "data_type": "float",
        "default_value": "0.95",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 603
    },
    "cloth_legacy_support": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 604
    },
    "cloth_max_ticks_per_frame": {
        "data_type": "float",
        "default_value": "8",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 585
    },
    "cloth_node_debug_axis_length": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 596
    },
    "cloth_quad_smooth_iterations": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 599
    },
    "cloth_quad_smooth_rate": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 597
    },
    "cloth_quasistatic_iters": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 589
    },
    "cloth_reload_immediately": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 646
    },
    "cloth_resim_after": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 584
    },
    "cloth_rigid_update": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 588
    },
    "cloth_rod_smooth_iterations": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 600
    },
    "cloth_rod_smooth_rate": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 598
    },
    "cloth_sim_on_tick": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4375
    },
    "cloth_simulate": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 616
    },
    "cloth_sleep_threshold": {
        "data_type": "int32",
        "default_value": "30",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 583
    },
    "cloth_smooth_mouse": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4377
    },
    "cloth_step": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 582
    },
    "cloth_step_variability": {
        "data_type": "float",
        "default_value": "0.05",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 586
    },
    "cloth_update": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4130
    },
    "cloth_update_bones_on_ticks": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4378
    },
    "cloth_watch": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 591
    },
    "cloth_wind": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 605
    },
    "cloth_wind_pitch": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 606
    },
    "cojob_lock_hold_warning_threshold_ms": {
        "data_type": "int32",
        "default_value": "10000",
        "description": "How long in milliseconds before we warn about lock hold duration",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1095
    },
    "cojob_max_no_yield_time_us": {
        "data_type": "uint32",
        "default_value": "3000",
        "description": "Will spew if a job takes longer than the specified number of microseconds",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1094
    },
    "colviz_flags": {
        "data_type": "int32",
        "default_value": "0",
        "description": "ColViz flags.",
        "flags": "game, hidden, replicated, cheat",
        "flagsRaw": 24596,
        "hasDefensiveFlag": false,
        "index": 1645
    },
    "commentary": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Desired commentary mode state.",
        "flags": "game, archive",
        "flagsRaw": 132,
        "hasDefensiveFlag": false,
        "index": 1808
    },
    "commentary_available": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Automatically set by the game when a commentary file is available for the current map.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1807
    },
    "commentary_node_use_viewfacing": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4188
    },
    "compositematerial_showdebugwindow": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Source2/Composite Material Debug",
        "flags": "devonly, client, archive, replicated, cheat, menubar_item",
        "flagsRaw": 1073290,
        "hasDefensiveFlag": false,
        "index": 4107
    },
    "con_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Allows the console to be activated.",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 152
    },
    "con_logfile_suffix": {
        "data_type": "string",
        "default_value": "",
        "description": "Suffix to append to the console log, may be changed to reopen the log",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 36
    },
    "convars_echo_toggle_changes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Echo to the console changes caused by toggling.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 157
    },
    "cpu_level": {
        "data_type": "int32",
        "default_value": "2",
        "description": "CPU Level - Default: High",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4041
    },
    "cq_adjust_deadzone_ticks_faster": {
        "data_type": "float",
        "default_value": "0.75",
        "description": "don't adjust rate faster/slower if average queue is this close to goal.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1735
    },
    "cq_adjust_deadzone_ticks_slower": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "don't adjust rate faster/slower if average queue is this close to goal.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1736
    },
    "cq_buffer_bloat_msecs": {
        "data_type": "float",
        "default_value": "150",
        "description": "tolerable buffer bloat before we start pushing the rate down.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1731
    },
    "cq_buffer_bloat_msecs_max": {
        "data_type": "float",
        "default_value": "150",
        "description": "absolute max buffer bloat before we reset and discard buffered user commands.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1730
    },
    "cq_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Verbose command queue logging.",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1728
    },
    "cq_dilation_percentage": {
        "data_type": "float",
        "default_value": "5",
        "description": "When speeding up slowing down, this is how much",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1889
    },
    "cq_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Run one usercmd per server tick and maintain a buffer.  Client speeds up/slows down it's usercmd tick rate to maintain server command queue buffering.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1888
    },
    "cq_fake_starve": {
        "data_type": "int32",
        "default_value": "0",
        "description": "if set, starve this many commands by discarding during process usercmds.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1739
    },
    "cq_force_percent": {
        "data_type": "int32",
        "default_value": "0",
        "description": "debugging, force client tick rate faster/slower by specified percentage.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1729
    },
    "cq_logging": {
        "data_type": "bool",
        "default_value": "false",
        "description": "command queue logging of events.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1740
    },
    "cq_logging_interval": {
        "data_type": "float",
        "default_value": "0",
        "description": "command queue logging per player stats every N seconds, 0 to disable.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1741
    },
    "cq_min_queue_size": {
        "data_type": "int32",
        "default_value": "0",
        "description": "min buffer queue target size.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1732
    },
    "cq_print_every_command": {
        "data_type": "bool",
        "default_value": "false",
        "description": "print every command as we execute it",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1742
    },
    "cq_queue_sample_count": {
        "data_type": "int32",
        "default_value": "20",
        "description": "how many frames of samples to store in the buffer sample queue.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1734
    },
    "cq_resolve_commands_per_second": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "once cq_starve_hold_time elapses, we return to cq_min_queue_size over this many commands per second.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1733
    },
    "cq_runtests": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1743
    },
    "cq_runtests_broadcast_info": {
        "data_type": "bool",
        "default_value": "false",
        "description": "send message to remote client console when tests change.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1745
    },
    "cq_runtests_interval": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1744
    },
    "cq_starve_hold_msecs": {
        "data_type": "float",
        "default_value": "400",
        "description": "if we starve, we hold the faster time dilation for at least this many msecs.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1737
    },
    "cq_starve_increment_msecs": {
        "data_type": "float",
        "default_value": "1000",
        "description": "if we starve, we increment target queue only this often, 0 to disable.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1738
    },
    "crowbar_impact_damage_mass": {
        "data_type": "float",
        "default_value": "8",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1694
    },
    "crowbar_impact_damage_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1693
    },
    "csm_bias_override_0": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 855
    },
    "csm_bias_override_1": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 856
    },
    "csm_bias_override_2": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 857
    },
    "csm_bias_override_3": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 858
    },
    "csm_cascade0_override_dist": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 870
    },
    "csm_cascade1_override_dist": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 871
    },
    "csm_cascade2_override_dist": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 872
    },
    "csm_cascade3_override_dist": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 873
    },
    "csm_cascade_viewdir_shadow_bias_scale": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 869
    },
    "csm_max_dist_between_caster_and_receiver": {
        "data_type": "float",
        "default_value": "15000",
        "description": "default pushback",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 867
    },
    "csm_max_num_cascades_override": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Number of cascades in sunlight shadow",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 859
    },
    "csm_max_shadow_dist_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 860
    },
    "csm_max_visible_dist": {
        "data_type": "float",
        "default_value": "7500",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 866
    },
    "csm_res_override_0": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 851
    },
    "csm_res_override_1": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 852
    },
    "csm_res_override_2": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 853
    },
    "csm_res_override_3": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 854
    },
    "csm_split_log_scalar": {
        "data_type": "float",
        "default_value": "0.85",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 850
    },
    "csm_viewdir_shadow_bias": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 868
    },
    "csm_viewmodel_farz": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 864
    },
    "csm_viewmodel_max_shadow_dist": {
        "data_type": "float",
        "default_value": "21",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 862
    },
    "csm_viewmodel_max_visible_dist": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 865
    },
    "csm_viewmodel_nearz": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 863
    },
    "csm_viewmodel_shadows": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 861
    },
    "custom_game_detail_max_friend_lobbies": {
        "data_type": "int32",
        "default_value": "3",
        "description": "Max number of friend lobbies shown on custom game detail page.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2922
    },
    "custom_game_lobby_fake_entries": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Add fake entries to the custom lobby UI",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3209
    },
    "custom_game_overview_fake_friend_lobbies": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Fake friend lobbies in custom game overview UI.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2927
    },
    "custom_game_overview_fake_friends_in_game": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Fake friends in custom game overview UI.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2928
    },
    "custom_game_overview_friend_lobbies_to_hide_ingame_friends": {
        "data_type": "int32",
        "default_value": "4",
        "description": "When there are this many friend lobbies, the friends ingame display is hidden.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2930
    },
    "custom_game_overview_max_friend_lobbies": {
        "data_type": "int32",
        "default_value": "3",
        "description": "Max number of friend lobbies shown in custom game overview UI.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2929
    },
    "custom_game_overview_suppress_friend_data": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Suppress friend active and historical data on custom game overview UI",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2926
    },
    "customgamesetup_test_parties": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1610
    },
    "d3d_max_feature_level": {
        "data_type": "string",
        "default_value": "<Not set>",
        "description": "Report the maximum D3D feature level available.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 419
    },
    "debug_dashboard_battle_pass_ended": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3053
    },
    "debug_dashboard_battle_pass_unclaimed": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3054
    },
    "debug_dashboard_cell_end_timer": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3027
    },
    "debug_dashboard_overlay_opacity": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client, archive",
        "flagsRaw": 138,
        "hasDefensiveFlag": false,
        "index": 3052
    },
    "debug_dashboard_overlay_path": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client, archive",
        "flagsRaw": 138,
        "hasDefensiveFlag": false,
        "index": 3051
    },
    "debug_draw_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": false,
        "index": 10
    },
    "debug_hltv": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Print out hltv events",
        "flags": "devonly, client, replicated, clientcmd_can_execute",
        "flagsRaw": 268443658,
        "hasDefensiveFlag": false,
        "index": 3991
    },
    "debug_overlay_fullposition": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2294
    },
    "debug_physimpact": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1718
    },
    "debug_shared_random": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1957
    },
    "debug_takedamage_summaries": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1783
    },
    "debug_visibility_monitor": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1810
    },
    "debugoverlay_force_respect_ttl": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force respect TTL even when clearing scopes",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 913
    },
    "debugoverlay_show_text_outline": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Toggle display of box around text",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 912
    },
    "debugoverlay_text_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "Scale of the text used for 3d display",
        "flags": "archive, cheat",
        "flagsRaw": 16512,
        "hasDefensiveFlag": false,
        "index": 915
    },
    "decalfrequency": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, game, notify",
        "flagsRaw": 262,
        "hasDefensiveFlag": true,
        "index": 1820
    },
    "default_fov": {
        "data_type": "float",
        "default_value": "90",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3637
    },
    "demo_allow_game_mismatch": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Allow playback of demo even if game directories are not matched [may crash or fail to load].",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 311
    },
    "demo_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Turn on demo debug spew.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 312
    },
    "demo_flush": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Flush writing the demo file every network update",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 310
    },
    "demo_pauseatservertick": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Pauses demo playback at server tick",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 306
    },
    "demo_quitafterplayback": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Quits game after demo playback.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 305
    },
    "demo_recordcommands": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Record commands typed at console into .dem files.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 304
    },
    "demo_usefastgoto": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Use fast frame skipping when available for demo_goto commands.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 307
    },
    "demo_writefullupdate_rate": {
        "data_type": "int32",
        "default_value": "60",
        "description": "Interval time in seconds to write full updates to demo.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 107
    },
    "dev_create_sensitivity_report": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4020
    },
    "developer": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set developer message level.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 265
    },
    "diffcheck": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Activate diffcheck system.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 4460
    },
    "diffcheck_playerslot": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 4456
    },
    "diffcheck_spew": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Actually show diffcheck results.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 4457
    },
    "diffcheck_spew_diff_filter": {
        "data_type": "string",
        "default_value": "",
        "description": "Show diff with matching filter substring only.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 4459
    },
    "diffcheck_spew_diff_only": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show diff only.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 4458
    },
    "disable_dynamic_prop_loading": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If non-zero when a map loads, dynamic props won't be loaded",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1892
    },
    "display_game_events": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1931
    },
    "dota_10th_anniversary_use_fake_data": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use fake 10th anniversary data",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3026
    },
    "dota_1v1_skip_strategy": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2112
    },
    "dota_731_teaser_enabled": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2018
    },
    "dota_ability_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1598
    },
    "dota_ability_draft_force_gamemode_flag": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2034
    },
    "dota_ability_draft_shuffle_players": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2849
    },
    "dota_ability_legacy_mode_quick_cast": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enables quickcast for legacy keys.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3244
    },
    "dota_ability_projection_data_file": {
        "data_type": "string",
        "default_value": "scripts/ability_projection.txt",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3632
    },
    "dota_ability_quick_cast": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3960
    },
    "dota_ability_refcount_modifiers": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1599
    },
    "dota_ability_schema_force_public_behavior": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2200
    },
    "dota_ability_self_cast_timeout": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3961
    },
    "dota_ability_think_always": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1600
    },
    "dota_activate_window_on_hero_picking_start": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set, brings Dota to the foreground when hero picking starts",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2445
    },
    "dota_activate_window_on_match_found": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set, brings Dota to the foreground when match found",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2834
    },
    "dota_activate_window_on_ready_check": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set, brings Dota to the foreground on a ready check",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2658
    },
    "dota_activate_window_on_unpause": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set, brings Dota to the foreground when unpaused",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2426
    },
    "dota_active_play_section_new": {
        "data_type": "int32",
        "default_value": "11",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3019
    },
    "dota_aghanims_pudge_fx": {
        "data_type": "string",
        "default_value": "particles/items2_fx/mask_of_madness.vpcf",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1594
    },
    "dota_aghanims_pudge_fx_overhead": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1595
    },
    "dota_aghanims_pudge_fx_sound": {
        "data_type": "string",
        "default_value": "DOTA_Item.MaskOfMadness.Activate",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1596
    },
    "dota_aghsfort_watch_tower_allow_completion": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1597
    },
    "dota_aghslab_test_hero_unlocks_in_local_game": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1669
    },
    "dota_alarm_ring_size": {
        "data_type": "float",
        "default_value": "23",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3344
    },
    "dota_all_sets_animated": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show set tiles always as animated unless high quality dashboard is off.",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 2727
    },
    "dota_all_vision": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1400
    },
    "dota_allow_clientside_entities": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3957
    },
    "dota_allow_clientside_particles": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3635
    },
    "dota_allow_invalid_orders": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3882
    },
    "dota_allow_muting_bots": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2781
    },
    "dota_allow_orders_multiple_nextbot_updates": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1615
    },
    "dota_allow_orders_while_paused": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1612
    },
    "dota_allow_pause_in_match": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Allow players to pause in matchmade games",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2148
    },
    "dota_allow_single_player_minigames": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Allows minigames to work on single player games",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1990
    },
    "dota_alt_creep_distance_z_offset": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2616
    },
    "dota_alt_lane_creep_distance_threshold": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2615
    },
    "dota_alt_neutral_creep_enable_stack_penalty": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2617
    },
    "dota_alt_show_lane_creep_gold_bounty": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2614
    },
    "dota_alt_show_neutral_creep_gold_bounty": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2613
    },
    "dota_alt_show_neutral_stack_times_and_arrow": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2611
    },
    "dota_alt_show_rune_spawn_times": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2468
    },
    "dota_alt_show_ward_suggestions": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3718
    },
    "dota_alt_shows_neutral_spawn_boxes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3716
    },
    "dota_alt_shows_tower_attack_range": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3822
    },
    "dota_always_show_hero_finder": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Always display the hero finder.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3431
    },
    "dota_ambient_cloth": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4340
    },
    "dota_ambient_creatures": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3958
    },
    "dota_ambient_creatures_pop": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3959
    },
    "dota_animation_debug": {
        "data_type": "int32",
        "default_value": "-2",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2022
    },
    "dota_animation_force_modifier": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2205
    },
    "dota_announcer_idle_speech_deathwait": {
        "data_type": "float",
        "default_value": "45",
        "description": "This many seconds must pass after a hero dies for an announcer to consider saying idle lines.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2352
    },
    "dota_announcer_idle_speech_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If true print debug information about why announcers do or do not idle.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2355
    },
    "dota_announcer_idle_speech_herodamage_limit": {
        "data_type": "float",
        "default_value": "250",
        "description": "If any hero has taken more than this many hitpoints of damage recently, no idles play.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2354
    },
    "dota_announcer_idle_speech_herodamage_window": {
        "data_type": "float",
        "default_value": "45",
        "description": "If any hero has taken more than dota_announcer_idle_speech_herodamage_limit hitpoints of damage in this many seconds, no idles play.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2353
    },
    "dota_announcer_idle_speech_interval": {
        "data_type": "float",
        "default_value": "240",
        "description": "After an announcer has said an idle line, another can't play for at least this many seconds.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2351
    },
    "dota_announcer_idle_speech_minwait": {
        "data_type": "float",
        "default_value": "20",
        "description": "Announcers won't say idle speech unless at least this many seconds passed since the last time they said something.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2350
    },
    "dota_announcer_idle_speech_starttime": {
        "data_type": "float",
        "default_value": "240",
        "description": "This many seconds must have passed since start of game before announcers poll for idle speech.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2349
    },
    "dota_anonymous_mode": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, you won't see other people's persona names, guild names or avatars",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2898
    },
    "dota_aphotic_shield_scale_divisor": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2178
    },
    "dota_aphotic_shield_scale_max": {
        "data_type": "float",
        "default_value": "90",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2176
    },
    "dota_aphotic_shield_scale_min": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2177
    },
    "dota_apm_update_interval": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1665
    },
    "dota_arcana_disable_hud_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2733
    },
    "dota_arcana_votes_cache_duration": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2805
    },
    "dota_armory_CustomTagDisplayName_1": {
        "data_type": "string",
        "default_value": "Tag 1",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3171
    },
    "dota_armory_CustomTagDisplayName_2": {
        "data_type": "string",
        "default_value": "Tag 2",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3172
    },
    "dota_armory_CustomTagDisplayName_3": {
        "data_type": "string",
        "default_value": "Tag 3",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3173
    },
    "dota_armory_CustomTagDisplayName_4": {
        "data_type": "string",
        "default_value": "Tag 4",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3174
    },
    "dota_armory_CustomTagDisplayName_5": {
        "data_type": "string",
        "default_value": "Tag 5",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3175
    },
    "dota_armory_CustomTagDisplayName_6": {
        "data_type": "string",
        "default_value": "Tag 6",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3176
    },
    "dota_armory_CustomTagDisplayName_7": {
        "data_type": "string",
        "default_value": "Tag 7",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3177
    },
    "dota_armory_CustomTagDisplayName_8": {
        "data_type": "string",
        "default_value": "Tag 8",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3178
    },
    "dota_armory_all_items_group_by_type": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 1073741960,
        "hasDefensiveFlag": false,
        "index": 3103
    },
    "dota_armory_all_items_sort_option": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 1073741960,
        "hasDefensiveFlag": false,
        "index": 3102
    },
    "dota_armory_animated_immortals": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show hero immortal items as animated tiles rather then static ones.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3109
    },
    "dota_armory_automatically_add_new_item_to_collection": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2398
    },
    "dota_armory_last_selected_hero_id": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 1073741960,
        "hasDefensiveFlag": false,
        "index": 3110
    },
    "dota_armory_load_all_unavailable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Load all available items.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3104
    },
    "dota_armory_stack_unusuals": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2635
    },
    "dota_armory_stickers_group_option": {
        "data_type": "int32",
        "default_value": "4",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 1073741960,
        "hasDefensiveFlag": false,
        "index": 3107
    },
    "dota_armory_stickers_quality_filter_option": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 1073741960,
        "hasDefensiveFlag": false,
        "index": 3105
    },
    "dota_armory_stickers_quality_type_option": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 1073741960,
        "hasDefensiveFlag": false,
        "index": 3106
    },
    "dota_armory_use_alphabetical_dividers": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show alphabetical dividers in the hero list.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3108
    },
    "dota_assisted_camera_operator_pure_interp_multiplier": {
        "data_type": "float",
        "default_value": "16",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3680
    },
    "dota_attack_timer_buffer_ticks": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1562
    },
    "dota_auto_connect": {
        "data_type": "string",
        "default_value": "",
        "description": "Automatically connect to the specified server forever",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3149
    },
    "dota_auto_create_proxy": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Automatically create a proxy",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3158
    },
    "dota_auto_surrender_all_disconnected_timeout": {
        "data_type": "float",
        "default_value": "60",
        "description": "If all players have been disconnected for at least N seconds, end the game immediately",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2086
    },
    "dota_autograph_force_lv10": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2636
    },
    "dota_autograph_force_lv20": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2637
    },
    "dota_autograph_force_lv50": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2638
    },
    "dota_autoselect_bots": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, new bots will be autoselected. This is for the item icon editor.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3811
    },
    "dota_autoselect_entity": {
        "data_type": "string",
        "default_value": "none",
        "description": "If set, new bots of the given type will be autoselected. This is for the item icon editor.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3812
    },
    "dota_background_last_match_force_hero": {
        "data_type": "string",
        "default_value": "",
        "description": "Set to a hero's name to force showing that hero on the last match background.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3198
    },
    "dota_background_last_match_force_missing_data": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force the dashboard background to assume that data is missing.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3199
    },
    "dota_battle_report_force_featured_hero_id": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3651
    },
    "dota_battle_report_force_featured_role": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3652
    },
    "dota_battle_report_highlight_calculate_local": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3650
    },
    "dota_battle_report_highlight_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3649
    },
    "dota_battlereport_aggregate_hero_stats_cache_duration": {
        "data_type": "int32",
        "default_value": "86400",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3648
    },
    "dota_bingo_force_all_phases_unlocked": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3081
    },
    "dota_bingo_points_animation_duration_max_change": {
        "data_type": "float",
        "default_value": "20000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3086
    },
    "dota_bingo_points_animation_duration_max_seconds": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3084
    },
    "dota_bingo_points_animation_duration_min": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3083
    },
    "dota_bingo_points_animation_duration_min_change": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3085
    },
    "dota_bingo_show_debug_button": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3082
    },
    "dota_bingo_use_fake_stats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3080
    },
    "dota_black_screen_debug_messages": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2126
    },
    "dota_blog_image_accept_match": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2838
    },
    "dota_bloodstone_aoe_size": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Size of the bloodstone AOE increase.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2188
    },
    "dota_bot_allow_human_control": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1531
    },
    "dota_bot_chat_throttle_duration": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1545
    },
    "dota_bot_client_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Draw some basic client-side debug info for each hero.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4264
    },
    "dota_bot_debug_grid": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1535
    },
    "dota_bot_debug_lanes": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1533
    },
    "dota_bot_debug_minimap": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1537
    },
    "dota_bot_debug_path": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1540
    },
    "dota_bot_debug_path_avg": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1541
    },
    "dota_bot_debug_path_draw": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1528
    },
    "dota_bot_debug_pathing": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1532
    },
    "dota_bot_debug_potential_location": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1536
    },
    "dota_bot_debug_team": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1543
    },
    "dota_bot_debug_team_power": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2710
    },
    "dota_bot_debug_ward_spots": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1534
    },
    "dota_bot_difficulty_mask": {
        "data_type": "int32",
        "default_value": "30",
        "description": "Difficulties of bots to matchmake for.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3014
    },
    "dota_bot_disable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1525
    },
    "dota_bot_disable_test": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1546
    },
    "dota_bot_failed_pathfind_warnings": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1529
    },
    "dota_bot_fake_afk": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1662
    },
    "dota_bot_force_pick": {
        "data_type": "string",
        "default_value": "",
        "description": "Force bots to pick one of these heroes before falling back to random selection (should be a comma-separated list with no spaces)",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1547
    },
    "dota_bot_force_pick_slot": {
        "data_type": "string",
        "default_value": "",
        "description": "Force picks to be mapped to specific player ids.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1548
    },
    "dota_bot_level": {
        "data_type": "int32",
        "default_value": "0",
        "description": "If set, bots will be set to the level specified with appropriate gold on game start",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2147
    },
    "dota_bot_long_frame_limit": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "game, archive",
        "flagsRaw": 132,
        "hasDefensiveFlag": false,
        "index": 1542
    },
    "dota_bot_match_solo": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2997
    },
    "dota_bot_mode": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2241
    },
    "dota_bot_practice_difficulty": {
        "data_type": "int32",
        "default_value": "3",
        "description": "Default difficulty for quick bot practice games",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2248
    },
    "dota_bot_practice_gamemode": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Default game mode for bot practice games, AP = 1",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2251
    },
    "dota_bot_practice_script": {
        "data_type": "uint64",
        "default_value": "0",
        "description": "Bot script ID to use for local games.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2253
    },
    "dota_bot_practice_select_hero": {
        "data_type": "string",
        "default_value": "",
        "description": "Force selection of a hero for the human player in practice games.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2252
    },
    "dota_bot_practice_start": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Whether to start a local game when the map loads",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2250
    },
    "dota_bot_practice_team": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Default team for quick bot practice games",
        "flags": "game, client, archive, replicated",
        "flagsRaw": 8332,
        "hasDefensiveFlag": false,
        "index": 2249
    },
    "dota_bot_practice_team_desired": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2999
    },
    "dota_bot_purchase_item_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1438
    },
    "dota_bot_purchase_using_dota_suggest": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1444
    },
    "dota_bot_script_index_mask": {
        "data_type": "int32",
        "default_value": "15",
        "description": "Valid dedicated server script indexes for bots.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3015
    },
    "dota_bot_spam_modes": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1527
    },
    "dota_bot_takeover_disconnected": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1530
    },
    "dota_bot_tutorial_boss": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1526
    },
    "dota_bot_use_machine_learned_weights": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1549
    },
    "dota_bounty_rune_spawn_time": {
        "data_type": "float",
        "default_value": "180",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1975
    },
    "dota_bp_fake_friend_count": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Fake the count of Battle Pass friends",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3229
    },
    "dota_bp_gift_level": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3077
    },
    "dota_bp_team_fandom_last_seen": {
        "data_type": "int32",
        "default_value": "1638320400",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3202
    },
    "dota_broadcast_is_live_cache_duration_s": {
        "data_type": "int32",
        "default_value": "15",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2695
    },
    "dota_broadcaster_camera_interp": {
        "data_type": "float",
        "default_value": "0.8",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3567
    },
    "dota_broadcaster_channel_country_name": {
        "data_type": "string",
        "default_value": "",
        "description": "Broadcaster Channel Country Name",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2840
    },
    "dota_broadcaster_channel_description": {
        "data_type": "string",
        "default_value": "",
        "description": "Broadcaster Channel Description",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2839
    },
    "dota_broadcaster_channel_language": {
        "data_type": "string",
        "default_value": "",
        "description": "Broadcaster Channel Language",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2841
    },
    "dota_broadcaster_channel_save_settings": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3048
    },
    "dota_building_defended_radius": {
        "data_type": "float",
        "default_value": "800",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1419
    },
    "dota_building_health_loss_warn_interval": {
        "data_type": "float",
        "default_value": "9",
        "description": "Minimum seconds between announcer warning a particular building is under attack",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1420
    },
    "dota_cache_duration_all_hero_challenge_s": {
        "data_type": "int32",
        "default_value": "1800",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3170
    },
    "dota_cache_duration_available_private_coaching_sessions_s": {
        "data_type": "int32",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3187
    },
    "dota_cache_duration_available_private_coaching_sessions_summary_s": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3188
    },
    "dota_cache_duration_bingo_league_stats_s": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3653
    },
    "dota_cache_duration_coach_history_s": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3185
    },
    "dota_cache_duration_custom_game_counts_s": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3192
    },
    "dota_cache_duration_fantasy_craft_s": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3582
    },
    "dota_cache_duration_fantasy_raw_stats_s": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3580
    },
    "dota_cache_duration_fantasy_roster_s": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3581
    },
    "dota_cache_duration_favoriteplayers_s": {
        "data_type": "int32",
        "default_value": "14400",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2896
    },
    "dota_cache_duration_guild_data_s": {
        "data_type": "int32",
        "default_value": "900",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2913
    },
    "dota_cache_duration_guild_persona_data_s": {
        "data_type": "int32",
        "default_value": "10800",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2914
    },
    "dota_cache_duration_guild_summary_s": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2912
    },
    "dota_cache_duration_leaderboard_s": {
        "data_type": "int32",
        "default_value": "60",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3395
    },
    "dota_cache_duration_league_admin_list_s": {
        "data_type": "int32",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2756
    },
    "dota_cache_duration_league_dpc_standings_s": {
        "data_type": "int32",
        "default_value": "60",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2761
    },
    "dota_cache_duration_league_info_s": {
        "data_type": "int32",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2750
    },
    "dota_cache_duration_league_list_s": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2753
    },
    "dota_cache_duration_league_live_dpc_games_s": {
        "data_type": "int32",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2758
    },
    "dota_cache_duration_league_live_games_s": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2757
    },
    "dota_cache_duration_league_lobby_nodes_s": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2759
    },
    "dota_cache_duration_league_node_results_s": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2760
    },
    "dota_cache_duration_league_prediction_results_s": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2755
    },
    "dota_cache_duration_league_predictions_s": {
        "data_type": "int32",
        "default_value": "60",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2754
    },
    "dota_cache_duration_league_prize_pool_s": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2752
    },
    "dota_cache_duration_limited_item_purchase_s": {
        "data_type": "int32",
        "default_value": "1800",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2800
    },
    "dota_cache_duration_partysearch_s": {
        "data_type": "int32",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2778
    },
    "dota_cache_duration_player_accomplishments_s": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3169
    },
    "dota_cache_duration_team_info_s": {
        "data_type": "int32",
        "default_value": "60",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2626
    },
    "dota_camera_accelerate": {
        "data_type": "float",
        "default_value": "49",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3530
    },
    "dota_camera_allow_freecam": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3565
    },
    "dota_camera_always_snap_height": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3556
    },
    "dota_camera_assisted_camera_operator_bias_constant_oneteam": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3670
    },
    "dota_camera_assisted_camera_operator_bias_constant_twoteams": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3671
    },
    "dota_camera_assisted_camera_operator_bias_frame_multiplier": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3656
    },
    "dota_camera_assisted_camera_operator_bias_scale": {
        "data_type": "float",
        "default_value": "1.4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3657
    },
    "dota_camera_assisted_camera_operator_bias_scale_frame_multiplier": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3660
    },
    "dota_camera_assisted_camera_operator_blend_multiplier": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3655
    },
    "dota_camera_assisted_camera_operator_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3659
    },
    "dota_camera_assisted_camera_operator_inner_radius_at_zoomed_in": {
        "data_type": "float",
        "default_value": "250",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3661
    },
    "dota_camera_assisted_camera_operator_input_cooldown": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3677
    },
    "dota_camera_assisted_camera_operator_interp_speed_bias_param": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3669
    },
    "dota_camera_assisted_camera_operator_interp_speed_dist_max": {
        "data_type": "float",
        "default_value": "8000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3666
    },
    "dota_camera_assisted_camera_operator_interp_speed_dist_min": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3665
    },
    "dota_camera_assisted_camera_operator_interp_speed_multiplier": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3654
    },
    "dota_camera_assisted_camera_operator_interp_speed_speed_max": {
        "data_type": "float",
        "default_value": "50",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3668
    },
    "dota_camera_assisted_camera_operator_interp_speed_speed_min": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3667
    },
    "dota_camera_assisted_camera_operator_max_instanteous_ent_velocity": {
        "data_type": "float",
        "default_value": "275",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3678
    },
    "dota_camera_assisted_camera_operator_mouseclick_duration": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3679
    },
    "dota_camera_assisted_camera_operator_movement_multiplier": {
        "data_type": "float",
        "default_value": "2400",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3658
    },
    "dota_camera_assisted_camera_operator_null_zone_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3672
    },
    "dota_camera_assisted_camera_operator_null_zone_velocity_max": {
        "data_type": "float",
        "default_value": "125",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3674
    },
    "dota_camera_assisted_camera_operator_null_zone_velocity_min": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3673
    },
    "dota_camera_assisted_camera_operator_outer_radius_at_zoomed_in": {
        "data_type": "float",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3662
    },
    "dota_camera_assisted_camera_operator_pan_movement_interp_multiplier_in": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3675
    },
    "dota_camera_assisted_camera_operator_pan_movement_interp_multiplier_out": {
        "data_type": "float",
        "default_value": "6",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3676
    },
    "dota_camera_assisted_camera_operator_radius_scale_at_zoomed_out": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3663
    },
    "dota_camera_assisted_camera_operator_unit_fade_duration": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3664
    },
    "dota_camera_broadcaster_mousewheel_direction_multiplier": {
        "data_type": "float",
        "default_value": "0.025",
        "description": "Multiplier on direction, used for broadcasters only.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3684
    },
    "dota_camera_broadcaster_mousewheel_frametime_multiplier": {
        "data_type": "float",
        "default_value": "1",
        "description": "Multipler on frametime, used for broadcasters only.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3686
    },
    "dota_camera_deatheffect": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3917
    },
    "dota_camera_dev_fake_team_spec": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3689
    },
    "dota_camera_disable_yaw": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3527
    },
    "dota_camera_disable_zoom": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3528
    },
    "dota_camera_distance": {
        "data_type": "float",
        "default_value": "1200",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3504
    },
    "dota_camera_distance_min": {
        "data_type": "float",
        "default_value": "1134",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3503
    },
    "dota_camera_distance_teamspec": {
        "data_type": "float",
        "default_value": "2600",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3505
    },
    "dota_camera_dotatv_smooth_drag": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3545
    },
    "dota_camera_dotatv_smooth_drag_drag": {
        "data_type": "float",
        "default_value": "0.075",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3546
    },
    "dota_camera_dotatv_smooth_drag_inverse": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3548
    },
    "dota_camera_dotatv_smooth_drag_max_speed": {
        "data_type": "float",
        "default_value": "25",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3547
    },
    "dota_camera_drag_factor_zoomed_out": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3520
    },
    "dota_camera_edgemove": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, userinfo",
        "flagsRaw": 648,
        "hasDefensiveFlag": false,
        "index": 3851
    },
    "dota_camera_edgemove_tolerance": {
        "data_type": "float",
        "default_value": "0.008",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3879
    },
    "dota_camera_enable_terrain_sample_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3543
    },
    "dota_camera_farplane": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3509
    },
    "dota_camera_fog_end": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3507
    },
    "dota_camera_fog_end_scalar": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3517
    },
    "dota_camera_fog_end_zoomed_in": {
        "data_type": "float",
        "default_value": "2500",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3513
    },
    "dota_camera_fog_end_zoomed_out": {
        "data_type": "float",
        "default_value": "6000",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3515
    },
    "dota_camera_fog_start": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3506
    },
    "dota_camera_fog_start_scalar": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3516
    },
    "dota_camera_fog_start_zoomed_in": {
        "data_type": "float",
        "default_value": "2000",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3512
    },
    "dota_camera_fog_start_zoomed_out": {
        "data_type": "float",
        "default_value": "4500",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3514
    },
    "dota_camera_follow_doublepress_time": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3850
    },
    "dota_camera_fov_max": {
        "data_type": "float",
        "default_value": "70",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3693
    },
    "dota_camera_fov_min": {
        "data_type": "float",
        "default_value": "45",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3692
    },
    "dota_camera_fov_min_teamspec": {
        "data_type": "float",
        "default_value": "55",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3694
    },
    "dota_camera_hero_inspector_bob_amount": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3474
    },
    "dota_camera_hero_inspector_camera_height_percentage": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "% of the hero's hitbox height.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3475
    },
    "dota_camera_hero_inspector_camera_lookat_height_percentage": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "% of the hero's hitbox height.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3476
    },
    "dota_camera_hero_inspector_dist_max": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3491
    },
    "dota_camera_hero_inspector_dist_min": {
        "data_type": "float",
        "default_value": "150",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3490
    },
    "dota_camera_hero_inspector_drag_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3484
    },
    "dota_camera_hero_inspector_drag_speed_const": {
        "data_type": "float",
        "default_value": "25",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3483
    },
    "dota_camera_hero_inspector_drag_yaw_max": {
        "data_type": "float",
        "default_value": "89",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3486
    },
    "dota_camera_hero_inspector_drag_yaw_min": {
        "data_type": "float",
        "default_value": "-60",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3485
    },
    "dota_camera_hero_inspector_duration": {
        "data_type": "float",
        "default_value": "0.75",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3472
    },
    "dota_camera_hero_inspector_fog_end_max": {
        "data_type": "float",
        "default_value": "4000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3480
    },
    "dota_camera_hero_inspector_fog_end_min": {
        "data_type": "float",
        "default_value": "4000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3479
    },
    "dota_camera_hero_inspector_fog_start_max": {
        "data_type": "float",
        "default_value": "1200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3478
    },
    "dota_camera_hero_inspector_fog_start_min": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3477
    },
    "dota_camera_hero_inspector_fov_buffer_multiplier": {
        "data_type": "float",
        "default_value": "1.25",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3496
    },
    "dota_camera_hero_inspector_fov_default": {
        "data_type": "float",
        "default_value": "75",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3489
    },
    "dota_camera_hero_inspector_fov_max": {
        "data_type": "float",
        "default_value": "80",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3488
    },
    "dota_camera_hero_inspector_fov_min": {
        "data_type": "float",
        "default_value": "50",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3487
    },
    "dota_camera_hero_inspector_grass_skew_multiplier": {
        "data_type": "float",
        "default_value": "0.33",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3497
    },
    "dota_camera_hero_inspector_mousewheel_direction_multiplier": {
        "data_type": "float",
        "default_value": "0.05",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3492
    },
    "dota_camera_hero_inspector_mousewheel_frametime_multiplier": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3493
    },
    "dota_camera_hero_inspector_mousewheel_process_interval": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3494
    },
    "dota_camera_hero_inspector_speed_const": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3473
    },
    "dota_camera_hero_inspector_use_third_person": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Locks the showcase behind the hero",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3495
    },
    "dota_camera_hero_inspector_zfar_max": {
        "data_type": "float",
        "default_value": "4000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3482
    },
    "dota_camera_hero_inspector_zfar_min": {
        "data_type": "float",
        "default_value": "3500",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3481
    },
    "dota_camera_hold_select_to_follow": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, pressing the select hero button will actively follow and keep you on screen",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3858
    },
    "dota_camera_legacy": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Use old settings for Dota camera.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3511
    },
    "dota_camera_legacy_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2131
    },
    "dota_camera_lerp_duration": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3875
    },
    "dota_camera_listener_distance": {
        "data_type": "float",
        "default_value": "434",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3510
    },
    "dota_camera_lock": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3540
    },
    "dota_camera_lock_lerp": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3564
    },
    "dota_camera_lock_mouse_lead": {
        "data_type": "float",
        "default_value": "220",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3534
    },
    "dota_camera_lock_view_helper": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3532
    },
    "dota_camera_lock_view_helper_ratio": {
        "data_type": "float",
        "default_value": "0.45",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3533
    },
    "dota_camera_map_bounds_shrink_at_max_zoom": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "",
        "flags": "devonly, client, hidden, cheat",
        "flagsRaw": 16410,
        "hasDefensiveFlag": false,
        "index": 3523
    },
    "dota_camera_mousewheel_delay_reset_interval": {
        "data_type": "float",
        "default_value": "1",
        "description": "The mousewheel delay timer is reset after this interval. Does not apply to spectator zooming.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3691
    },
    "dota_camera_mousewheel_direction_multiplier": {
        "data_type": "float",
        "default_value": "0.03",
        "description": "Multiplier on direction",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3683
    },
    "dota_camera_mousewheel_frametime_multiplier": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "Multipler on frametime.",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3685
    },
    "dota_camera_mousewheel_process_interval": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "How far in the future should the camera continue to process mousewheel events after they occur. In seconds.",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3682
    },
    "dota_camera_mousewheel_start_delay": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "The delay (in seconds) before mousewheeling will begin to actually zoom. Only used for players in-game. Does not apply to spectator zooming.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3690
    },
    "dota_camera_movement_amount": {
        "data_type": "float",
        "default_value": "800",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3688
    },
    "dota_camera_movement_frametime_multiplier": {
        "data_type": "float",
        "default_value": "2",
        "description": "Multipler on frametime.",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3687
    },
    "dota_camera_nearplane": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3508
    },
    "dota_camera_pitch_max": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3696
    },
    "dota_camera_pitch_max_teamspec": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3502
    },
    "dota_camera_pitch_min": {
        "data_type": "float",
        "default_value": "38",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3695
    },
    "dota_camera_reverse": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3544
    },
    "dota_camera_smart_follow_drag_distance": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3535
    },
    "dota_camera_smart_follow_edge_distance": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3536
    },
    "dota_camera_smart_follow_offset_reset": {
        "data_type": "float",
        "default_value": "8",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3538
    },
    "dota_camera_smart_follow_offset_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3537
    },
    "dota_camera_smooth_count": {
        "data_type": "int32",
        "default_value": "8",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3541
    },
    "dota_camera_smooth_distance": {
        "data_type": "float",
        "default_value": "96",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3539
    },
    "dota_camera_speed": {
        "data_type": "float",
        "default_value": "3000",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3531
    },
    "dota_camera_stage_fov": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3555
    },
    "dota_camera_stage_pitch": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3552
    },
    "dota_camera_stage_rotate": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3554
    },
    "dota_camera_stage_x": {
        "data_type": "float",
        "default_value": "25",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3549
    },
    "dota_camera_stage_y": {
        "data_type": "float",
        "default_value": "-600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3550
    },
    "dota_camera_stage_yaw": {
        "data_type": "float",
        "default_value": "90",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3553
    },
    "dota_camera_stage_z": {
        "data_type": "float",
        "default_value": "225",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3551
    },
    "dota_camera_temporary_freecamera_time": {
        "data_type": "float",
        "default_value": "2.5",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3498
    },
    "dota_camera_terrain_sample_timer_duration": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3542
    },
    "dota_camera_toggle_select_to_follow": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3859
    },
    "dota_camera_yaw": {
        "data_type": "float",
        "default_value": "90",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3529
    },
    "dota_camera_yaw_rotate_hold_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3526
    },
    "dota_camera_yaw_rotate_speed": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3525
    },
    "dota_camera_z_interp_speed": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3681
    },
    "dota_camera_zfar_zoomed_in": {
        "data_type": "float",
        "default_value": "3300",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3518
    },
    "dota_camera_zfar_zoomed_out": {
        "data_type": "float",
        "default_value": "4800",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3519
    },
    "dota_camera_zoom_return_to_default_speed": {
        "data_type": "float",
        "default_value": "0.001",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3522
    },
    "dota_camera_zoom_return_to_default_time": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3521
    },
    "dota_camera_zoom_return_to_default_time_spectator_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3524
    },
    "dota_cameraman_queryunit_slave": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Query unit controls for camera man.  0=none, 1=copy main broadcaster query unit, but allow local override, 2=always slave from main broadcaster, no local control over query unit",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3813
    },
    "dota_cd_captain_pick_time": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1994
    },
    "dota_cd_minimum_pick_time": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1995
    },
    "dota_chat_allow_global": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Allow chat channels to be set to global, causing their chat to show up in other channel's tabs.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3206
    },
    "dota_chat_broadcast_whispers": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show whispers in all chat tabs, not just the tab for the individual user.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3136
    },
    "dota_chat_disable_refresh_user_list": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3132
    },
    "dota_chat_enable_whispers": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show steam messages as whispers inline in chat.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3135
    },
    "dota_chat_filter_settings": {
        "data_type": "int32",
        "default_value": "3",
        "description": "What chat filtering level the user wants (EDotaChatFilter)",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3571
    },
    "dota_chat_filter_settings_apply_to_spectators": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Whether chat filtering applies to spectating as well or not.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3572
    },
    "dota_chat_lines_always_create_new_label": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3205
    },
    "dota_chat_mute_enemies": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Set to 1 to mute all enemy chat",
        "flags": "devonly, client, archive",
        "flagsRaw": 138,
        "hasDefensiveFlag": false,
        "index": 3570
    },
    "dota_chat_mute_everyone": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set to 1 to mute all incoming chat",
        "flags": "devonly, client, archive",
        "flagsRaw": 138,
        "hasDefensiveFlag": false,
        "index": 3569
    },
    "dota_chat_scroll_step": {
        "data_type": "int32",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3208
    },
    "dota_chat_wheel_use_panel": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3128
    },
    "dota_cheap_water": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3272
    },
    "dota_cheers_enable_scene_reload": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2505
    },
    "dota_cl_projection_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3790
    },
    "dota_claim_item_action_async_rewards_timeout_duration": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2807
    },
    "dota_client_filesystem_warnings": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set fs_warning_level and fs_warning_mode to warn on synchronous file warnings.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4265
    },
    "dota_client_first_session": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3058
    },
    "dota_clip_builder_bitrate": {
        "data_type": "int32",
        "default_value": "30",
        "description": "Bitrate of the resulting clip",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2550
    },
    "dota_clip_builder_format": {
        "data_type": "string",
        "default_value": "mp4",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2551
    },
    "dota_clip_builder_framerate": {
        "data_type": "int32",
        "default_value": "60",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2549
    },
    "dota_clip_builder_hide_game_ui": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2548
    },
    "dota_clip_builder_high_quality_rendering": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2547
    },
    "dota_clip_builder_max_duration": {
        "data_type": "int32",
        "default_value": "60",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2546
    },
    "dota_clip_builder_output_folder": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2552
    },
    "dota_clip_builder_seconds_graduation": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2553
    },
    "dota_clip_unreachable_paths": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1631
    },
    "dota_cm_captain_pick_time": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1992
    },
    "dota_cm_minimum_pick_time": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1993
    },
    "dota_coach_controls_always_allow_requesting": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2554
    },
    "dota_coach_fake_history": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3074
    },
    "dota_coach_friend_disable_client_validation": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3186
    },
    "dota_coaching_page_force_eligible": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3099
    },
    "dota_collapsed_bundled_item_list": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2881
    },
    "dota_collapsed_new_item_list": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2880
    },
    "dota_collapsed_recent_item_list": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2882
    },
    "dota_collections_first_time_visitor": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3100
    },
    "dota_collections_stack_duplicates": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 1073741960,
        "hasDefensiveFlag": false,
        "index": 3101
    },
    "dota_combat_log_update_interval": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 2555
    },
    "dota_combatlog_dump_replay_fights": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Whether or not to dump the replay fights on load",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3576
    },
    "dota_combatlog_fight_idle_time": {
        "data_type": "float",
        "default_value": "5",
        "description": "The amount of time needed to determine a fight is over (no one involved in a fight did anything to anyone else involved in the fight).",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1605
    },
    "dota_combatlog_file": {
        "data_type": "string",
        "default_value": "",
        "description": "A file you want to write combatlog events to as they happen.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3575
    },
    "dota_combatlog_location_interval": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1664
    },
    "dota_combine_models": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client, replicated",
        "flagsRaw": 8202,
        "hasDefensiveFlag": true,
        "index": 3833
    },
    "dota_comp_ti10_fake_state_all": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3115
    },
    "dota_comp_ti10_fake_time": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3114
    },
    "dota_compendium_2023_predictions_advance_time": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3093
    },
    "dota_compendium_2023_predictions_override_league": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3089
    },
    "dota_compendium_2023_predictions_unlock_all": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3092
    },
    "dota_compendium_2023_predictions_use_bracket_historical_data": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3091
    },
    "dota_compendium_2023_predictions_use_group_stage_historical_data": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3090
    },
    "dota_compendium_levelup_interval_accel": {
        "data_type": "float",
        "default_value": "0.95",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2844
    },
    "dota_compendium_levelup_interval_min": {
        "data_type": "float",
        "default_value": "0.06",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2845
    },
    "dota_compendium_levelup_pitch_adjust_high": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2847
    },
    "dota_compendium_levelup_pitch_adjust_low": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2846
    },
    "dota_compendium_levelup_starting_interval_high": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2843
    },
    "dota_compendium_levelup_starting_interval_low": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2842
    },
    "dota_competitive_game_modes": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Bit masks of game modes to search for in ranked matchmaking",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3154
    },
    "dota_conduct_scorecard_latest_ack_seq_num": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Sequence number of latest conduct summary that has been acknowledged.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3191
    },
    "dota_contest_schema_do_contest_validation": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3577
    },
    "dota_context_aware_voice_change_window_minutes": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2210
    },
    "dota_context_aware_voice_networth_change_threshold": {
        "data_type": "float",
        "default_value": "0.025",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2209
    },
    "dota_context_aware_voice_networth_threshold": {
        "data_type": "float",
        "default_value": "0.09",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2208
    },
    "dota_contextual_tips_ability_point_available_tip_wait_time": {
        "data_type": "float",
        "default_value": "25",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2237
    },
    "dota_contextual_tips_bountyrune_range": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2230
    },
    "dota_contextual_tips_bountyrune_scan_duration": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2229
    },
    "dota_contextual_tips_campblock_timer": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2224
    },
    "dota_contextual_tips_cooldown_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2218
    },
    "dota_contextual_tips_damage_hiding_ignores_bots": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2217
    },
    "dota_contextual_tips_debug_tip_id": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2216
    },
    "dota_contextual_tips_dev": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2214
    },
    "dota_contextual_tips_dust_search_radius": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2226
    },
    "dota_contextual_tips_enemies_missing_tip_wait_time": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2238
    },
    "dota_contextual_tips_gold_surplus_min": {
        "data_type": "float",
        "default_value": "400",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2223
    },
    "dota_contextual_tips_gold_surplus_rate": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2222
    },
    "dota_contextual_tips_highground_forward_amount": {
        "data_type": "float",
        "default_value": "400",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2221
    },
    "dota_contextual_tips_in_game_display_count_limit_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2220
    },
    "dota_contextual_tips_itemcast_health_percent": {
        "data_type": "int32",
        "default_value": "20",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2236
    },
    "dota_contextual_tips_itemcast_mana_percent": {
        "data_type": "int32",
        "default_value": "20",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2235
    },
    "dota_contextual_tips_itemcast_range": {
        "data_type": "float",
        "default_value": "300",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2234
    },
    "dota_contextual_tips_lifetime_display_count_limit_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2215
    },
    "dota_contextual_tips_powerrune_nearesthero_range": {
        "data_type": "float",
        "default_value": "2000",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2233
    },
    "dota_contextual_tips_powerrune_range": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2232
    },
    "dota_contextual_tips_powerrune_scan_duration": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2231
    },
    "dota_contextual_tips_scanenemy_herocountthreshold": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2228
    },
    "dota_contextual_tips_scanenemy_pollduration": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2227
    },
    "dota_contextual_tips_smokeofdeceit_waitinminutes": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2225
    },
    "dota_contextual_tips_time_restriction_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2219
    },
    "dota_continue_click_movement_after_cast_cancel": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3713
    },
    "dota_crate_treasure_use_alt_listview": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2933
    },
    "dota_creep_distance_interval": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1676
    },
    "dota_creep_stack_nearby_hero_radius": {
        "data_type": "int32",
        "default_value": "3000",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1465
    },
    "dota_creeps_no_spawning": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1466
    },
    "dota_custom_game_difficulty_mask": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Difficulties of the event game to matchmake for.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3013
    },
    "dota_custom_game_library_filter": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Custom game library filter type",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2931
    },
    "dota_custom_game_library_sort": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Custom game library sort type",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2932
    },
    "dota_custom_game_local_lobbies_max_ping": {
        "data_type": "uint32",
        "default_value": "150",
        "description": "Maximum ping for custom game overview.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3133
    },
    "dota_custom_game_overview_max_lobby_age_seconds": {
        "data_type": "uint32",
        "default_value": "1800",
        "description": "Maximum lobby age to be visible in overview.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3134
    },
    "dota_custom_games_enable_browse_tab": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2923
    },
    "dota_custom_games_exclude": {
        "data_type": "string",
        "default_value": "",
        "description": "Comma separated list of IDs to exclude from custom games overview page",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2924
    },
    "dota_custom_games_overview_sort_mode_mode": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Sort method used for the custom games overview page",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2925
    },
    "dota_damage_flash": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Flash when enemies take damage from the player",
        "flags": "game, archive",
        "flagsRaw": 132,
        "hasDefensiveFlag": false,
        "index": 1402
    },
    "dota_dashboard_enable_mouse_history": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enables Mouse4/Mouse5 to navigate dashboard history.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3055
    },
    "dota_dashboard_force_background": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3200
    },
    "dota_dashboard_launch_count": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3059
    },
    "dota_dawnbreaker_attack_combo_cooldown_time": {
        "data_type": "float",
        "default_value": "5",
        "description": "Adjust the amount of time the combo animation state persists after an attack starts. Set to -1 to disable attack combos entirely.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2179
    },
    "dota_dawnbreaker_attack_combo_step_time": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "We won't advance the combo state faster than this time, so stutter stepping doesn't advance the combo anim.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2180
    },
    "dota_daynightcycle_pause": {
        "data_type": "bool",
        "default_value": "false",
        "description": "0 = resume day/night cycle; 1 = pause day/night cycle; default = 0;",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2085
    },
    "dota_db_fake_ascention_unlock": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2823
    },
    "dota_db_fake_mmr_reset_time": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2876
    },
    "dota_dead_unit_delete_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1399
    },
    "dota_dead_unit_disappear_time": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1398
    },
    "dota_death_effect_particle_post": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1457
    },
    "dota_death_effect_particle_post_dissappear_time": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1458
    },
    "dota_death_effect_particle_pre": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1456
    },
    "dota_debug_change_cursor_during_pending_order": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3878
    },
    "dota_debug_cleave": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2035
    },
    "dota_debug_global_light": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3591
    },
    "dota_debug_lasthit_timing": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2033
    },
    "dota_debug_location_x": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1538
    },
    "dota_debug_location_y": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1539
    },
    "dota_debug_npc_controller_entity_index": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Entity index to report NPC Controller logging information for.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1644
    },
    "dota_debug_onstage_seats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3758
    },
    "dota_debug_so_cache": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Log SO cache messages",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3159
    },
    "dota_debug_steam_duration_control": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Log debug messages when interacting with Steam duration control API",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 3144
    },
    "dota_debug_stuck": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1554
    },
    "dota_debug_trophy_case": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Turn on to display all possible trophies instead of a user's trophies. Useful to debug visuals for new trophies.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2989
    },
    "dota_debut_movie_volume": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2848
    },
    "dota_default_gold": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1663
    },
    "dota_default_spoilers_blocked": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Avoid spoilers for league matches",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2748
    },
    "dota_defer_panorama_on_sim_ticks": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4045
    },
    "dota_dev_fake_weekend_tourney_free_weekend": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Force enable (=1) or disable (=0) all divisions to be marked as free.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2699
    },
    "dota_dev_fake_weekend_tourney_owns_champion_cup_ticket": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2698
    },
    "dota_dev_weekend_hub_status": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2697
    },
    "dota_director_record_combat_log": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1639
    },
    "dota_director_shoulder_view_chance": {
        "data_type": "int32",
        "default_value": "10",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1638
    },
    "dota_diretide_treasure_display_override_item_def": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2934
    },
    "dota_disable_acknowledged_item_auto_equip": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2397
    },
    "dota_disable_add_fractional_attack_time": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1561
    },
    "dota_disable_attack_regulator": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1408
    },
    "dota_disable_autoattack_during_stop": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3870
    },
    "dota_disable_bot_lane": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2247
    },
    "dota_disable_controller_support": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3876
    },
    "dota_disable_experimental_gameplay": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3012
    },
    "dota_disable_kill_streak_messages": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3125
    },
    "dota_disable_lan_lobby_broadcast": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Don't send UDP broadcast packets for LAN lobby discovery",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2767
    },
    "dota_disable_loading_patchnotes_resources": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, archive",
        "flagsRaw": 138,
        "hasDefensiveFlag": false,
        "index": 2779
    },
    "dota_disable_mid_lane": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2246
    },
    "dota_disable_particle_lights": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Disable the rendering of particle local lights.",
        "flags": "client, release",
        "flagsRaw": 524296,
        "hasDefensiveFlag": false,
        "index": 4039
    },
    "dota_disable_showcase_view_button": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Disable the Showcase View button unless sv_cheats is enabled.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3471
    },
    "dota_disable_top_lane": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2245
    },
    "dota_disable_tower_autoattacks": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1415
    },
    "dota_disable_unit_ring": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3815
    },
    "dota_dpc_favorite_teams_cache_duration": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2892
    },
    "dota_dpc_live_games_dpc_only": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Adjust whether the live dpc games query should instead show all live league games for debugging purposes.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2749
    },
    "dota_draft_trivia_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2893
    },
    "dota_draw_portrait": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3341
    },
    "dota_draw_simple_selection_box": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3358
    },
    "dota_drow_ranger_arcana_disable_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2557
    },
    "dota_drow_ranger_arcana_event_popup_cutoff": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2561
    },
    "dota_drow_ranger_arcana_event_popup_fade_in": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2560
    },
    "dota_drow_ranger_arcana_event_popup_force_on": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2562
    },
    "dota_drow_ranger_arcana_force_revenge_kills": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 2344
    },
    "dota_drow_ranger_arcana_progress_delay": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2559
    },
    "dota_drow_ranger_arcana_progress_linger_duration": {
        "data_type": "float",
        "default_value": "8",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2558
    },
    "dota_drow_ranger_arcana_slash_delay": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2563
    },
    "dota_drow_ranger_arcana_slash_interval": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2564
    },
    "dota_dump_keybindings": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3240
    },
    "dota_dynamic_weather_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3709
    },
    "dota_dynamic_weather_max_duration": {
        "data_type": "float",
        "default_value": "360",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3706
    },
    "dota_dynamic_weather_min_duration": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3707
    },
    "dota_dynamic_weather_override_intensity": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3710
    },
    "dota_dynamic_weather_scale_time": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3708
    },
    "dota_earthshaker_arcana_combo_collapse_duration": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2571
    },
    "dota_earthshaker_arcana_combo_damage_tick_interval": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2572
    },
    "dota_earthshaker_arcana_combo_linger_duration": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2568
    },
    "dota_earthshaker_arcana_combo_summary_delay": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2569
    },
    "dota_earthshaker_arcana_combo_summary_duration": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2570
    },
    "dota_earthshaker_arcana_combo_update_interval": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2566
    },
    "dota_earthshaker_arcana_disable_combo_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2565
    },
    "dota_earthshaker_arcana_min_combo_to_show": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2567
    },
    "dota_easybuy": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Everything is free, all shops are in range, and you can purchase for other heroes",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1405
    },
    "dota_echoslam_max_projectiles": {
        "data_type": "int32",
        "default_value": "75",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2345
    },
    "dota_econ_item_animation_speed": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "The animation speed of the full set tiles.",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 2640
    },
    "dota_econ_item_high_market_price_threshold": {
        "data_type": "int32",
        "default_value": "10000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 2639
    },
    "dota_econ_item_immortal_animation_speed": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "The animation speed of the immortal item tiles.",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 2641
    },
    "dota_econ_item_particle_sim_speed": {
        "data_type": "float",
        "default_value": "0.7",
        "description": "The simulation speed of particles in full set tiles.",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 2642
    },
    "dota_effective_creep_spawn_time": {
        "data_type": "float",
        "default_value": "0",
        "description": "If non-zero, the time the creep spawner uses for deciding what to spawn",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1467
    },
    "dota_enable_direct_quickcast_bindings": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enables ability to directly bind keys to quickcast.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3245
    },
    "dota_enable_dpc_team_custom_styles": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3211
    },
    "dota_enable_event_attack_fx": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1410
    },
    "dota_enable_illusion_recycling": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1443
    },
    "dota_enable_killstreak_fx": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1460
    },
    "dota_enable_new_player_shop": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enables simple shop mode",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2471
    },
    "dota_enable_panorama_hero_picking": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2442
    },
    "dota_enable_range_finder": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3339
    },
    "dota_enable_same_user_chat_wheel_pitch_increase": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3183
    },
    "dota_enable_spatial_audio": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Flag to enable spatial audio in Dota 2.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 787
    },
    "dota_endgame_cinematic_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2121
    },
    "dota_enemy_color": {
        "data_type": "RGB Color",
        "default_value": "255 0 0 255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4278
    },
    "dota_enemy_color_cb": {
        "data_type": "RGB Color",
        "default_value": "255 0 0 255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4279
    },
    "dota_english_hero_names": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use the original English (non-localized) hero names",
        "flags": "devonly, client, archive",
        "flagsRaw": 138,
        "hasDefensiveFlag": false,
        "index": 4334
    },
    "dota_entity_count_grace_threshold": {
        "data_type": "int32",
        "default_value": "128",
        "description": "Number of entities to reserve when we're getting close to the limit. Stops some entities from spawning.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2032
    },
    "dota_event_goal_update_delay": {
        "data_type": "float",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2803
    },
    "dota_event_stage": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2259
    },
    "dota_event_tips_cache_duration": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2804
    },
    "dota_event_tips_graph_minimum_nodes": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2643
    },
    "dota_experimental_enable_particles_named_values": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 33579020,
        "hasDefensiveFlag": false,
        "index": 2262
    },
    "dota_experimental_stats_interval": {
        "data_type": "int32",
        "default_value": "60",
        "description": "Seconds between each experimental stat update.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1604
    },
    "dota_externalwebapi_debug_leagueid": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set this to test the external web API as if the game were a specific league.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3239
    },
    "dota_faceless_void_arcana_disable_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2573
    },
    "dota_faceless_void_arcana_force_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2574
    },
    "dota_faceless_void_arcana_force_progress": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2577
    },
    "dota_faceless_void_arcana_progress_linger_duration": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2576
    },
    "dota_faceless_void_arcana_progress_time_between_points": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2575
    },
    "dota_fake_accept_deny_count": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2836
    },
    "dota_fake_accept_slots": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2879
    },
    "dota_fake_accept_state": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2835
    },
    "dota_fake_announcer_teamid": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2443
    },
    "dota_fake_battle_bonus": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3762
    },
    "dota_fake_battle_cup_live_game": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2995
    },
    "dota_fake_broadcaster_info_live": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3045
    },
    "dota_fake_broadcaster_info_server_steam_id": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3044
    },
    "dota_fake_broadcaster_info_upcoming_broadcast_timestamp": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3046
    },
    "dota_fake_event_wins": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3065
    },
    "dota_fake_event_wins_claimed": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3066
    },
    "dota_fake_front_page_cell_ti10_live": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Display fake data for the TI10 live game front page cell",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3037
    },
    "dota_fake_front_page_cell_top_game": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Creates fake game data for a top game on the front page cells. 0 = disabled, 1 = regular game, 2 = league game",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3040
    },
    "dota_fake_gc_connection_state": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3062
    },
    "dota_fake_gc_est_time": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3064
    },
    "dota_fake_gc_queue_pos": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3063
    },
    "dota_fake_gift_permissions": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2901
    },
    "dota_fake_guild_banner_replacement": {
        "data_type": "bool",
        "default_value": "false",
        "description": "whether or not to spawn guild banners in non-guild matches",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2257
    },
    "dota_fake_leaver_actions": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3003
    },
    "dota_fake_lobby_browser_data": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2765
    },
    "dota_fake_lobby_count": {
        "data_type": "int32",
        "default_value": "100",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2766
    },
    "dota_fake_mvp_vote": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2940
    },
    "dota_fake_no_match_metadata": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3363
    },
    "dota_fake_player_play_time": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3000
    },
    "dota_fake_reporter_updates": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2864
    },
    "dota_fake_role_handicap_hardsupport": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3143
    },
    "dota_fake_role_handicap_midlane": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3141
    },
    "dota_fake_role_handicap_offlane": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3140
    },
    "dota_fake_role_handicap_safelane": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3139
    },
    "dota_fake_role_handicap_support": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3142
    },
    "dota_fake_show_questionnaire": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": false,
        "index": 3146
    },
    "dota_fake_spectator_lobbies": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2815
    },
    "dota_fake_spectator_lobby_replay": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2816
    },
    "dota_fake_ti10_schedule": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Display fake data for the TI10 front page schedule",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2701
    },
    "dota_fake_ti10_schedule_time": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Display the TI10 front page schedule as if you were at provided time",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2702
    },
    "dota_fanfare_disable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2071
    },
    "dota_fantasy_craft_tutorial_state": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3088
    },
    "dota_fantasy_force_results_period": {
        "data_type": "uint32",
        "default_value": "4294967295",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3087
    },
    "dota_fantasy_league_region": {
        "data_type": "uint32",
        "default_value": "1",
        "description": "Set a valid league region.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3112
    },
    "dota_fantasy_popup_help_dpc": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3111
    },
    "dota_fantasy_popup_help_ti10": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3113
    },
    "dota_fantasy_spew_scoring": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4292
    },
    "dota_fantasy_stat_update_interval_s": {
        "data_type": "float",
        "default_value": "20",
        "description": "How often the server updates the GC with player fantasy stats",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1288
    },
    "dota_fantasy_test_league_id": {
        "data_type": "int32",
        "default_value": "1",
        "description": "When we are on main app, what fantasy league to use as a fallback.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1616
    },
    "dota_featured_game_mode_splash_time": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3017
    },
    "dota_fight_recap_button_stay_time": {
        "data_type": "float",
        "default_value": "35",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2580
    },
    "dota_fight_recap_force_show": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2578
    },
    "dota_fight_recap_terse": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2579
    },
    "dota_flip_home_team": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3765
    },
    "dota_fog_offset": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3594
    },
    "dota_force_acknowledged_item_auto_equip": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force auto-equip on all items acknowledged.",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2396
    },
    "dota_force_battle_cup_winner": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1998
    },
    "dota_force_bot_cycle": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set automatically by matchmaking to fill slots with bots",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2146
    },
    "dota_force_default_death_stinger": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3869
    },
    "dota_force_default_respawn_stinger": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3868
    },
    "dota_force_gamemode": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Force the game mode to a specific one. AP = 1, CM = 2, RD = 3, SD = 4. INTRO = 6. 7 = HW. 8 = REVERSE CM. 9 = XMAS",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2161
    },
    "dota_force_minigame": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2016
    },
    "dota_force_neutral_drop_tier": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, replicated, cheat",
        "flagsRaw": 24580,
        "hasDefensiveFlag": false,
        "index": 1442
    },
    "dota_force_pick_allow": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2244
    },
    "dota_force_plus": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1680
    },
    "dota_force_preview_itemdef": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2938
    },
    "dota_force_right_click_attack": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3721
    },
    "dota_force_rune": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Always spawn the same rune.",
        "flags": "game, replicated, cheat",
        "flagsRaw": 24580,
        "hasDefensiveFlag": false,
        "index": 1643
    },
    "dota_force_server_play": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force games to play on dedicated servers.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2831
    },
    "dota_force_show_contextual_tips": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, archive, replicated",
        "flagsRaw": 8330,
        "hasDefensiveFlag": false,
        "index": 2556
    },
    "dota_force_steamlearn_snapshots": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2031
    },
    "dota_force_tp_quality": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1679
    },
    "dota_force_tp_team": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1678
    },
    "dota_force_upload_match_stats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, server will upload match stats even when there aren't human players on each side",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1471
    },
    "dota_fountain_idle_minimum_time": {
        "data_type": "float",
        "default_value": "0",
        "description": "How long into the game we need to be before we boot players for being intentionally Idle.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2142
    },
    "dota_fountain_protection": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, hidden, cheat",
        "flagsRaw": 16404,
        "hasDefensiveFlag": false,
        "index": 1440
    },
    "dota_fow_circle_test": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1091
    },
    "dota_fow_grid_size": {
        "data_type": "int32",
        "default_value": "64",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2125
    },
    "dota_fow_is_disabled": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1625
    },
    "dota_friendly_color": {
        "data_type": "RGB Color",
        "default_value": "0 255 0 255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4276
    },
    "dota_friendly_color_cb": {
        "data_type": "RGB Color",
        "default_value": "33 161 255 255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4277
    },
    "dota_friends_favorites_expanded": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If true expands favorites sub nav, if false minimizes it.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3214
    },
    "dota_friends_friends_playing_expanded": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If true expands friends playing dota sub nav, if false minimizes it.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3215
    },
    "dota_friends_guild_members_expanded": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If true expands guild members sub nav, if false minimizes it.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3022
    },
    "dota_friends_offline_expanded": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If true expands friends online sub nav, if false minimizes it.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3025
    },
    "dota_friends_online_expanded": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If true expands friends online sub nav, if false minimizes it.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3024
    },
    "dota_friends_open_party_expanded": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If true expands open party sub nav, if false minimizes it.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3213
    },
    "dota_friends_pending_expanded": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If true expands friends pending sub nav, if false minimizes it.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3023
    },
    "dota_frontpage_dpc_live_update_interval": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3028
    },
    "dota_frontpage_ti10_live_update_interval": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3036
    },
    "dota_frontpage_ti10_replay_update_interval": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3038
    },
    "dota_frontpage_ti10_upcoming_update_interval": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3039
    },
    "dota_game_end_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Simulate game end panel rewards",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3753
    },
    "dota_game_end_fake_battkle_cup_grand_finals": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2589
    },
    "dota_game_end_match_details_delayed_time": {
        "data_type": "float",
        "default_value": "4",
        "description": "After showing game end message, if server hasn't told us it signed out with the GC, then turn on warning text",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2586
    },
    "dota_game_end_match_details_time_out": {
        "data_type": "float",
        "default_value": "10",
        "description": "Max time client waits for server to let it know that it has signed out with GC.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2587
    },
    "dota_game_end_match_details_time_out_weekend_tourney": {
        "data_type": "float",
        "default_value": "60",
        "description": "Max time client waits for server to let it know that it has signed out with GC, in weekend tourney match",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2588
    },
    "dota_gamemode_ability_draft_new_patch_flag": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Shows pip if you haven't seen AD patch note, compares to k_nADPatchVersion",
        "flags": "client, hidden, archive",
        "flagsRaw": 152,
        "hasDefensiveFlag": false,
        "index": 2709
    },
    "dota_gamemode_ability_draft_per_player_time": {
        "data_type": "float",
        "default_value": "7",
        "description": "Total time in seconds a player has to draft an ability",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2114
    },
    "dota_gamemode_ability_draft_pre_round_time": {
        "data_type": "float",
        "default_value": "5",
        "description": "Break between rounds",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2115
    },
    "dota_gamemode_ability_draft_pre_time": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2111
    },
    "dota_gamemode_ardm_hero_count": {
        "data_type": "int32",
        "default_value": "90",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2089
    },
    "dota_gamemode_ardm_sellback_percent": {
        "data_type": "float",
        "default_value": "0.85",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2113
    },
    "dota_gg_call_time": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 2069
    },
    "dota_gift_permissions_cache_duration": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2899
    },
    "dota_gift_permissions_request_timeout": {
        "data_type": "int32",
        "default_value": "60",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2900
    },
    "dota_global_hero_stats_cache_duration": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2818
    },
    "dota_global_item_shuffle_enabled_slots": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2399
    },
    "dota_global_item_shuffle_enabled_slots_upconverted": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2400
    },
    "dota_gold_redistribute_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1989
    },
    "dota_graph_player_items_inset": {
        "data_type": "int32",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2954
    },
    "dota_graph_player_items_min_quality": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2955
    },
    "dota_graph_player_items_right_margin": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2957
    },
    "dota_graph_player_items_show_consumables": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2956
    },
    "dota_greevil_black_essence": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2030
    },
    "dota_greevil_blue_essence": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2025
    },
    "dota_greevil_green_essence": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2026
    },
    "dota_greevil_orange_essence": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2028
    },
    "dota_greevil_purple_essence": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2024
    },
    "dota_greevil_red_essence": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2023
    },
    "dota_greevil_white_essence": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2029
    },
    "dota_greevil_yellow_essence": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2027
    },
    "dota_gridnav_direction_cost": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1632
    },
    "dota_gridnav_disable_sectors": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1633
    },
    "dota_gridnav_show": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1626
    },
    "dota_gridnav_show_size": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Control the size of the gridnav display. 1 = small, 2 = medium, 3 = large",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1627
    },
    "dota_grinder_snap_to_damage": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3823
    },
    "dota_guide_enable_publish_all": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable publish all feature for guides",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2936
    },
    "dota_guide_prioritize_recent": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2644
    },
    "dota_guild_banner_disable_cache": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3599
    },
    "dota_guild_banner_force_tier": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1634
    },
    "dota_guild_banner_replacement_radius": {
        "data_type": "float",
        "default_value": "0",
        "description": "how far from the fountain to replace banners with guild ones ( < 0: disable, == 0: all)",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2258
    },
    "dota_guild_challenge_debug": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Debug for guild challenges",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1635
    },
    "dota_guild_challenge_override": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Set to override challenge states",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2905
    },
    "dota_guild_contract_slot_override_state": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Set to override contract slot states",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2904
    },
    "dota_guild_details_force_show_chat_type": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2935
    },
    "dota_guild_fake_feed_events": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set to 1 to fake feed events",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2911
    },
    "dota_guild_fake_local_guild_level": {
        "data_type": "float",
        "default_value": "0",
        "description": "Set to desired guild level for local UI testing. Decimals supported for partial levels.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2903
    },
    "dota_guild_fake_primary_color_on_client": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "0-9, Set on client to fake the primary guild color for UI testing",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2920
    },
    "dota_guild_ignore_invites": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2918
    },
    "dota_guild_ignore_nonfriend_invites": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, guild invites from non-friends are automatically rejected",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2917
    },
    "dota_guild_persona_batch_interval": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2915
    },
    "dota_guild_persona_use_webapi": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2916
    },
    "dota_guild_timestamp_override": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set to override challenge and contract timestamp, !=0 time offset from now, 0 = off",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2906
    },
    "dota_guilds_guild_tier_fake_data_current_week_percentile_offset": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2910
    },
    "dota_guilds_guild_tier_fake_data_last_week_percentile": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2909
    },
    "dota_guilds_leaderboard_fake_claim_available": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2908
    },
    "dota_guilds_leaderboard_fake_data": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2907
    },
    "dota_hack_delay_start": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1996
    },
    "dota_health_bar_pips": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3413
    },
    "dota_health_bar_shields": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3414
    },
    "dota_health_bar_threat_height": {
        "data_type": "float",
        "default_value": "32",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3407
    },
    "dota_health_bar_threat_icons": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3408
    },
    "dota_health_bar_threat_icons_force_value": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3409
    },
    "dota_health_bar_threat_width": {
        "data_type": "float",
        "default_value": "32",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3406
    },
    "dota_health_bar_threat_y_offset": {
        "data_type": "float",
        "default_value": "16",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3405
    },
    "dota_health_bar_threat_y_offset_local_user": {
        "data_type": "float",
        "default_value": "22.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3404
    },
    "dota_health_high_marker_major_alpha": {
        "data_type": "int32",
        "default_value": "128",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3421
    },
    "dota_health_high_marker_minor_alpha": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3422
    },
    "dota_health_high_threshold": {
        "data_type": "int32",
        "default_value": "15000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3420
    },
    "dota_health_hurt_decay_time_max": {
        "data_type": "float",
        "default_value": "0.8",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3828
    },
    "dota_health_hurt_decay_time_min": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3827
    },
    "dota_health_hurt_delay": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3829
    },
    "dota_health_hurt_threshold": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3830
    },
    "dota_health_marker_major_alpha": {
        "data_type": "int32",
        "default_value": "225",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3418
    },
    "dota_health_marker_minor_alpha": {
        "data_type": "int32",
        "default_value": "96",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3419
    },
    "dota_health_per_vertical_marker": {
        "data_type": "float",
        "default_value": "250",
        "description": "How much health between each vertical line in the health bars",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3416
    },
    "dota_height_fog_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3597
    },
    "dota_help_tips_active_per_category": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2723
    },
    "dota_help_tips_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2921
    },
    "dota_hero_auto_graball": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3838
    },
    "dota_hero_demo_default_enemy": {
        "data_type": "string",
        "default_value": "npc_dota_hero_axe",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 1073741960,
        "hasDefensiveFlag": false,
        "index": 4269
    },
    "dota_hero_demo_spawn_creeps_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 1073741960,
        "hasDefensiveFlag": false,
        "index": 4267
    },
    "dota_hero_demo_towers_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 1073741960,
        "hasDefensiveFlag": false,
        "index": 4268
    },
    "dota_hero_god_mode": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1437
    },
    "dota_hero_grid_role_threshold_percent": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2726
    },
    "dota_hero_indicators_hide_distance": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2591
    },
    "dota_hero_indicators_max_distance": {
        "data_type": "float",
        "default_value": "4000",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2592
    },
    "dota_hero_indicators_max_radius": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2594
    },
    "dota_hero_indicators_min_radius": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2593
    },
    "dota_hero_muerta_dead_shot_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show debugging info for Muerta's dead_shot.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2185
    },
    "dota_hero_muerta_dead_shot_tolerance": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "Tolerance for the Dead Shot ignoring the user's vector target and just shooting straight.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2181
    },
    "dota_hero_muerta_double_shot_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show debugging info for Muerta's double shot aiming.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2182
    },
    "dota_hero_muerta_double_shot_debug_offset": {
        "data_type": "float",
        "default_value": "100",
        "description": "Vertical offset for Muerta's double shot debug render.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2183
    },
    "dota_hero_muerta_double_shot_debug_sphere_size": {
        "data_type": "float",
        "default_value": "20",
        "description": "Sphere size for Muerta's double shot debug render.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2184
    },
    "dota_hero_multiple_kill_time": {
        "data_type": "float",
        "default_value": "18",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1436
    },
    "dota_hero_overhead_names": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3423
    },
    "dota_hero_relic_debug_visuals": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2646
    },
    "dota_hero_selection_announcer_use_rr": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If enabled, use response rules for hero selection announcer lines",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2444
    },
    "dota_hero_selection_time": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2165
    },
    "dota_hero_undying_max_zombies": {
        "data_type": "int32",
        "default_value": "64",
        "description": "Maximum amount of zombies that can be spawned.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2187
    },
    "dota_heropickdebug_localplayer_id": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3972
    },
    "dota_heropicker_ad_select_time": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2107
    },
    "dota_heropicker_alldraft_banning_time": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2099
    },
    "dota_heropicker_alldraft_random_time": {
        "data_type": "float",
        "default_value": "11",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2101
    },
    "dota_heropicker_alldraft_select_time": {
        "data_type": "float",
        "default_value": "21",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2100
    },
    "dota_heropicker_ap_select_time": {
        "data_type": "float",
        "default_value": "75",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2102
    },
    "dota_heropicker_ar_select_time": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2106
    },
    "dota_heropicker_ardm_select_time": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2108
    },
    "dota_heropicker_fh_select_time": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2109
    },
    "dota_heropicker_sd_select_time": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2105
    },
    "dota_heropicker_select_penalty_cost": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2104
    },
    "dota_heropicker_select_penalty_time": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2103
    },
    "dota_heropicker_tutorial_select_time": {
        "data_type": "float",
        "default_value": "599",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2110
    },
    "dota_hide_cursor": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, mouse cursor is always hidden",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3857
    },
    "dota_hide_frontpage_video": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Don't load the frontpage streaming video.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3043
    },
    "dota_hide_spectator_player_names": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3424
    },
    "dota_hide_tips_on_loading_screens": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2764
    },
    "dota_hide_wearables": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, wearables (default body parts) will be hidden. This is for the item icon editor.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1327
    },
    "dota_highest_seen_item_id": {
        "data_type": "uint64",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2894
    },
    "dota_highlight_reel": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3321
    },
    "dota_highlight_reel_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3337
    },
    "dota_highlight_reel_leadin_seconds": {
        "data_type": "float",
        "default_value": "13",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3325
    },
    "dota_highlight_reel_leadout_seconds": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3326
    },
    "dota_highlight_reel_matchid": {
        "data_type": "uint64",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3322
    },
    "dota_highlight_reel_playerid": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3323
    },
    "dota_highlight_reel_running_time": {
        "data_type": "float",
        "default_value": "180",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3324
    },
    "dota_hltv_camera_override_pos": {
        "data_type": "Vector2",
        "default_value": "0 0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3334
    },
    "dota_hltv_camera_use_override_pos": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3333
    },
    "dota_hud_chat_enable_all_emoticons": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3138
    },
    "dota_hud_chat_fade_time": {
        "data_type": "float",
        "default_value": "7",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3204
    },
    "dota_hud_chat_history_lines": {
        "data_type": "int32",
        "default_value": "15",
        "description": "Number of history lines to save for in-game chat.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3207
    },
    "dota_hud_chat_wheel": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2712
    },
    "dota_hud_colorblind": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Which color mode to use for HUD elements (name is legacy)",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3428
    },
    "dota_hud_combine_move_speed": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Combine base and bonus move speed numbers on the HUD",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2504
    },
    "dota_hud_contextual_tips_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Disable in-game contextual tips",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4333
    },
    "dota_hud_custom_css_class": {
        "data_type": "string",
        "default_value": "",
        "description": "Add a custom class to the root of the HUD for testing purposes.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 2735
    },
    "dota_hud_custom_label_offset": {
        "data_type": "float",
        "default_value": "16",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3433
    },
    "dota_hud_debug_name_all_entities": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, shows debug names for all entities.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3426
    },
    "dota_hud_debug_test_aegis": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Enable to test the Aegis UI.",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3439
    },
    "dota_hud_debug_test_hero_badge_tier": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Test the badge tier on the healthbar.",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3441
    },
    "dota_hud_disable_damage_numbers": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Hide the incoming and outgoing damage numbers.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3438
    },
    "dota_hud_extra_large_minimap": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set minimap to extra large size",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2731
    },
    "dota_hud_flip": {
        "data_type": "bool",
        "default_value": "true",
        "description": "No longer used.  Use dota_minimap_position_option instead.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3640
    },
    "dota_hud_force_killcam": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2598
    },
    "dota_hud_force_query": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Left clicking a unit will force query selection to that unit.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3814
    },
    "dota_hud_force_rank_wagering": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 2745
    },
    "dota_hud_force_wagering": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 2744
    },
    "dota_hud_gameend": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2585
    },
    "dota_hud_gameend_dev": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2583
    },
    "dota_hud_gameend_dev_winning_team": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2584
    },
    "dota_hud_healthbar_disable_status_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Hide the overhead status text for hero status effects.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3437
    },
    "dota_hud_healthbar_experimental_local_color_white": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3468
    },
    "dota_hud_healthbar_hoveroutline_alpha": {
        "data_type": "int32",
        "default_value": "200",
        "description": "Mouse hover outline brightness on healthbars",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3425
    },
    "dota_hud_healthbar_local_flat_color": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3467
    },
    "dota_hud_healthbars": {
        "data_type": "int32",
        "default_value": "3",
        "description": "Show unit health bars, etc.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3415
    },
    "dota_hud_hide_mainhud": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4271
    },
    "dota_hud_hide_minimap": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4272
    },
    "dota_hud_hide_overlaymap": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4273
    },
    "dota_hud_hide_topbar": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4270
    },
    "dota_hud_ingame_predictions_hide": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2595
    },
    "dota_hud_killcam_delay": {
        "data_type": "float",
        "default_value": "1.3",
        "description": "",
        "flags": "client, hidden, cheat",
        "flagsRaw": 16408,
        "hasDefensiveFlag": false,
        "index": 2599
    },
    "dota_hud_ministun_duration": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "Stuns lower than this will add UnitMiniStunned class to the HUD",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2736
    },
    "dota_hud_netgraph": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Display net statistics on the hud",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2739
    },
    "dota_hud_new_healthbar_ally_b": {
        "data_type": "int32",
        "default_value": "48",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3453
    },
    "dota_hud_new_healthbar_ally_cb_b": {
        "data_type": "int32",
        "default_value": "255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3456
    },
    "dota_hud_new_healthbar_ally_cb_g": {
        "data_type": "int32",
        "default_value": "205",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3455
    },
    "dota_hud_new_healthbar_ally_cb_r": {
        "data_type": "int32",
        "default_value": "107",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3454
    },
    "dota_hud_new_healthbar_ally_g": {
        "data_type": "int32",
        "default_value": "80",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3452
    },
    "dota_hud_new_healthbar_ally_r": {
        "data_type": "int32",
        "default_value": "48",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3451
    },
    "dota_hud_new_healthbar_enemy_b": {
        "data_type": "int32",
        "default_value": "48",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3459
    },
    "dota_hud_new_healthbar_enemy_g": {
        "data_type": "int32",
        "default_value": "48",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3458
    },
    "dota_hud_new_healthbar_enemy_r": {
        "data_type": "int32",
        "default_value": "96",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3457
    },
    "dota_hud_new_healthbar_level_bot_brightness": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3445
    },
    "dota_hud_new_healthbar_level_local_bot_brightness": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3447
    },
    "dota_hud_new_healthbar_level_local_top_brightness": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3446
    },
    "dota_hud_new_healthbar_level_top_brightness": {
        "data_type": "float",
        "default_value": "0.9",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3444
    },
    "dota_hud_new_healthbar_local_b": {
        "data_type": "int32",
        "default_value": "64",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3450
    },
    "dota_hud_new_healthbar_local_g": {
        "data_type": "int32",
        "default_value": "128",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3449
    },
    "dota_hud_new_healthbar_local_level_text_base_color_b": {
        "data_type": "int32",
        "default_value": "255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3465
    },
    "dota_hud_new_healthbar_local_level_text_base_color_g": {
        "data_type": "int32",
        "default_value": "255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3464
    },
    "dota_hud_new_healthbar_local_level_text_base_color_r": {
        "data_type": "int32",
        "default_value": "255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3463
    },
    "dota_hud_new_healthbar_local_level_text_shadow_color_b": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3462
    },
    "dota_hud_new_healthbar_local_level_text_shadow_color_g": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3461
    },
    "dota_hud_new_healthbar_local_level_text_shadow_color_r": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3460
    },
    "dota_hud_new_healthbar_local_r": {
        "data_type": "int32",
        "default_value": "64",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3448
    },
    "dota_hud_new_healthbar_sort": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3466
    },
    "dota_hud_new_healthbar_streak_size": {
        "data_type": "float",
        "default_value": "9",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3469
    },
    "dota_hud_new_healthbar_text_bot_saturation": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3443
    },
    "dota_hud_new_healthbar_text_top_saturation": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3442
    },
    "dota_hud_new_query_panel": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable new query panel",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2730
    },
    "dota_hud_panorama_healthbars_hide": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2590
    },
    "dota_hud_popup_battlecup_fade_delay": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2687
    },
    "dota_hud_portrait_force_alive": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2441
    },
    "dota_hud_portrait_inset_bottom": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2440
    },
    "dota_hud_portrait_inset_left": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2437
    },
    "dota_hud_portrait_inset_right": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2438
    },
    "dota_hud_portrait_inset_top": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2439
    },
    "dota_hud_portrait_killer_inset_bottom": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2743
    },
    "dota_hud_portrait_killer_inset_left": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2740
    },
    "dota_hud_portrait_killer_inset_right": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2741
    },
    "dota_hud_portrait_killer_inset_top": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2742
    },
    "dota_hud_projection_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2450
    },
    "dota_hud_query_timeout": {
        "data_type": "float",
        "default_value": "8",
        "description": "Duration before query times out",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2455
    },
    "dota_hud_queued_orders_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set, show shift-queued orders in the HUD.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2458
    },
    "dota_hud_queued_orders_max_orders": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2457
    },
    "dota_hud_queued_orders_timeout": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2456
    },
    "dota_hud_reduced_flash": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Reduce flashing in various gameplay effects.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3598
    },
    "dota_hud_replay_scrubber_update_msecs": {
        "data_type": "int32",
        "default_value": "200",
        "description": "replay scrubber thumb max update rate, msec",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2465
    },
    "dota_hud_show_creep_spawn_camp_names": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2610
    },
    "dota_hud_show_crosshair_hero_tooltip": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show/Hide the tooltip box that appears when you hover another hero.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3470
    },
    "dota_hud_show_minimal_shop": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2479
    },
    "dota_hud_show_overhead_events": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show Crit, Gold, XP, etc. Overhead Event Messages",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3427
    },
    "dota_hud_skins_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable HUD skins on the panorama HUD",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2732
    },
    "dota_hud_team_icon_y_offset": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Y offset for the hero icon",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3440
    },
    "dota_hud_unit_info": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show health bars when the game or camera mode would ordinarily hide them.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3436
    },
    "dota_hud_use_mmr_token": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1677
    },
    "dota_hud_victory_message_delay": {
        "data_type": "float",
        "default_value": "2",
        "description": "Delay before showing victory message in game end",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2581
    },
    "dota_hud_victory_message_duration": {
        "data_type": "float",
        "default_value": "4",
        "description": "Duration victory message is shown in game end",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2582
    },
    "dota_hud_voicechat_fake": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Set to 0, 1, or 2 to show fake voice chat panels",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2385
    },
    "dota_hud_voicechat_loud_value": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2384
    },
    "dota_hud_wagering_ignore_lobby_type": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2746
    },
    "dota_hud_wagering_pretend_ranked_and_calibrated": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2747
    },
    "dota_ice_grip": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2191
    },
    "dota_ice_grip_skates": {
        "data_type": "float",
        "default_value": "2000",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2192
    },
    "dota_ice_slide": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2193
    },
    "dota_idle_acquire": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1391
    },
    "dota_idle_neutral_think_always": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1396
    },
    "dota_idle_rare_interval_max": {
        "data_type": "float",
        "default_value": "25",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1393
    },
    "dota_idle_rare_interval_min": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1392
    },
    "dota_idle_rare_tower_scale": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3826
    },
    "dota_idle_time": {
        "data_type": "float",
        "default_value": "300",
        "description": "How long a player needs to be idle before he counts as disconnected.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2140
    },
    "dota_idle_time_buffer": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1666
    },
    "dota_ignore_invites": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, guild invites and team invites will be automatically rejected",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2919
    },
    "dota_ignore_nonfriend_invites": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, party and lobby invites from non-friends are ignored",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2775
    },
    "dota_inhibit_query_after_cast": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3704
    },
    "dota_international2019_force_teaser": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 3076
    },
    "dota_international2019_hide_intro_page": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, hidden, archive",
        "flagsRaw": 152,
        "hasDefensiveFlag": false,
        "index": 3075
    },
    "dota_international2023_rewards_level_animation_duration_max_change": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3098
    },
    "dota_international2023_rewards_level_animation_duration_max_seconds": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3096
    },
    "dota_international2023_rewards_level_animation_duration_min_change": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3097
    },
    "dota_international2023_rewards_level_animation_duration_min_seconds": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3095
    },
    "dota_intro_movie_completed": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3067
    },
    "dota_inventory_combine_ground_items_radius": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2021
    },
    "dota_inventory_neutral_item_teleport_throw": {
        "data_type": "float",
        "default_value": "150",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2020
    },
    "dota_item_free_buyback_end_time": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1642
    },
    "dota_item_free_disassemble_interval": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1641
    },
    "dota_item_fullprice_buyback_interval": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1640
    },
    "dota_item_suggestion_time": {
        "data_type": "float",
        "default_value": "30",
        "description": "Window for item suggestions.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2256
    },
    "dota_join_new_player_chat_channel": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, will automatically join the New Player chat channel for your language on startup.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3127
    },
    "dota_join_regional_chat_channel": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, will automatically join a chat channel for your region on startup.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3126
    },
    "dota_joy_axis_deadzone": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3722
    },
    "dota_joy_camera_drag_self": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3729
    },
    "dota_joy_camera_lock_tether_distance": {
        "data_type": "float",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3732
    },
    "dota_joy_camera_nudge_towards_facing": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3731
    },
    "dota_joy_camera_pan_acceleration": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3728
    },
    "dota_joy_camera_pan_nudge_speed": {
        "data_type": "float",
        "default_value": "2000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3726
    },
    "dota_joy_camera_pan_speed": {
        "data_type": "float",
        "default_value": "4000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3727
    },
    "dota_joy_camera_recenter_on_idle_camera_time": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3735
    },
    "dota_joy_camera_recenter_on_teleport_max_threshold": {
        "data_type": "float",
        "default_value": "1200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3734
    },
    "dota_joy_camera_recenter_on_teleport_min_threshold": {
        "data_type": "float",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3733
    },
    "dota_joy_camera_undock_distance": {
        "data_type": "float",
        "default_value": "2000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3730
    },
    "dota_joy_cast_target_fuzzy_range_tree": {
        "data_type": "float",
        "default_value": "900",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3740
    },
    "dota_joy_cursor_drag_enemy": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3738
    },
    "dota_joy_cursor_drag_friendly": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3737
    },
    "dota_joy_cursor_drag_ui": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3739
    },
    "dota_joy_cursor_speed": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3736
    },
    "dota_joy_direct_move_order_distance": {
        "data_type": "float",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3741
    },
    "dota_joy_direct_move_order_relative": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3742
    },
    "dota_joy_direct_target_advance_time": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3748
    },
    "dota_joy_direct_target_angle_threshold": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3744
    },
    "dota_joy_direct_target_max_distance": {
        "data_type": "float",
        "default_value": "1800",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3743
    },
    "dota_joy_direct_target_threshold": {
        "data_type": "float",
        "default_value": "0.75",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3747
    },
    "dota_joy_disable_mode_switch": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3749
    },
    "dota_joy_display_sampled_input": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3751
    },
    "dota_joy_doubletap_cast_time": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3746
    },
    "dota_joy_dpad_auto_repeat_delay": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3750
    },
    "dota_joy_enable_vibration": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3752
    },
    "dota_joy_inner_radial_deadzone": {
        "data_type": "float",
        "default_value": "0.05",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3723
    },
    "dota_joy_nav_edge_epsilon": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2738
    },
    "dota_joy_outer_radial_deadzone": {
        "data_type": "float",
        "default_value": "0.95",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3724
    },
    "dota_joy_pow": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3725
    },
    "dota_joy_undocked_target_max_distance": {
        "data_type": "float",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3745
    },
    "dota_keybindings_cloud_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3241
    },
    "dota_kill_effect_particle": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1459
    },
    "dota_kill_streak_expire_time": {
        "data_type": "float",
        "default_value": "6",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 2605
    },
    "dota_killcam_history_time": {
        "data_type": "int32",
        "default_value": "20",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2243
    },
    "dota_killgraph_damage_block_height": {
        "data_type": "float",
        "default_value": "0.75",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2602
    },
    "dota_killgraph_damage_block_width": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2601
    },
    "dota_killgraph_graph_accent_width": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2604
    },
    "dota_killgraph_graph_desaturate": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2603
    },
    "dota_killgraph_graph_width": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2600
    },
    "dota_lag_compensate_tracking_projectiles": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Advance tracking projectiles when their spawn is known to have been delayed by lag or packet loss.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3789
    },
    "dota_lag_compensation_test": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1661
    },
    "dota_lag_compensation_window": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1660
    },
    "dota_lan_lobby_port": {
        "data_type": "int32",
        "default_value": "27005",
        "description": "Port to use for LAN lobby broadcast.  (Used for both sending and receiving.)",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2768
    },
    "dota_lane_detection_distance": {
        "data_type": "float",
        "default_value": "1200",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1673
    },
    "dota_lane_detection_duration": {
        "data_type": "float",
        "default_value": "600",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1674
    },
    "dota_lane_detection_interval": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1675
    },
    "dota_lane_selection_hard_support": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3007
    },
    "dota_lane_selection_midlane": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3010
    },
    "dota_lane_selection_offlane": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3008
    },
    "dota_lane_selection_safelane": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3009
    },
    "dota_lane_selection_soft_support": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3006
    },
    "dota_last_acknowledged_plus_status": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2865
    },
    "dota_last_event_id": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3394
    },
    "dota_last_hit_multiple_kill_time": {
        "data_type": "float",
        "default_value": "8",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1435
    },
    "dota_last_primary_event_id": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2808
    },
    "dota_league_cm_strategy_time": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2167
    },
    "dota_league_force_public": {
        "data_type": "string",
        "default_value": "15438, 15475, 15689, 15690, 15691, 15692, 15693, 15694, 15728",
        "description": "A comma separated list of league ids to force public usage",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2762
    },
    "dota_league_info_batch_interval_s": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2751
    },
    "dota_league_postgame_time": {
        "data_type": "float",
        "default_value": "3600",
        "description": "How long to wait after in state disconnect for league games, so DVR delayed folks can keep watching.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1978
    },
    "dota_leftclick_cameragrip_new": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enables mode which requires left-click to start camera motion in addition to the camera grip keybind.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3573
    },
    "dota_legacy_demo_combine": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client, replicated",
        "flagsRaw": 8202,
        "hasDefensiveFlag": true,
        "index": 3834
    },
    "dota_lenient_idle_time": {
        "data_type": "float",
        "default_value": "480",
        "description": "How long a player needs to be idle before he counts as disconnected during the end stages of the game.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2141
    },
    "dota_letterbox_mode_fade_duration": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3338
    },
    "dota_lightning_fixed_angle": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3593
    },
    "dota_lightning_lerp_exponent": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3592
    },
    "dota_loading_screen_battle_cup_dev": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2763
    },
    "dota_loadout_camera_pan_speed": {
        "data_type": "float",
        "default_value": "1",
        "description": "How long it takes for camera to pan in the loadout",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2937
    },
    "dota_loadout_test_pet_offset": {
        "data_type": "Vector3",
        "default_value": "0 0 0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 2785
    },
    "dota_loadout_wearable_transition_effect": {
        "data_type": "string",
        "default_value": "dither",
        "description": "Transition effect when previewing wearables.  dissolve / dither",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2647
    },
    "dota_lobby_browser_selected_gamemode": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3050
    },
    "dota_lobby_browser_selected_region": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3049
    },
    "dota_lobby_settings_advanced_visible": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2851
    },
    "dota_local_bot_match_difficulty": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Difficulty to play local bot matches against",
        "flags": "game, client, archive, replicated",
        "flagsRaw": 8332,
        "hasDefensiveFlag": false,
        "index": 2017
    },
    "dota_local_bot_match_script_index": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2998
    },
    "dota_local_map_strategy_time": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1991
    },
    "dota_lotus_respawn_time": {
        "data_type": "int32",
        "default_value": "180",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2189
    },
    "dota_lotuses_available": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2190
    },
    "dota_mana_per_vertical_marker": {
        "data_type": "float",
        "default_value": "250",
        "description": "How much mana between each vertical line in the mana bars",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3417
    },
    "dota_map_lines_max_allowance": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1658
    },
    "dota_map_lines_max_allowance_period_seconds": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1659
    },
    "dota_map_ping_multi_key_press": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If true, we can ping the map even if we have multiple keys pressed on the keyboard. Otherwise map pinging will only occur if alt is the only key pressed.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3340
    },
    "dota_map_stats_cache_duration_seconds": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3359
    },
    "dota_map_stats_fake_stats_delta": {
        "data_type": "int32",
        "default_value": "36000",
        "description": "Delta between fake stat snapshots",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3361
    },
    "dota_map_stats_tracking_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable map stats tracking on the client",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3362
    },
    "dota_map_stats_use_fake_stats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use fake map stats",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3360
    },
    "dota_market_main_uses_public_pricing": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Always use public market pricing for Main Branch builds, even in other Steam universes",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2770
    },
    "dota_match_game_modes": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Bit masks of game modes to search for in unranked matchmaking",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3153
    },
    "dota_match_languages": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Bit masks of languages to search for in matchmaking",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3155
    },
    "dota_match_signout_timeout": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2088
    },
    "dota_match_solo_fast_queue": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Search for solo queue competitive games for ranked roles.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3004
    },
    "dota_match_steam_group_account_id": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Steam Group to use when searching for matchmaking",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3157
    },
    "dota_match_type": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Override for the match type that you're searching for.",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 3156
    },
    "dota_matchgroups_automatic": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Bit mask of match groups to search in for matchmaking if automatic detection is enabled",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3151
    },
    "dota_matchgroups_new": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Bit masks of match groups to search in for matchmaking",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3150
    },
    "dota_matchgroups_random_data": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2853
    },
    "dota_matchgroups_version": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Last known match groups version.  GC will bump this version to trigger confirmation of any manual user selections",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3152
    },
    "dota_max_courier_purchase_limit": {
        "data_type": "int32",
        "default_value": "24",
        "description": "Maximum allowed couriers per player (purchasing disallowed when reached)",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1404
    },
    "dota_max_disconnected_time": {
        "data_type": "int32",
        "default_value": "300",
        "description": "How long a player needs to be disconnected before he counts as a leaver and gets punished.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2144
    },
    "dota_max_haste": {
        "data_type": "float",
        "default_value": "7",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2207
    },
    "dota_max_hero_select_time": {
        "data_type": "int32",
        "default_value": "390",
        "description": "How long a player has to choose their hero before being marked as AFK.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2145
    },
    "dota_max_pets": {
        "data_type": "int32",
        "default_value": "10",
        "description": "Number of pets allowed in a single match.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2239
    },
    "dota_max_physical_items_drop_limit": {
        "data_type": "int32",
        "default_value": "6",
        "description": "Maximum allowed physical items on ground per player for split items (tango/wards)",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2019
    },
    "dota_max_physical_items_purchase_limit": {
        "data_type": "int32",
        "default_value": "24",
        "description": "Maximum allowed physical items per player (purchasing disallowed when reached)",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1403
    },
    "dota_max_videomode_matches": {
        "data_type": "int32",
        "default_value": "20",
        "description": "Max number of video resolutions to show in UI.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2875
    },
    "dota_metadata_min_games_for_avg_stats": {
        "data_type": "int32",
        "default_value": "2",
        "description": "Games required on a hero for average KDA to be valid and calibrated",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1311
    },
    "dota_min_aura_linger_duration": {
        "data_type": "float",
        "default_value": "0.034",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2198
    },
    "dota_min_haste": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2206
    },
    "dota_minimap_always_draw_hero_icons": {
        "data_type": "bool",
        "default_value": "false",
        "description": "No longer used, please use dota_minimap_primary_option and dota_minimap_secondary_option instead.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3384
    },
    "dota_minimap_background_option": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Background options for minimap. 0 = None, 1 = Simple, 2 = Realistic",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3391
    },
    "dota_minimap_create_output_size": {
        "data_type": "int32",
        "default_value": "512",
        "description": "Size of minimap texture generated with dota_minimap_create (512 default)",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4274
    },
    "dota_minimap_creep_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3371
    },
    "dota_minimap_disable_rightclick": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Disables right clicking on the minimap.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2607
    },
    "dota_minimap_draw_cocaster_camera": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3385
    },
    "dota_minimap_draw_fow": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3368
    },
    "dota_minimap_filter_amount": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3369
    },
    "dota_minimap_hero_name_shadowsize": {
        "data_type": "int32",
        "default_value": "8",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3383
    },
    "dota_minimap_hero_scalar": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3375
    },
    "dota_minimap_hero_scalar_distance": {
        "data_type": "int32",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3377
    },
    "dota_minimap_hero_scalar_minimum": {
        "data_type": "float",
        "default_value": "625",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3376
    },
    "dota_minimap_hero_size": {
        "data_type": "float",
        "default_value": "600",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3374
    },
    "dota_minimap_hero_spread": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3378
    },
    "dota_minimap_hero_spread_distance": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3379
    },
    "dota_minimap_hide_background": {
        "data_type": "bool",
        "default_value": "false",
        "description": "No longer used, please use dota_minimap_background_option instead.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3381
    },
    "dota_minimap_mango_tree_size": {
        "data_type": "float",
        "default_value": "400",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3392
    },
    "dota_minimap_misclick_time": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "Minimum time after the mouse enters the minimap before we accept a move command. Used to prevent misclicks.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2606
    },
    "dota_minimap_naming_noteam_buffer_distance": {
        "data_type": "float",
        "default_value": "3000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3393
    },
    "dota_minimap_options_migrated": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If false, will migrate from previous minimap options to new ones.  Should not be set manually because it can override your minimap settings.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3061
    },
    "dota_minimap_ping_chat_message_cooldown": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3367
    },
    "dota_minimap_ping_duration": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3366
    },
    "dota_minimap_ping_tag_duration": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3806
    },
    "dota_minimap_position_option": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Minimap on Left = 0, Minimap on Right = 1.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3641
    },
    "dota_minimap_power_rune_scale": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3373
    },
    "dota_minimap_primary_option": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Display options for primary minimap mode. 0 = Hero icon with arrow, 1 = Arrow with player colors, 2 = Arrow with team colors, 3 = Hero icon only",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3389
    },
    "dota_minimap_rune_size": {
        "data_type": "int32",
        "default_value": "325",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3372
    },
    "dota_minimap_secondary_option": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Display options for secondary (alt) minimap mode. 0 = Hero icon with arrow, 1 = Arrow with player colors, 2 = Arrow with team colors, 3 = Hero icon only",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3390
    },
    "dota_minimap_show_hero_icon": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set, will show hero icons when you hold alt down. No longer used, please use dota_minimap_primary_option and dota_minimap_secondary_option instead.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3382
    },
    "dota_minimap_simple_background": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If true, the minimap will show a simplified background image.  No longer used, please use dota_minimap_background_option instead",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3387
    },
    "dota_minimap_simple_colors": {
        "data_type": "bool",
        "default_value": "false",
        "description": "No longer used, please use dota_minimap_primary_option and dota_minimap_secondary_option instead.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3380
    },
    "dota_minimap_tower_defend_distance": {
        "data_type": "int32",
        "default_value": "500",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3370
    },
    "dota_minimap_use_dynamic_mesh": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3388
    },
    "dota_modelpreview_highlight_darken_factor": {
        "data_type": "float",
        "default_value": "0.9",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2664
    },
    "dota_modelpreview_highlight_desaturation_factor": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2663
    },
    "dota_modelpreview_highlight_flatten_factor": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2665
    },
    "dota_modelpreview_highlight_transparency_factor": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2666
    },
    "dota_modifier_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2199
    },
    "dota_mouse_spectator_window_lock": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, mouse will be locked to the window when in game and spectating in a mode that doesn't give camera control",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3639
    },
    "dota_mouse_window_lock": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If enabled, mouse will be locked to the window when ingame",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3638
    },
    "dota_muerta_ofrenda_reveal_sequence_current_state": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2939
    },
    "dota_muerta_release_dont_show_ingame_event_description": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2609
    },
    "dota_muerta_release_event_enable_custom_versus_screen": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4286
    },
    "dota_muerta_release_event_fake_event_active": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4285
    },
    "dota_music_battle_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1448
    },
    "dota_music_battle_distance": {
        "data_type": "int32",
        "default_value": "1000",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1445
    },
    "dota_music_battle_duration": {
        "data_type": "float",
        "default_value": "2.5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1449
    },
    "dota_music_battle_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1451
    },
    "dota_music_battle_pre_time": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1446
    },
    "dota_music_battle_rest_time": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1450
    },
    "dota_music_battle_weight_trigger": {
        "data_type": "int32",
        "default_value": "40",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1447
    },
    "dota_music_enable_spectator_mode": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2122
    },
    "dota_music_gank_enemy_timer": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1463
    },
    "dota_music_spectator_battle_average": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3330
    },
    "dota_music_spectator_battle_min": {
        "data_type": "int32",
        "default_value": "15",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3331
    },
    "dota_music_spectator_debug_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3332
    },
    "dota_mute_cobroadcasters": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, userinfo",
        "flagsRaw": 648,
        "hasDefensiveFlag": false,
        "index": 3874
    },
    "dota_mute_other_coaches": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 3365
    },
    "dota_mystery_box_artifical_results_delay": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2861
    },
    "dota_mystery_box_attempt_cooldown": {
        "data_type": "float",
        "default_value": "2.15",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2857
    },
    "dota_mystery_box_bp_progress_delay": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2859
    },
    "dota_mystery_box_debug_attempts": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2858
    },
    "dota_mystery_box_input_block_from_scene_load": {
        "data_type": "float",
        "default_value": "1.6",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2854
    },
    "dota_mystery_box_minimum_open_duration": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2856
    },
    "dota_mystery_box_open_delay": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2855
    },
    "dota_mystery_box_results_grace_period": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2860
    },
    "dota_mystery_box_trigger_frame_delay": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2862
    },
    "dota_neutral_color": {
        "data_type": "RGB Color",
        "default_value": "255 255 255 255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4280
    },
    "dota_neutral_color_cb": {
        "data_type": "RGB Color",
        "default_value": "255 255 255 255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4281
    },
    "dota_neutral_initial_spawn_delay": {
        "data_type": "float",
        "default_value": "60",
        "description": "Time after 0:00 to spawn the first wave of creeps.",
        "flags": "game, replicated, cheat",
        "flagsRaw": 24580,
        "hasDefensiveFlag": false,
        "index": 1468
    },
    "dota_neutral_spawn_fx_timing": {
        "data_type": "float",
        "default_value": "2",
        "description": "Time before neutral spawns to play effects.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1470
    },
    "dota_neutral_spawn_interval": {
        "data_type": "float",
        "default_value": "60",
        "description": "Time between neutral creep camp respawns, starting at 1:00.",
        "flags": "game, replicated, cheat",
        "flagsRaw": 24580,
        "hasDefensiveFlag": false,
        "index": 1469
    },
    "dota_neutral_timer_alarm_pull_numbers_b": {
        "data_type": "int32",
        "default_value": "146",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3356
    },
    "dota_neutral_timer_alarm_pull_numbers_g": {
        "data_type": "int32",
        "default_value": "252",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3355
    },
    "dota_neutral_timer_alarm_pull_numbers_r": {
        "data_type": "int32",
        "default_value": "200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3354
    },
    "dota_neutral_timer_alarm_pull_ring_b": {
        "data_type": "int32",
        "default_value": "66",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3353
    },
    "dota_neutral_timer_alarm_pull_ring_g": {
        "data_type": "int32",
        "default_value": "188",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3352
    },
    "dota_neutral_timer_alarm_pull_ring_r": {
        "data_type": "int32",
        "default_value": "98",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3351
    },
    "dota_neutral_timer_alarm_stack_numbers_b": {
        "data_type": "int32",
        "default_value": "158",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3350
    },
    "dota_neutral_timer_alarm_stack_numbers_g": {
        "data_type": "int32",
        "default_value": "232",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3349
    },
    "dota_neutral_timer_alarm_stack_numbers_r": {
        "data_type": "int32",
        "default_value": "253",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3348
    },
    "dota_neutral_timer_alarm_stack_ring_b": {
        "data_type": "int32",
        "default_value": "78",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3347
    },
    "dota_neutral_timer_alarm_stack_ring_g": {
        "data_type": "int32",
        "default_value": "191",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3346
    },
    "dota_neutral_timer_alarm_stack_ring_r": {
        "data_type": "int32",
        "default_value": "223",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3345
    },
    "dota_new_loadout_armory_pregame": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2447
    },
    "dota_new_player": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3056
    },
    "dota_new_player_chat_filter_set": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, hidden, archive",
        "flagsRaw": 152,
        "hasDefensiveFlag": false,
        "index": 3145
    },
    "dota_new_player_movie_volume": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2863
    },
    "dota_new_player_pool_gold_scale": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2004
    },
    "dota_new_player_pool_matches_played": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4275
    },
    "dota_new_player_pool_mode_creeps": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2006
    },
    "dota_new_player_pool_mode_creeps_melee_interval_minutes": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2008
    },
    "dota_new_player_pool_mode_creeps_melee_num_intervals": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2009
    },
    "dota_new_player_pool_mode_creeps_melee_start_minutes": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2007
    },
    "dota_new_player_pool_mode_creeps_ranged_interval_minutes": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2011
    },
    "dota_new_player_pool_mode_creeps_ranged_num_intervals": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2012
    },
    "dota_new_player_pool_mode_creeps_ranged_start_minutes": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2010
    },
    "dota_new_player_pool_mode_creeps_siege_interval_minutes": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2014
    },
    "dota_new_player_pool_mode_creeps_siege_num_intervals": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2015
    },
    "dota_new_player_pool_mode_creeps_siege_start_minutes": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2013
    },
    "dota_new_player_pool_rubber_band_logging_enabled": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2000
    },
    "dota_new_player_pool_rubber_band_max_player_lead": {
        "data_type": "int32",
        "default_value": "6",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2003
    },
    "dota_new_player_pool_rubber_band_min_player_lead": {
        "data_type": "int32",
        "default_value": "4",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2002
    },
    "dota_new_player_pool_rubber_band_min_time_between_calculation": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2001
    },
    "dota_new_player_pool_xp_scale": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2005
    },
    "dota_new_player_seen_learn_tab": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3057
    },
    "dota_news_data_cache_duration": {
        "data_type": "int32",
        "default_value": "600",
        "description": "How long the news data caches for before it requests again",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2772
    },
    "dota_news_data_ignore_before_date": {
        "data_type": "uint32",
        "default_value": "1669968000",
        "description": "Anything before this date is not considered news anymore",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2774
    },
    "dota_news_data_retry_delay": {
        "data_type": "int32",
        "default_value": "10",
        "description": "Retry delay when request fails",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2773
    },
    "dota_news_latest_pull_count": {
        "data_type": "int32",
        "default_value": "15",
        "description": "Number of most recent news events to pull",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2771
    },
    "dota_nimbus_spawn_height": {
        "data_type": "float",
        "default_value": "150",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4318
    },
    "dota_no_minimap": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3364
    },
    "dota_npc_creep_pushback_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1421
    },
    "dota_npc_creep_pushback_height_scale": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1425
    },
    "dota_npc_creep_pushback_max_damage_amount": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1432
    },
    "dota_npc_creep_pushback_max_damage_force": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1430
    },
    "dota_npc_creep_pushback_max_random_force": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1424
    },
    "dota_npc_creep_pushback_max_time": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1427
    },
    "dota_npc_creep_pushback_min_damage_amount": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1431
    },
    "dota_npc_creep_pushback_min_damage_force": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1429
    },
    "dota_npc_creep_pushback_min_random_force": {
        "data_type": "float",
        "default_value": "0.9",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1423
    },
    "dota_npc_creep_pushback_min_time": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1426
    },
    "dota_npc_creep_pushback_random_yaw": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1428
    },
    "dota_npc_creep_pushback_scale": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1422
    },
    "dota_npx_buff_bots_get_buff": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2197
    },
    "dota_npx_buff_kill_mult": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2196
    },
    "dota_npx_buff_max_deaths": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2195
    },
    "dota_npx_buff_max_value": {
        "data_type": "float",
        "default_value": "80",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2194
    },
    "dota_npx_home_widget_force_be_a_coach_visible": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3070
    },
    "dota_npx_home_widget_force_request_coach_visible": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3069
    },
    "dota_npx_home_widget_force_tutorial_tier": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3068
    },
    "dota_number_of_samples_for_lane_prediction": {
        "data_type": "int32",
        "default_value": "8000",
        "description": "Number of samples used to guess players lane selection",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2095
    },
    "dota_ogre_magi_arcana_disable_streak_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2618
    },
    "dota_ogre_magi_arcana_min_streak_to_show": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2620
    },
    "dota_ogre_magi_arcana_streak_collapse_duration": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2424
    },
    "dota_ogre_magi_arcana_streak_linger_duration": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2621
    },
    "dota_ogre_magi_arcana_streak_summary_delay": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2622
    },
    "dota_ogre_magi_arcana_streak_summary_duration": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2623
    },
    "dota_ogre_magi_arcana_streak_update_interval": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2619
    },
    "dota_open_party_manual_accept_invites": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set this to disable auto-accepting invites when the leader of an open party",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2777
    },
    "dota_orders_update_bots_immediately": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1613
    },
    "dota_overhead_damage_threshold_percent": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1433
    },
    "dota_overhead_on_received_item": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Emit an overhead particle effect on receiving an item from an ally.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2286
    },
    "dota_overhead_on_received_item_use_model": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3403
    },
    "dota_overkill_threshold": {
        "data_type": "float",
        "default_value": "0.33",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1441
    },
    "dota_overlaymap_acceptsinput": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enables interaction with the overlay map when visible",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2608
    },
    "dota_overlaymap_opacity": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "Controls how opaque the overlay map will display",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2734
    },
    "dota_override_coach_rating": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3189
    },
    "dota_override_dire_team_logo": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2369
    },
    "dota_override_dire_wins": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2372
    },
    "dota_override_plus_status": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2784
    },
    "dota_override_radiant_team_logo": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2368
    },
    "dota_override_radiant_wins": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2371
    },
    "dota_override_series_type": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2370
    },
    "dota_override_versus_scale": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2786
    },
    "dota_pain_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3837
    },
    "dota_pain_factor": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3835
    },
    "dota_pain_fade_rate": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3836
    },
    "dota_particle_camera_cull_distance": {
        "data_type": "float",
        "default_value": "3200",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4287
    },
    "dota_particle_fow_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4289
    },
    "dota_particle_off_camera_freeze": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4290
    },
    "dota_particle_off_camera_simrate": {
        "data_type": "float",
        "default_value": "0.3333",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4288
    },
    "dota_particle_parallel_prerender": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4291
    },
    "dota_path_disable_skip_ahead": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1655
    },
    "dota_path_disable_straightener": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1648
    },
    "dota_path_fuzztest": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1452
    },
    "dota_path_remove_goal_tree": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1651
    },
    "dota_path_report_time_ms": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1650
    },
    "dota_path_use_relative_projection": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1654
    },
    "dota_pause_behavior_score_use_majority": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Whether a majority of connected players must have low behavior score before low behavior score players can unpause",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2156
    },
    "dota_pause_cooldown": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2075
    },
    "dota_pause_cooldown_time": {
        "data_type": "float",
        "default_value": "300",
        "description": "Number of seconds before a player is allowed to pause again",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2153
    },
    "dota_pause_count": {
        "data_type": "int32",
        "default_value": "3",
        "description": "Number of times a player is allowed to pause the game",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2152
    },
    "dota_pause_countdown": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2073
    },
    "dota_pause_force_unpause_time": {
        "data_type": "float",
        "default_value": "300",
        "description": "Number of seconds after which the game will automatically unpause",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2151
    },
    "dota_pause_game_pause_silently": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2162
    },
    "dota_pause_limit": {
        "data_type": "float",
        "default_value": "180",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2074
    },
    "dota_pause_minigame_muted": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2648
    },
    "dota_pause_minimum_time_spent_paused": {
        "data_type": "float",
        "default_value": "1",
        "description": "Number of seconds the game *must* remain paused before an unpause (to prevent accidental pause/unpause on the same team).",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2154
    },
    "dota_pause_minimum_time_spent_paused_bad_behavior": {
        "data_type": "float",
        "default_value": "5",
        "description": "Number of seconds the game *must* remain paused before someone with bad behavior can unpause it",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2155
    },
    "dota_pause_same_team_resume_time": {
        "data_type": "float",
        "default_value": "5",
        "description": "Number of seconds resuming is restricted to the same team, after that either team can pause",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2149
    },
    "dota_pause_same_team_resume_time_disconnected": {
        "data_type": "float",
        "default_value": "30",
        "description": "Number of seconds resuming is restricted to the same team if someone disconnected, after that either team can pause",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2150
    },
    "dota_pending_replay_force_failure": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3216
    },
    "dota_pending_replay_num_retries": {
        "data_type": "int32",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3401
    },
    "dota_pending_replay_retry_seconds": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3402
    },
    "dota_periodic_resource_cache_duration_s": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2780
    },
    "dota_pet_aatest_threat": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1564
    },
    "dota_pet_allow_infront": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1577
    },
    "dota_pet_creepdist_maxthreat": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1574
    },
    "dota_pet_creepdist_minthreat": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1573
    },
    "dota_pet_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1565
    },
    "dota_pet_decay_rate": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1567
    },
    "dota_pet_disable_flee": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1578
    },
    "dota_pet_dist_cone": {
        "data_type": "float",
        "default_value": "50",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1582
    },
    "dota_pet_dist_max": {
        "data_type": "float",
        "default_value": "400",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1580
    },
    "dota_pet_dist_min": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1579
    },
    "dota_pet_dist_range": {
        "data_type": "float",
        "default_value": "400",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1581
    },
    "dota_pet_dmg_threshold_panic": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1568
    },
    "dota_pet_emote_maxtime": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1388
    },
    "dota_pet_emote_mintime": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1587
    },
    "dota_pet_fleedir_persist_time": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1586
    },
    "dota_pet_herodist_maxthreat": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1572
    },
    "dota_pet_herodist_minthreat": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1571
    },
    "dota_pet_herodist_radius": {
        "data_type": "float",
        "default_value": "1024",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1570
    },
    "dota_pet_itemcarry": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1389
    },
    "dota_pet_priorthreat_to_vanish": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1569
    },
    "dota_pet_reposition_maxtime": {
        "data_type": "float",
        "default_value": "7",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1584
    },
    "dota_pet_reposition_mintime": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1583
    },
    "dota_pet_return_threshold": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1575
    },
    "dota_pet_return_threshold_time": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1576
    },
    "dota_pet_threat_rate": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1566
    },
    "dota_pet_threat_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1585
    },
    "dota_ping_max_allowance": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1656
    },
    "dota_ping_max_allowance_period_seconds": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1657
    },
    "dota_ping_menu_delay": {
        "data_type": "float",
        "default_value": "0.15",
        "description": "Seconds to wait before showing the ping context menu.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3357
    },
    "dota_ping_use_contextual_ping": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3386
    },
    "dota_play_custom_server": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3001
    },
    "dota_play_custom_server_name": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3002
    },
    "dota_play_diretide_invert_daily_bonus": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3016
    },
    "dota_play_predict_hpq_state": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2829
    },
    "dota_player_add_summoned_to_selection": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3808
    },
    "dota_player_auto_repeat_right_mouse": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3700
    },
    "dota_player_cards_duplicate_display_ti10": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3117
    },
    "dota_player_cards_duplicate_display_ti9": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3119
    },
    "dota_player_channels_require_stop": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3856
    },
    "dota_player_draft_bots_pick_humans": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1544
    },
    "dota_player_draft_prefer_human_captains": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2096
    },
    "dota_player_draft_timebank_per_pick": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2098
    },
    "dota_player_draft_timebank_start": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2097
    },
    "dota_player_graphs_hide_last_time_dist": {
        "data_type": "int32",
        "default_value": "80",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2950
    },
    "dota_player_info_batch_interval_s": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3396
    },
    "dota_player_item_label_alt_delay": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3701
    },
    "dota_player_multipler_orders": {
        "data_type": "bool",
        "default_value": "false",
        "description": "By setting this to 1, you will issue an order to all controllable units by holding down the CTRL key when you click",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3880
    },
    "dota_player_profile_stats_cache_duration": {
        "data_type": "int32",
        "default_value": "120",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2819
    },
    "dota_player_selection_cycle_ignores_groups": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3881
    },
    "dota_player_simplified_controls": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3862
    },
    "dota_player_smart_multiunit_cast": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3861
    },
    "dota_player_teleport_requires_halt": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3855
    },
    "dota_player_units_auto_attack_mode": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3853
    },
    "dota_playtest_recommended_heroes": {
        "data_type": "string",
        "default_value": "",
        "description": "Required heroes in a playtest.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2261
    },
    "dota_playtest_required_heroes": {
        "data_type": "string",
        "default_value": "",
        "description": "Required heroes in a playtest.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2260
    },
    "dota_plus_fake_hero_badge_levels": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1667
    },
    "dota_plus_override_weekly_games_won": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2782
    },
    "dota_plus_override_weekly_reward_claimed": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2783
    },
    "dota_plus_timedstats_clientinterval": {
        "data_type": "int32",
        "default_value": "10",
        "description": "Time in seconds at which Plus timed stats will be recorded locally",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2435
    },
    "dota_plus_timedstats_time_window": {
        "data_type": "float",
        "default_value": "300",
        "description": "Time window for timed stats to show (backwards from now)",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2436
    },
    "dota_plus_use_assistant": {
        "data_type": "bool",
        "default_value": "true",
        "description": "When set, we default to Plus Assistant rather than the default guides",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2902
    },
    "dota_poor_network_detection_debug_level": {
        "data_type": "int32",
        "default_value": "2",
        "description": "Spew verbosity for poor network condition detection",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1297
    },
    "dota_poor_network_detection_disconnects_total": {
        "data_type": "int32",
        "default_value": "3",
        "description": "Total number of near-simultaneous disconnections required to declare poor network conditions",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1298
    },
    "dota_poor_network_detection_loss_pct": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "Packet loss threshold (0...1) for declaring a QoS stat interval to be 'bad'",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1292
    },
    "dota_poor_network_detection_max_intervals_player": {
        "data_type": "int32",
        "default_value": "5",
        "description": "Max number of bad intervals to count for a player",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1296
    },
    "dota_poor_network_detection_min_intervals_player": {
        "data_type": "int32",
        "default_value": "3",
        "description": "Player must have at least N bad intervals to count",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1295
    },
    "dota_poor_network_detection_num_intervals_team": {
        "data_type": "int32",
        "default_value": "11",
        "description": "Number of QoS stats intervals that must be 'bad' on each team.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1294
    },
    "dota_poor_network_detection_num_intervals_total": {
        "data_type": "int32",
        "default_value": "25",
        "description": "Number of QoS stats intervals that must be 'bad' over the whole match.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1293
    },
    "dota_portrait_animate": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3962
    },
    "dota_portrait_debug_item_def_index": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "Enables icon modification shader for specific item def index.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3963
    },
    "dota_portrait_debug_no_modifier": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3964
    },
    "dota_portrait_hide_background": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Disable portrait backgrounds. Mostly useful for rendering portrait movies with alpha.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3966
    },
    "dota_portrait_hide_hero": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3965
    },
    "dota_portrait_test_pet": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set to 1 to make the pet show up once.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3967
    },
    "dota_portrait_world_renderer_off": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2789
    },
    "dota_post_game_debug_animate_progress": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2944
    },
    "dota_post_game_debug_heroes": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2941
    },
    "dota_post_game_debug_mmr": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2942
    },
    "dota_post_game_fake_dire_team_id": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2947
    },
    "dota_post_game_fake_neutral_item_id": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2948
    },
    "dota_post_game_fake_player_pic": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2959
    },
    "dota_post_game_fake_radiant_team_id": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2946
    },
    "dota_post_game_fake_replay_state": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2958
    },
    "dota_post_game_force_animate_progress": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2943
    },
    "dota_post_game_level_graph_major_size": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2951
    },
    "dota_post_game_level_graph_minor_size": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2952
    },
    "dota_post_game_player_graph_highlight": {
        "data_type": "int32",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2949
    },
    "dota_post_game_progress_fake_account_id": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2878
    },
    "dota_post_game_quick_commend": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2945
    },
    "dota_post_game_report_time": {
        "data_type": "int32",
        "default_value": "600",
        "description": "Time after the signout completes that we can still report and commend players, given the lobby id",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1300
    },
    "dota_post_game_reward_tracking_duration": {
        "data_type": "int32",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2792
    },
    "dota_postgame_finish_replay_time": {
        "data_type": "float",
        "default_value": "15",
        "description": "How long to wait after the end scoreboard panel to finish the replay",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1977
    },
    "dota_postgame_time": {
        "data_type": "float",
        "default_value": "360",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1971
    },
    "dota_powerup_rune_spawn_time": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1972
    },
    "dota_powerup_rune_spawn_time_initial": {
        "data_type": "float",
        "default_value": "360",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1973
    },
    "dota_prediction_result_dev": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2657
    },
    "dota_predictions_force_ui": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3568
    },
    "dota_pregame_ap_time": {
        "data_type": "float",
        "default_value": "75",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1970
    },
    "dota_pregame_intro_duration": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2446
    },
    "dota_pregame_time": {
        "data_type": "float",
        "default_value": "90",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2168
    },
    "dota_preload_armory_images": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3060
    },
    "dota_preview_hero_pitch_offset": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3769
    },
    "dota_preview_hero_roll_offset": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3771
    },
    "dota_preview_hero_x_offset": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3766
    },
    "dota_preview_hero_y_offset": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3767
    },
    "dota_preview_hero_yaw_offset": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3770
    },
    "dota_preview_hero_z_offset": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3768
    },
    "dota_preview_teleport_channel_time": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3825
    },
    "dota_previous_battle_pass": {
        "data_type": "int32",
        "default_value": "32",
        "description": "",
        "flags": "devonly, client, replicated",
        "flagsRaw": 8202,
        "hasDefensiveFlag": false,
        "index": 2811
    },
    "dota_privatebeta_teamswap": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1439
    },
    "dota_pro_player_hide_sub_team_tags": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3397
    },
    "dota_profile_battle_report_stats_sort_priorities": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2960
    },
    "dota_profile_cache_duration": {
        "data_type": "int32",
        "default_value": "600",
        "description": "Number of seconds before re-requesting data for a profile",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2795
    },
    "dota_profile_card_cache_duration": {
        "data_type": "int32",
        "default_value": "600",
        "description": "Number of seconds before re-requesting data for a profile card",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2794
    },
    "dota_profile_card_fake_data": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use fake dummy data for profile cards instead of the real data from the GC.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2793
    },
    "dota_profile_card_no_compendium": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Pretend that profile card users don't have a compendium activated.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2661
    },
    "dota_profile_card_no_event": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Pretend that no event is active for the profile card",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2660
    },
    "dota_profile_hero_stats_sort_priorities": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2961
    },
    "dota_profile_league_passes_cache_duration": {
        "data_type": "int32",
        "default_value": "600",
        "description": "Number of seconds before re-requesting data for profile league passes",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2796
    },
    "dota_profile_league_passes_no_gc_retry_attempts": {
        "data_type": "int32",
        "default_value": "20",
        "description": "Maximum number of retries when the GC connection is down.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2799
    },
    "dota_profile_league_passes_no_gc_retry_delay": {
        "data_type": "int32",
        "default_value": "3",
        "description": "Number of seconds before retrying when the GC connection is down.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2798
    },
    "dota_profile_league_passes_retry_delay": {
        "data_type": "int32",
        "default_value": "60",
        "description": "Number of seconds before re-requesting data for profile league passes that we failed to load the first time.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2797
    },
    "dota_profile_teammate_stats_sort_priorities": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2962
    },
    "dota_profile_teammate_stats_sort_priorities_old": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2966
    },
    "dota_projectile_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1681
    },
    "dota_projection_continue_offscreen_abilities": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3630
    },
    "dota_projection_embargo_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3629
    },
    "dota_projection_embargo_time": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3628
    },
    "dota_projection_enabled_ti6": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, archive",
        "flagsRaw": 132,
        "hasDefensiveFlag": false,
        "index": 2090
    },
    "dota_projection_failsafe_timeout": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3794
    },
    "dota_projection_hero_pick_abilities": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3626
    },
    "dota_projection_hero_pick_max_time": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3627
    },
    "dota_projection_max_medium_layer": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3792
    },
    "dota_projection_max_top_layer": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3793
    },
    "dota_projection_multikill": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3623
    },
    "dota_projection_multikill_time": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3622
    },
    "dota_projection_note_away_team_highlight_base": {
        "data_type": "int32",
        "default_value": "123",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3625
    },
    "dota_projection_note_base_layer_day": {
        "data_type": "int32",
        "default_value": "100",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3795
    },
    "dota_projection_note_base_layer_day_flipped": {
        "data_type": "int32",
        "default_value": "101",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3796
    },
    "dota_projection_note_base_layer_dire_win": {
        "data_type": "int32",
        "default_value": "106",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3604
    },
    "dota_projection_note_base_layer_dire_win_flipped": {
        "data_type": "int32",
        "default_value": "107",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3605
    },
    "dota_projection_note_base_layer_night": {
        "data_type": "int32",
        "default_value": "102",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3600
    },
    "dota_projection_note_base_layer_night_flipped": {
        "data_type": "int32",
        "default_value": "103",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3601
    },
    "dota_projection_note_base_layer_pick": {
        "data_type": "int32",
        "default_value": "112",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3612
    },
    "dota_projection_note_base_layer_radiant_win": {
        "data_type": "int32",
        "default_value": "104",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3602
    },
    "dota_projection_note_base_layer_radiant_win_flipped": {
        "data_type": "int32",
        "default_value": "105",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3603
    },
    "dota_projection_note_first_blood_stage_left": {
        "data_type": "int32",
        "default_value": "110",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3608
    },
    "dota_projection_note_first_blood_stage_right": {
        "data_type": "int32",
        "default_value": "111",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3609
    },
    "dota_projection_note_first_blood_time": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3610
    },
    "dota_projection_note_game_paused": {
        "data_type": "int32",
        "default_value": "20",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3616
    },
    "dota_projection_note_godlike": {
        "data_type": "int32",
        "default_value": "84",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3621
    },
    "dota_projection_note_godlike_time": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3611
    },
    "dota_projection_note_home_team_highlight_base": {
        "data_type": "int32",
        "default_value": "118",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3624
    },
    "dota_projection_note_pick_highlight_stage_left": {
        "data_type": "int32",
        "default_value": "108",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3606
    },
    "dota_projection_note_pick_highlight_stage_right": {
        "data_type": "int32",
        "default_value": "109",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3607
    },
    "dota_projection_note_picks_transition": {
        "data_type": "int32",
        "default_value": "113",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3613
    },
    "dota_projection_note_picks_transition_flipped": {
        "data_type": "int32",
        "default_value": "114",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3614
    },
    "dota_projection_note_rampage": {
        "data_type": "int32",
        "default_value": "117",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3620
    },
    "dota_projection_note_strategy_time": {
        "data_type": "int32",
        "default_value": "21",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3617
    },
    "dota_projection_note_triple_kill": {
        "data_type": "int32",
        "default_value": "115",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3618
    },
    "dota_projection_note_ultra_kill": {
        "data_type": "int32",
        "default_value": "116",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3619
    },
    "dota_projection_picks_transition_time": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3615
    },
    "dota_projection_team_win_notes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3631
    },
    "dota_projection_video_channel": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3791
    },
    "dota_puck_waning_rift_doubletap_distance": {
        "data_type": "int32",
        "default_value": "25",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4317
    },
    "dota_purchase_force_failure": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2801
    },
    "dota_purchase_random_hero_relic_animation_final_delay_time": {
        "data_type": "float",
        "default_value": "0.8",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2871
    },
    "dota_purchase_random_hero_relic_animation_max_delay_time": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2869
    },
    "dota_purchase_random_hero_relic_animation_min_delay_time": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2870
    },
    "dota_purchase_random_hero_relic_shards_tick_duration": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2866
    },
    "dota_purchase_random_hero_relic_slowdown_time": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2868
    },
    "dota_purchase_random_hero_relic_steady_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2867
    },
    "dota_qop_arcana_kill_credit_window": {
        "data_type": "float",
        "default_value": "1.25",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2361
    },
    "dota_qop_arcana_melee_range": {
        "data_type": "float",
        "default_value": "350",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2170
    },
    "dota_qop_arcana_speech_delay": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2363
    },
    "dota_qop_arcana_test_ui": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Allows arcana UI testing arcana in demo mode",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2169
    },
    "dota_qop_arcana_ui_delay": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2362
    },
    "dota_queen_of_pain_arcana_disable_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2451
    },
    "dota_queen_of_pain_arcana_summary_display_delay": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2453
    },
    "dota_queen_of_pain_arcana_summary_linger_duration": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2454
    },
    "dota_queen_of_pain_arcana_summary_test_level_2": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2452
    },
    "dota_query_inhibit_time": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3715
    },
    "dota_quest_challenge_selected": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3182
    },
    "dota_quest_selected": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3181
    },
    "dota_quickcast_onkeydown": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enables mode where quickcast triggers the ability on key down instead of key up.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3243
    },
    "dota_quit_after_game": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Quit after a game is completed, do not hibernate",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2070
    },
    "dota_quit_on_hibernate_after_lobby": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Always terminate after receiving a lobby, do not rehibernate",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1291
    },
    "dota_random_strength": {
        "data_type": "float",
        "default_value": "0.35",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2036
    },
    "dota_range_display": {
        "data_type": "float",
        "default_value": "0",
        "description": "Displays a ring around the hero at the specified radius",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3816
    },
    "dota_ranked_role_queue": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3011
    },
    "dota_rare_line_click_count": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3883
    },
    "dota_razor_arcana_disable_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2460
    },
    "dota_razor_arcana_force_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2461
    },
    "dota_razor_arcana_increment_delay": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2464
    },
    "dota_razor_arcana_melee_range": {
        "data_type": "float",
        "default_value": "250",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2346
    },
    "dota_razor_arcana_popup_delay": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2462
    },
    "dota_razor_arcana_progress_limit_per_game": {
        "data_type": "int32",
        "default_value": "8",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2347
    },
    "dota_razor_arcana_progress_linger_duration": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2463
    },
    "dota_ready_check_duration_seconds": {
        "data_type": "int32",
        "default_value": "30",
        "description": "How long does a ready check run for before it's considered complete.",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 3167
    },
    "dota_ready_check_linger_duration_seconds": {
        "data_type": "int32",
        "default_value": "5",
        "description": "After a ready check is complete, how long the UI should linger up to display final results.",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 3168
    },
    "dota_realtime_stat_keyframe_interval_s": {
        "data_type": "float",
        "default_value": "10",
        "description": "How often the server generates a keyframe of realtime stats",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1290
    },
    "dota_realtime_stat_update_interval_s": {
        "data_type": "float",
        "default_value": "1",
        "description": "How often the server updates internal game state and checks whether it should update the GC with realtime stats",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1289
    },
    "dota_realtimeanalyzer_debug_query": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1602
    },
    "dota_realtimeanalyzer_debug_time_factor": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1603
    },
    "dota_reconnect_idle_buffer_time": {
        "data_type": "float",
        "default_value": "45",
        "description": "How much extra time the player has after reconnecting before he gets marked as AFK.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2143
    },
    "dota_record_blend_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "Scales rate of crossfade between 1st and 3rd idle cycles.  A value of 10 means the 1st cycle is fully blended in by 1/10th of animation",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3803
    },
    "dota_record_mode_webm": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Don't use this directly, use the dota_record_webm command.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3804
    },
    "dota_recorder_auto_advance": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Automatically start recording the next hero when the current ends",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3802
    },
    "dota_recorder_cycles": {
        "data_type": "int32",
        "default_value": "3",
        "description": "How many cycles of the animation to record",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3978
    },
    "dota_recorder_mode": {
        "data_type": "int32",
        "default_value": "1",
        "description": "0 = avi of idle anim, 1 = tga sequence of idle anim, 2 = single tga from start of idle anim, 3 = PNG sequence of anim",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3977
    },
    "dota_recorder_particle_settle_frames": {
        "data_type": "int32",
        "default_value": "10",
        "description": "Number of frames to render the portrait for in order for particle systems to settle.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3805
    },
    "dota_recorder_use_card_portrait": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use the hero selector card portrait setup",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3800
    },
    "dota_recorder_use_default_items": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Use default items only when recording heroes.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1325
    },
    "dota_recorder_use_fullbody_portrait": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Use the fullbody portrait setup. If 2, use Morphling's position for all heroes.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3799
    },
    "dota_recorder_use_portrait_file": {
        "data_type": "string",
        "default_value": "",
        "description": "Load camera setup from a specific portrait file",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3798
    },
    "dota_recorder_use_portrait_position": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Use camera position/activity from the portrait setup",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3797
    },
    "dota_recorder_use_webpage_portrait": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use the hero selector webpage portrait setup",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3801
    },
    "dota_redirect_allies_voice_to_private_coaching_group": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3190
    },
    "dota_render_bottom_inset": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3646
    },
    "dota_render_top_inset": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3647
    },
    "dota_replay_manager_download_chunk_size": {
        "data_type": "int32",
        "default_value": "1048576",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3400
    },
    "dota_replay_manager_download_simultaneous_requests": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3399
    },
    "dota_replay_skip_exits_cinematic_mode": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3566
    },
    "dota_reset_camera_on_spawn": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If enabled, camera will reset to your hero when you respawn",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3831
    },
    "dota_restrict_partner_type_chat": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Disallow chat between certain partner types",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1980
    },
    "dota_river_type": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3711
    },
    "dota_road_to_ti_use_playtest_data": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use SQL data from playtests to populate quests. Otherwise will use vdata from pro matches.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2877
    },
    "dota_roadtoti_test_pre_game": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2449
    },
    "dota_roshan_upgrade_rate": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2174
    },
    "dota_rp_hide_party_unless_open": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, party status will not be sent to friends via rich presence, unless the party is open",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2776
    },
    "dota_rp_show_dev_messages": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3217
    },
    "dota_rubick_arcana_override_score": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1682
    },
    "dota_run_rare_chance": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1394
    },
    "dota_salute_force_custom_tip_style": {
        "data_type": "string",
        "default_value": "",
        "description": "Custom tip style name to force being used",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2129
    },
    "dota_salute_rate_limit_seconds": {
        "data_type": "float",
        "default_value": "30",
        "description": "The amount of seconds that you must wait before you can salute again.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2128
    },
    "dota_salute_recent_tip_window": {
        "data_type": "float",
        "default_value": "12",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2130
    },
    "dota_salutes_max_per_match": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1668
    },
    "dota_save_sets_max_per_hero": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 1073741850,
        "hasDefensiveFlag": true,
        "index": 2728
    },
    "dota_save_sets_total": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 1073741850,
        "hasDefensiveFlag": true,
        "index": 2729
    },
    "dota_saved_camera_pos_1": {
        "data_type": "Vector3",
        "default_value": "-2230 1630 0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3885
    },
    "dota_saved_camera_pos_10": {
        "data_type": "Vector3",
        "default_value": "0 0 0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3698
    },
    "dota_saved_camera_pos_2": {
        "data_type": "Vector3",
        "default_value": "2800 -2345 0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3886
    },
    "dota_saved_camera_pos_3": {
        "data_type": "Vector3",
        "default_value": "3870 -1930 0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3887
    },
    "dota_saved_camera_pos_4": {
        "data_type": "Vector3",
        "default_value": "-6220 3645 0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3888
    },
    "dota_saved_camera_pos_5": {
        "data_type": "Vector3",
        "default_value": "-530 -400 0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3889
    },
    "dota_saved_camera_pos_6": {
        "data_type": "Vector3",
        "default_value": "6145 -2840 0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3890
    },
    "dota_saved_camera_pos_7": {
        "data_type": "Vector3",
        "default_value": "0 0 0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3891
    },
    "dota_saved_camera_pos_8": {
        "data_type": "Vector3",
        "default_value": "0 0 0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3892
    },
    "dota_saved_camera_pos_9": {
        "data_type": "Vector3",
        "default_value": "0 0 0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3697
    },
    "dota_saved_camera_pos_doublepress_time": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3699
    },
    "dota_scenario_autosave": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable autosaves while spectating a match from lobby",
        "flags": "client, archive, release",
        "flagsRaw": 524424,
        "hasDefensiveFlag": false,
        "index": 3218
    },
    "dota_scenario_autosave_interval": {
        "data_type": "int32",
        "default_value": "10",
        "description": "Interval in seconds between auto-saves",
        "flags": "client, archive, release",
        "flagsRaw": 524424,
        "hasDefensiveFlag": false,
        "index": 3219
    },
    "dota_scenario_autosave_remotely": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Allow autosaving while in HLTV/replay.  (Not saved in settings)",
        "flags": "client, release",
        "flagsRaw": 524296,
        "hasDefensiveFlag": false,
        "index": 3220
    },
    "dota_scenario_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable scenario ui in private lobbies",
        "flags": "client, archive, release",
        "flagsRaw": 524424,
        "hasDefensiveFlag": false,
        "index": 2850
    },
    "dota_scoreboard_force_visible": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2470
    },
    "dota_scoreboard_override_tip_event": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2469
    },
    "dota_screen_shake": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3832
    },
    "dota_scripted_replay": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3327
    },
    "dota_scripted_replay_camspeed": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3329
    },
    "dota_scripted_replay_file": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3328
    },
    "dota_season_toasts": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3232
    },
    "dota_selected_broadcaster_player_id": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2711
    },
    "dota_selection_groups": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set, certain units like spiderlings, eidolons and treants are considered groups for selection.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3810
    },
    "dota_selection_test": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3223
    },
    "dota_send_courier_killed": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2356
    },
    "dota_send_scout_killed": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2175
    },
    "dota_series_prediction_use_placeholder_icon": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3201
    },
    "dota_server_add_chat_mute_entries": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1310
    },
    "dota_server_allow_custom_games": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Where this server makes itself available to host custom games:  0 = both regular and custom, 1 = regular only, 2 = custom only, 3 = event game only",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1299
    },
    "dota_server_allow_mvp": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1309
    },
    "dota_server_long_frame_threshold_ms": {
        "data_type": "float",
        "default_value": "100",
        "description": "How long a frame must stall before we make a log message.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2094
    },
    "dota_server_projection_fow_check": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2091
    },
    "dota_server_projection_spectator_only": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2092
    },
    "dota_server_send_map_stats": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1312
    },
    "dota_server_wait_for_lobby": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, hidden",
        "flagsRaw": 22,
        "hasDefensiveFlag": true,
        "index": 2127
    },
    "dota_server_watchdog_match_timeout_minutes": {
        "data_type": "int32",
        "default_value": "4320",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1307
    },
    "dota_server_watchdog_shutdown_after_signout_minutes": {
        "data_type": "int32",
        "default_value": "60",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1308
    },
    "dota_set_hpbar_background": {
        "data_type": "string",
        "default_value": "",
        "description": "Set the Health Bar background image; streak_blue_bg, streak_fire_bg or streak_gold_bg",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3846
    },
    "dota_set_hpbar_streak_particle": {
        "data_type": "string",
        "default_value": "",
        "description": "Set the Health Bar streak particle manually",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3845
    },
    "dota_set_portrait_streak_particle": {
        "data_type": "string",
        "default_value": "",
        "description": "Set the Portrait streak particle manually",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2737
    },
    "dota_set_streak_effect_lv": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2373
    },
    "dota_set_top_bar_streak_effect": {
        "data_type": "string",
        "default_value": "",
        "description": "Set the particle for a top bar streak effect for testing purposes",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2374
    },
    "dota_settings_healthbar_boss_creep_height_offset": {
        "data_type": "float",
        "default_value": "-4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3412
    },
    "dota_settings_healthbar_boss_creep_icon_size": {
        "data_type": "float",
        "default_value": "24",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3410
    },
    "dota_settings_healthbar_boss_creep_width_offset": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3411
    },
    "dota_settings_healthbar_hero_icon": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3432
    },
    "dota_settings_quick_move": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3864
    },
    "dota_settings_quick_target_attack": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3863
    },
    "dota_settings_targeted_attack_move": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3866
    },
    "dota_settings_targeted_attack_move_radius": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3867
    },
    "dota_sf_force_ready_up_dialog": {
        "data_type": "int32",
        "default_value": "0",
        "description": "1 to force dialog immediately, 2 to force ready dialog when we lose focus",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2832
    },
    "dota_sf_game_end_delay": {
        "data_type": "float",
        "default_value": "10",
        "description": "Delay before the end game panel animation (XP + scoreboard) starts once a game is ended",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2163
    },
    "dota_sf_victory_message_duration": {
        "data_type": "float",
        "default_value": "3",
        "description": "Duration victory message is shown in game end",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3754
    },
    "dota_shards_button_shard_animation_duration_max_change": {
        "data_type": "float",
        "default_value": "20000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2886
    },
    "dota_shards_button_shard_animation_duration_max_seconds": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2884
    },
    "dota_shards_button_shard_animation_duration_min": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2883
    },
    "dota_shards_button_shard_animation_duration_min_change": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2885
    },
    "dota_shop_allow_hotkeys_on_shift": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2475
    },
    "dota_shop_common_items": {
        "data_type": "string",
        "default_value": "item_ward_observer item_ward_sentry item_smoke_of_deceit item_dust item_infused_raindrop item_bottle",
        "description": "Common items list for the shop",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2477
    },
    "dota_shop_force_hotkeys": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2474
    },
    "dota_shop_search_autofocus": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, focus will automatically be placed on the search box when opening the shop",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2476
    },
    "dota_shop_speech_timer": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3849
    },
    "dota_short_path_backtracking_limit": {
        "data_type": "float",
        "default_value": "350",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1652
    },
    "dota_short_path_iteration_limit": {
        "data_type": "int32",
        "default_value": "2000",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1647
    },
    "dota_short_path_reversal_penalty": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1649
    },
    "dota_short_path_sidetracking_limit": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1653
    },
    "dota_shovel_baby_roshan_rise": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1608
    },
    "dota_shovel_baby_roshan_rise_height": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1609
    },
    "dota_shovel_baby_roshan_rot": {
        "data_type": "float",
        "default_value": "-0.5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1607
    },
    "dota_show_accept_match_details": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2837
    },
    "dota_show_all_items": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Allows hidden items being display around the client (mainly Armory). Main only.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3578
    },
    "dota_show_cast_range": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3865
    },
    "dota_show_creep_spawn_box_wireframe": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3717
    },
    "dota_show_crosshair_cursor_height": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3574
    },
    "dota_show_heightmap": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1630
    },
    "dota_show_hero_finder": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set, will show hero indicator when alt is held down",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3809
    },
    "dota_show_itempickups": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2492
    },
    "dota_show_mini_showcase": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2662
    },
    "dota_show_nav_obstructions": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1629
    },
    "dota_show_nearby_tower_attack_range": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3824
    },
    "dota_show_object_obstructions": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1628
    },
    "dota_show_plus_assistant_violator": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2597
    },
    "dota_show_popular_items": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2478
    },
    "dota_show_quick_stats_damage_breakdown_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2459
    },
    "dota_show_spectated_unit_orders": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Log unit orders from other players while spectating/watching replays. 1 = player perspective player, 2 = all players",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3309
    },
    "dota_show_spectator_tournament_drops": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 1 for spectators directly connected to the game server to be able to see tournament drop messages",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3124
    },
    "dota_show_state_transitions": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show gamestate round transitions.",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2164
    },
    "dota_show_teleport_channel_time": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2506
    },
    "dota_show_waiting_for_match_warning_timeout": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3018
    },
    "dota_showcase_admin_cache_duration_s": {
        "data_type": "uint32",
        "default_value": "900",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3225
    },
    "dota_showcase_attachment_v2": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2671
    },
    "dota_silent_roshan": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Be quiet Rosh, the pros are trying to kill you",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4328
    },
    "dota_skip_behavior_comms_check": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Skip behavior score check for comms",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2802
    },
    "dota_skip_region_pings": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3005
    },
    "dota_smart_doubletap": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2708
    },
    "dota_social_feed_cache_duration": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2897
    },
    "dota_spatial_audio_mix": {
        "data_type": "float",
        "default_value": "1",
        "description": "Mix value to blend spatial and non-spatial audio in Dota 2.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 788
    },
    "dota_spec_show_courierkills": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2493
    },
    "dota_spec_show_spellsteals": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2494
    },
    "dota_spec_talentchanges_show": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2480
    },
    "dota_special_attack_delay": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1409
    },
    "dota_spectate_pause_advance_frames": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2812
    },
    "dota_spectate_roshantimer_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2467
    },
    "dota_spectator_auto_spectate_bot_games": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Automatically spectate the always-running bot game.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3148
    },
    "dota_spectator_auto_spectate_games": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Automatically spectate available games.  Set to a LeagueID to auto spectate games from that league.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3147
    },
    "dota_spectator_autospeed": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Toggle Directed mode auto speed control.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3311
    },
    "dota_spectator_autospeed_fast": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3315
    },
    "dota_spectator_autospeed_fastest": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3316
    },
    "dota_spectator_autospeed_slowmo": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3312
    },
    "dota_spectator_autospeed_slowmo_slow": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3314
    },
    "dota_spectator_autospeed_slowmo_slowest": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3313
    },
    "dota_spectator_broadcaster_mode": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Display hero selection in broadcaster mode.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2489
    },
    "dota_spectator_camera_min_time_to_change_chase_unit": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3335
    },
    "dota_spectator_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3318
    },
    "dota_spectator_directed_hero_timer": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3336
    },
    "dota_spectator_directed_maxdistance": {
        "data_type": "int32",
        "default_value": "820",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3307
    },
    "dota_spectator_directed_player_perspective": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3317
    },
    "dota_spectator_directed_spline_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3308
    },
    "dota_spectator_enable_edgepan_temporary_free_camera": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable spectator takeover camera when edge panning.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3714
    },
    "dota_spectator_fog_of_war": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Set fog of war spectator mode. -1:All 2:Radiant 3:Dire",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3319
    },
    "dota_spectator_golddelta_dontshowtotal": {
        "data_type": "int32",
        "default_value": "1000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2367
    },
    "dota_spectator_graph": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2491
    },
    "dota_spectator_graph_networking_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "0 to disable graph data networking for perf comparisons.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1685
    },
    "dota_spectator_graph_networking_override": {
        "data_type": "bool",
        "default_value": "false",
        "description": "1 to enable graph data networking for all clients.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1686
    },
    "dota_spectator_graph_send_interval": {
        "data_type": "float",
        "default_value": "1",
        "description": "Seconds between each graph update and tranmission.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1684
    },
    "dota_spectator_hero_index": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3501
    },
    "dota_spectator_inventory_snapshot_interval": {
        "data_type": "float",
        "default_value": "30",
        "description": "Seconds between inventory snapshots",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1687
    },
    "dota_spectator_lobbies_cache_duration": {
        "data_type": "int32",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2813
    },
    "dota_spectator_lobby_game_details_timeout": {
        "data_type": "int32",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2814
    },
    "dota_spectator_minimum_spawn_delay": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "Hero spawning takes at least this long so that we can move the camera and play the particle effect",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2486
    },
    "dota_spectator_mode": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Toggles the spectator mode: 0=Directed - 1=Free Cam - 2=Hero Chase - 3=PlayerView",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3499
    },
    "dota_spectator_options_autohide": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2497
    },
    "dota_spectator_options_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2496
    },
    "dota_spectator_pause_on_slow_frame_threshold": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3702
    },
    "dota_spectator_pin_open": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2495
    },
    "dota_spectator_selection_mode": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2484
    },
    "dota_spectator_shoulder_view": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3310
    },
    "dota_spectator_soundtime": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2485
    },
    "dota_spectator_spawn_duration": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "Duration that the camera should stay on the spawned hero before resetting back to normal",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2488
    },
    "dota_spectator_spawn_ui_delay": {
        "data_type": "float",
        "default_value": "0.75",
        "description": "Delay after the hero spawns before showing the name and playing the pick sound",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2487
    },
    "dota_spectator_stats_panel": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Current spectator stats panel. 1 = scoreboard, 2 = gold+xp, 3 = items, 4 = graph, 5 = fantasy",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3320
    },
    "dota_spectator_teamname_dire": {
        "data_type": "string",
        "default_value": "0",
        "description": "International 2012: for testing, override the team ID # for the dire.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2483
    },
    "dota_spectator_teamname_overrides": {
        "data_type": "bool",
        "default_value": "true",
        "description": "International 2012: enable override of 'radiant's turn to ban' with 'navi's turn to ban'.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2481
    },
    "dota_spectator_teamname_radiant": {
        "data_type": "string",
        "default_value": "0",
        "description": "International 2012: for testing, override the team ID # for the radiant.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2482
    },
    "dota_spectator_use_broadcaster_stats_panel": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Follow the broadcasters choice of stats display.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2490
    },
    "dota_spectator_watching_broadcaster": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Indicates if you are watching a broadcaster in player view, so that the handling of selection can be treated differently. Meaningless when not in player view spectator mode.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3500
    },
    "dota_spectre_arcana_disable_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2500
    },
    "dota_spectre_arcana_progress_delay": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2502
    },
    "dota_spectre_arcana_progress_linger_duration": {
        "data_type": "float",
        "default_value": "6",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2501
    },
    "dota_spectre_arcana_progress_override_value": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2503
    },
    "dota_speech_emotes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set 0 to disable emotes.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1611
    },
    "dota_speech_hardcoded_respeak_delay": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Certain speech concepts will not be said more than once per (n) seconds. Set to 0 to disable.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1490
    },
    "dota_speech_level": {
        "data_type": "int32",
        "default_value": "2",
        "description": "Mutes certain parts of the units speech: 0 = no speech, 1 = only events, 2 = all",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3227
    },
    "dota_speech_meepo_pitch": {
        "data_type": "int32",
        "default_value": "5",
        "description": "Increase the pitch of every successive meepo voice by this many %",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4329
    },
    "dota_speech_missinglane_call_interval": {
        "data_type": "float",
        "default_value": "10",
        "description": "Bots will call 'missing' on a lane no more than once per this many seconds.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1550
    },
    "dota_speech_missinglane_call_threshold": {
        "data_type": "float",
        "default_value": "8",
        "description": "Bots will call 'missing' on a lane if an opponent has been gone this many seconds.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1551
    },
    "dota_speech_mute_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1488
    },
    "dota_speech_proximity_interval": {
        "data_type": "float",
        "default_value": "5",
        "description": "Once per (n) seconds, one hero will poll for TLK_ALLY_NEARBY. Because there are ten heroes this means each hero will poll once per n*10 seconds. Set 0 to disable altogether.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1455
    },
    "dota_speech_proximity_radius": {
        "data_type": "float",
        "default_value": "500",
        "description": "Heroes nearer than this distance will poll for the TLK_ALLY_NEARBY concept.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1453
    },
    "dota_speech_proximity_radius_enemy": {
        "data_type": "float",
        "default_value": "1000",
        "description": "Enemy heroes nearer than this distance will poll for the TLK_ENEMY_NEARBY concept.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1454
    },
    "dota_speech_shop_dawdle_interval": {
        "data_type": "float",
        "default_value": "15",
        "description": "Play 'dawdling' line from shopkeeper after hero has been in shop this long.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1462
    },
    "dota_speech_shop_enter_interval": {
        "data_type": "float",
        "default_value": "30",
        "description": "At least this many seconds must pass between shopkeeper greeting someone to his shop.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1461
    },
    "dota_speech_shopkeeper": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable or disable shopkeepers' speech.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1464
    },
    "dota_spew_connected_players": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, server will spew connected player GC updates\n",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1314
    },
    "dota_spidergraph_bg_color": {
        "data_type": "RGB Color",
        "default_value": "0 0 0 0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2676
    },
    "dota_spidergraph_bg_innercolor_1": {
        "data_type": "RGB Color",
        "default_value": "41 37 46 128",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2682
    },
    "dota_spidergraph_bg_innercolor_2": {
        "data_type": "RGB Color",
        "default_value": "45 48 53 255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2683
    },
    "dota_spidergraph_bg_linecolor_1": {
        "data_type": "RGB Color",
        "default_value": "105 112 120 45",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2684
    },
    "dota_spidergraph_bg_linecolor_2": {
        "data_type": "RGB Color",
        "default_value": "105 112 120 45",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2685
    },
    "dota_spidergraph_bg_linecolor_3": {
        "data_type": "RGB Color",
        "default_value": "105 112 120 45",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2686
    },
    "dota_spidergraph_bg_midcolor_1": {
        "data_type": "RGB Color",
        "default_value": "45 48 53 64",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2680
    },
    "dota_spidergraph_bg_midcolor_2": {
        "data_type": "RGB Color",
        "default_value": "45 48 53 105",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2681
    },
    "dota_spidergraph_bg_outercolor_1": {
        "data_type": "RGB Color",
        "default_value": "45 48 53 105",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2677
    },
    "dota_spidergraph_bg_outercolor_2": {
        "data_type": "RGB Color",
        "default_value": "62 65 71 225",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2678
    },
    "dota_spidergraph_bg_outercolor_2_playercard": {
        "data_type": "RGB Color",
        "default_value": "0 0 0 196",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2679
    },
    "dota_spidergraph_comparisoninnercolor": {
        "data_type": "RGB Color",
        "default_value": "134 150 245 24",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2674
    },
    "dota_spidergraph_comparisonoutlinecolor": {
        "data_type": "RGB Color",
        "default_value": "134 150 245 255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2675
    },
    "dota_spidergraph_statinnercolor": {
        "data_type": "RGB Color",
        "default_value": "255 128 33 12",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2672
    },
    "dota_spidergraph_statoutlinecolor": {
        "data_type": "RGB Color",
        "default_value": "255 148 63 255",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2673
    },
    "dota_splash_ad_acknowledged_id": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2817
    },
    "dota_start_ai_game": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2124
    },
    "dota_steam_china_url_use_https": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Should Steam China clients use HTTPS",
        "flags": "client, hidden, archive, release",
        "flagsRaw": 524440,
        "hasDefensiveFlag": false,
        "index": 4246
    },
    "dota_steamcontroller_view_acceleration_exponent": {
        "data_type": "float",
        "default_value": "1.4",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3558
    },
    "dota_steamcontroller_view_cardinal_bias": {
        "data_type": "float",
        "default_value": "0.35",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3559
    },
    "dota_steamcontroller_view_cardinal_bias_diagonal": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3560
    },
    "dota_steamcontroller_view_distance_scale": {
        "data_type": "float",
        "default_value": "1.1",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3562
    },
    "dota_steamcontroller_view_haptic_intensity": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3561
    },
    "dota_steamcontroller_view_mode": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3563
    },
    "dota_steamcontroller_view_sensitivity": {
        "data_type": "float",
        "default_value": "-5",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3557
    },
    "dota_stencil_glows": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable stencil of glows.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3283
    },
    "dota_sticker_collection_tutorial_state": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3079
    },
    "dota_stickerbook_collision_offset": {
        "data_type": "float",
        "default_value": "-0.0001",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2972
    },
    "dota_stickerbook_decal_depth": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2970
    },
    "dota_stickerbook_min_distance": {
        "data_type": "float",
        "default_value": "440",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2971
    },
    "dota_stickerbook_raycast_length": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2967
    },
    "dota_stickerbook_scale_max": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2969
    },
    "dota_stickerbook_scale_min": {
        "data_type": "float",
        "default_value": "0.8",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2968
    },
    "dota_sticky_ping_wheel": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3342
    },
    "dota_store_available_items_duration": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2625
    },
    "dota_store_data_cache_duration": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2822
    },
    "dota_store_data_retry_delay": {
        "data_type": "int32",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2624
    },
    "dota_strategy_time": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2166
    },
    "dota_suggest_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1671
    },
    "dota_suggest_learn_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1491
    },
    "dota_suggest_learn_disable_topn_requests": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1493
    },
    "dota_suggest_learn_error_backoff_s": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1495
    },
    "dota_suggest_learn_error_retry_s": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1494
    },
    "dota_suggest_learn_item_sequence_allow_threshold": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1505
    },
    "dota_suggest_learn_item_sequence_dupe_multiplier": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1509
    },
    "dota_suggest_learn_item_sequence_other_option_multiplier": {
        "data_type": "float",
        "default_value": "0.7",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1508
    },
    "dota_suggest_learn_item_sequence_threshold_full": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1507
    },
    "dota_suggest_learn_item_sequence_threshold_start": {
        "data_type": "float",
        "default_value": "6",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1506
    },
    "dota_suggest_learn_item_threshold": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1510
    },
    "dota_suggest_learn_lane_trilane_penalty": {
        "data_type": "float",
        "default_value": "0.8",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1511
    },
    "dota_suggest_learn_pregame_items_reduction": {
        "data_type": "float",
        "default_value": "0.9",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1503
    },
    "dota_suggest_learn_pregame_items_threshold": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1504
    },
    "dota_suggest_learn_spew_abilities": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1499
    },
    "dota_suggest_learn_spew_items": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1498
    },
    "dota_suggest_learn_spew_lanes": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1500
    },
    "dota_suggest_learn_spew_pregame_items": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1497
    },
    "dota_suggest_learn_spew_rank_prediction": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1502
    },
    "dota_suggest_learn_spew_win_probability": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1501
    },
    "dota_suggest_learn_toobusy_backoff_s": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1496
    },
    "dota_suggest_learn_wards_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1492
    },
    "dota_suggest_learn_win_probability_interval": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1512
    },
    "dota_suggest_wards_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1672
    },
    "dota_suggestion_quick_buy_and_neutral_timeout": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1670
    },
    "dota_summoned_units_auto_attack_mode_2": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3854
    },
    "dota_suppress_invalid_orders": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Don't log invalid orders",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1614
    },
    "dota_surrender_on_disconnect": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If enabled, a team will surrender if all players on that team disconnect",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2139
    },
    "dota_sv_load_scenario_timeout": {
        "data_type": "float",
        "default_value": "20",
        "description": "Timeout to receive saved scenario from GC",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1683
    },
    "dota_swap_mouse_spellcast": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3703
    },
    "dota_taunt_base_cooldown": {
        "data_type": "float",
        "default_value": "2",
        "description": "The amount of time after a taunt is finished that you always have to wait before taunting again.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1406
    },
    "dota_taunt_second_cooldown": {
        "data_type": "float",
        "default_value": "60",
        "description": "If trying to spam taunts, then amount of time you have to wait until that will be allowed again.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1407
    },
    "dota_team_emoticon_team": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3137
    },
    "dota_team_fandom_last_seen": {
        "data_type": "int32",
        "default_value": "1638320400",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2990
    },
    "dota_team_force_public": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2628
    },
    "dota_team_info_batch_interval_s": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2627
    },
    "dota_team_save_team_data": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2629
    },
    "dota_team_showcase_duration": {
        "data_type": "float",
        "default_value": "16",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 2255
    },
    "dota_teammate_max_invis": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3817
    },
    "dota_test_bounty_ui": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4284
    },
    "dota_test_global_hero_scale_multiplier": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, hidden, cheat",
        "flagsRaw": 16404,
        "hasDefensiveFlag": false,
        "index": 1434
    },
    "dota_test_loadout_arcana_score": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2645
    },
    "dota_test_move_attack": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1563
    },
    "dota_test_neutral_item_ack": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3224
    },
    "dota_text_chat_mute_threshold_s": {
        "data_type": "float",
        "default_value": "8",
        "description": "Time threshold to flag a text chat as abusive if it's followed by a chat mute",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1981
    },
    "dota_threat_evaluator_calculation_duration": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1524
    },
    "dota_threat_evaluator_outer_radius": {
        "data_type": "float",
        "default_value": "3000",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1523
    },
    "dota_threat_evaluator_radius": {
        "data_type": "float",
        "default_value": "2000",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1522
    },
    "dota_ti2023_quests_how_to_play_dismissed": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3094
    },
    "dota_ti9_consumable_shovel_outcome": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1606
    },
    "dota_ti_onstage_fake_team_0": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2510
    },
    "dota_ti_onstage_fake_team_1": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2511
    },
    "dota_ti_onstage_overlay": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2509
    },
    "dota_ti_onstage_pods": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3755
    },
    "dota_ti_onstage_pods_away_back": {
        "data_type": "string",
        "default_value": "AWAY BACK",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2366
    },
    "dota_ti_onstage_pods_away_front": {
        "data_type": "string",
        "default_value": "AWAY FRONT",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2364
    },
    "dota_ti_onstage_pods_buyback": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2512
    },
    "dota_ti_onstage_pods_buyback_available": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2518
    },
    "dota_ti_onstage_pods_buyback_duration": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2513
    },
    "dota_ti_onstage_pods_during_draft": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2520
    },
    "dota_ti_onstage_pods_force_video_0": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2507
    },
    "dota_ti_onstage_pods_force_video_1": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2508
    },
    "dota_ti_onstage_pods_home_back": {
        "data_type": "string",
        "default_value": "HOME BACK",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2365
    },
    "dota_ti_onstage_pods_home_front": {
        "data_type": "string",
        "default_value": "HOME FRONT",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2523
    },
    "dota_ti_onstage_pods_id": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2522
    },
    "dota_ti_onstage_pods_item_pickup": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2515
    },
    "dota_ti_onstage_pods_item_time": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2514
    },
    "dota_ti_onstage_pods_level_up_time": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2519
    },
    "dota_ti_onstage_pods_player_pics": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2521
    },
    "dota_ti_onstage_pods_rapier": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2517
    },
    "dota_ti_onstage_pods_reversed_seats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3756
    },
    "dota_ti_onstage_pods_secret_info": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2516
    },
    "dota_ti_override_home_team": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3757
    },
    "dota_ti_podseats_data_file": {
        "data_type": "string",
        "default_value": "scripts/tournaments/ti_podseats.txt",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3763
    },
    "dota_ti_winners_data_file": {
        "data_type": "string",
        "default_value": "scripts/tournaments/ti_winners.txt",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3764
    },
    "dota_tier_treasure_display_override_item_def": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2973
    },
    "dota_time_of_day_rate": {
        "data_type": "float",
        "default_value": "0.00166667",
        "description": "Rate at which time of day changes relative to game seconds",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2240
    },
    "dota_toast_manager_override_duration": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2406
    },
    "dota_tod_slow_transition_speed": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3596
    },
    "dota_tod_transition_speed": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3595
    },
    "dota_toggle_autoattack_automatically_during_orders": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3871
    },
    "dota_tormentor_respawn_time": {
        "data_type": "float",
        "default_value": "600",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2172
    },
    "dota_tormentor_spawn_time": {
        "data_type": "int32",
        "default_value": "1200",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2171
    },
    "dota_tournament_override": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2120
    },
    "dota_track_chat_mutes": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Track chat prior to a mute happening in sql?",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2093
    },
    "dota_tree_destruction": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3633
    },
    "dota_tree_regrow_time": {
        "data_type": "float",
        "default_value": "180",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1979
    },
    "dota_trivia_autoplay_sounds": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Determines whether or not to autoplay trivia sounds.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2888
    },
    "dota_trivia_chat_enabled2": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2630
    },
    "dota_trivia_enable_encryption": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Encrypt the question_value and correct_answer_index fields of trivia questions",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1513
    },
    "dota_trivia_force_question_category": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Force generated trivia questions to be of a specific category",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1514
    },
    "dota_trivia_require_queue": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2887
    },
    "dota_trophies_cache_duration": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3228
    },
    "dota_turbo_courier_default_auto_deliver": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4327
    },
    "dota_turbo_custom_pickrules": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2132
    },
    "dota_turbo_matches_played": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4282
    },
    "dota_tutorial_actionpanel": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2118
    },
    "dota_tutorial_camera_location_dist": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1516
    },
    "dota_tutorial_debug": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1518
    },
    "dota_tutorial_disable_bot_situational_items": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2082
    },
    "dota_tutorial_force_bot_defend": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2081
    },
    "dota_tutorial_force_learn_ability": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2117
    },
    "dota_tutorial_game": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2123
    },
    "dota_tutorial_heroselection": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2119
    },
    "dota_tutorial_move_location_dist": {
        "data_type": "float",
        "default_value": "225",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1515
    },
    "dota_tutorial_percent_bot_exp_decrease": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2079
    },
    "dota_tutorial_percent_damage_decrease": {
        "data_type": "float",
        "default_value": "0",
        "description": "Percentage decrease to apply on damage on the player character.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2080
    },
    "dota_tutorial_prevent_exp_gain": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2078
    },
    "dota_tutorial_prevent_start": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2077
    },
    "dota_tutorial_see_enemy": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1520
    },
    "dota_tutorial_show_tower_damage": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2083
    },
    "dota_tutorial_skip_pregame": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2087
    },
    "dota_tutorial_start_lesson": {
        "data_type": "string",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2116
    },
    "dota_tutorial_state_change_delay": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1517
    },
    "dota_tutorial_stop_daynightcycle": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2084
    },
    "dota_tutorial_usemodifierforanim": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1519
    },
    "dota_twitch_top_streams_data_cache_duration": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2631
    },
    "dota_ui_armory_build_on_demand": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3072
    },
    "dota_ui_armory_is_category_view": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3073
    },
    "dota_ui_armory_item_duplicate": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3071
    },
    "dota_ui_force_custom_games_players": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3161
    },
    "dota_ui_popup_collectors_cache_available_voted_items": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3230
    },
    "dota_ui_popup_collectors_cache_available_voted_items_timestamp": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3231
    },
    "dota_underdraft_cache_duration": {
        "data_type": "int32",
        "default_value": "300",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2690
    },
    "dota_unit_alert_radius": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1414
    },
    "dota_unit_alert_range": {
        "data_type": "float",
        "default_value": "1800",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1601
    },
    "dota_unit_anger_cooldown_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1418
    },
    "dota_unit_anger_duration": {
        "data_type": "float",
        "default_value": "2.3",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1413
    },
    "dota_unit_anger_radius_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1417
    },
    "dota_unit_attack_visibility": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2242
    },
    "dota_unit_blocked_angle_threshold": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1558
    },
    "dota_unit_blocked_look_ahead_angle_threshold": {
        "data_type": "float",
        "default_value": "0.7",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1559
    },
    "dota_unit_blocked_wait_time": {
        "data_type": "float",
        "default_value": "0.15",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1555
    },
    "dota_unit_blocked_wait_time_long": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1557
    },
    "dota_unit_blocked_wait_time_mid": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1556
    },
    "dota_unit_cache_npc_searches": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Whether to reuse a unit's search cache every frame to avoid obstruction manager queries.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1416
    },
    "dota_unit_colour_threat_evaluation": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3434
    },
    "dota_unit_damage_event_window": {
        "data_type": "float",
        "default_value": "2",
        "description": "Window (in seconds) that we track damage events for future health value extrapolation.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1401
    },
    "dota_unit_debug_acquisition_range": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Shows the acquisition range for selected units (Green circle)",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2212
    },
    "dota_unit_debug_attack": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1397
    },
    "dota_unit_debug_attack_range": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Shows the attack range for selected units (Red circle)",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2211
    },
    "dota_unit_debug_vision_range": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Shows the vision range for selected units (Teal circle)",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2213
    },
    "dota_unit_draw_paths": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1412
    },
    "dota_unit_health_bar_offset": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3430
    },
    "dota_unit_hero_glows": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3807
    },
    "dota_unit_interact_flash_duration": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3860
    },
    "dota_unit_lean_angle": {
        "data_type": "float",
        "default_value": "90",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2203
    },
    "dota_unit_lean_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2201
    },
    "dota_unit_lean_rate": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2202
    },
    "dota_unit_moveto_repath_on_target_move": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1395
    },
    "dota_unit_no_damage": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1411
    },
    "dota_unit_orders_rate": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 3872
    },
    "dota_unit_orders_resend_rate": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 3873
    },
    "dota_unit_pose_run_rate": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, game, client, hidden, replicated",
        "flagsRaw": 8222,
        "hasDefensiveFlag": true,
        "index": 2204
    },
    "dota_unit_relative_move_bounce": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1560
    },
    "dota_unit_short_path_search_debug": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1646
    },
    "dota_unit_show_bounding_radius": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1552
    },
    "dota_unit_show_collision_radius": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1553
    },
    "dota_unit_show_missing_selection_boxes": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3429
    },
    "dota_unit_show_selection_boxes": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Draws selection hitboxes. 0 = off, 1 = non-trees, 2 = trees, 3 = all entities.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3821
    },
    "dota_unit_sink_delay": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3820
    },
    "dota_unit_sink_speed": {
        "data_type": "float",
        "default_value": "50",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3819
    },
    "dota_unit_use_player_color": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3435
    },
    "dota_unit_z_speed": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3818
    },
    "dota_unpause_countdown": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2072
    },
    "dota_unpause_mass_disconnect_cooldown": {
        "data_type": "float",
        "default_value": "86400",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2076
    },
    "dota_update_connected_players_check_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "How often the server should check if it needs to update the GC in seconds",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1472
    },
    "dota_update_connected_players_send_time": {
        "data_type": "float",
        "default_value": "2",
        "description": "Minimum send interval: Don't check for lobby vs game state discrepancies if we've sent a message within N seconds",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1473
    },
    "dota_update_connected_players_team_change": {
        "data_type": "float",
        "default_value": "60",
        "description": "max send interval: player drafted to team",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1484
    },
    "dota_update_connected_players_urgency_building_state": {
        "data_type": "float",
        "default_value": "60",
        "description": "max send interval: tower state changed",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1481
    },
    "dota_update_connected_players_urgency_connect": {
        "data_type": "float",
        "default_value": "30",
        "description": "max send interval: player connect",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1475
    },
    "dota_update_connected_players_urgency_disconnect_consequences": {
        "data_type": "float",
        "default_value": "5",
        "description": "max send interval: player disconnects, relevant leaver actions are predicted",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1479
    },
    "dota_update_connected_players_urgency_disconnect_noconsequences": {
        "data_type": "float",
        "default_value": "30",
        "description": "max send interval: player disconnects, no relevant leaver actions predicted",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1477
    },
    "dota_update_connected_players_urgency_gamestate_timeout": {
        "data_type": "float",
        "default_value": "10",
        "description": "max send interval: We send a game state change, but lobby hasn't acknowledged it",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1480
    },
    "dota_update_connected_players_urgency_heartbeat": {
        "data_type": "float",
        "default_value": "1800",
        "description": "max send interval: nothing has changed and lobby appears to be accurate",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1474
    },
    "dota_update_connected_players_urgency_herochanged": {
        "data_type": "float",
        "default_value": "10",
        "description": "max send interval: player changer their hero",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1476
    },
    "dota_update_connected_players_urgency_kills": {
        "data_type": "float",
        "default_value": "60",
        "description": "max send interval: kill counts changed",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1483
    },
    "dota_update_connected_players_urgency_mass_disconnect": {
        "data_type": "float",
        "default_value": "3",
        "description": "max send interval: mass disconnection has been detected",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1478
    },
    "dota_update_connected_players_urgency_spectator_count": {
        "data_type": "float",
        "default_value": "60",
        "description": "max send interval: spectator count changed",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1482
    },
    "dota_update_gc_connection_check_count": {
        "data_type": "int32",
        "default_value": "2",
        "description": "How many tries we check if the GC is still connected before terminating due to no response",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1487
    },
    "dota_update_gc_connection_check_time": {
        "data_type": "float",
        "default_value": "1200",
        "description": "How often the server should check the GC is still connected",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1486
    },
    "dota_update_gc_server_info": {
        "data_type": "float",
        "default_value": "600",
        "description": "How often the server should check if it needs to update the GC in seconds",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1485
    },
    "dota_upload_item_purchase_history_duration_threshold": {
        "data_type": "int32",
        "default_value": "1200",
        "description": "match duration below which we will not upload item purchases",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1302
    },
    "dota_upload_item_purchase_history_mmr_threshold": {
        "data_type": "int32",
        "default_value": "1000",
        "description": "MMR below which we will not upload item purchases",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1301
    },
    "dota_upload_match_state_history_duration_threshold": {
        "data_type": "int32",
        "default_value": "900",
        "description": "match duration below which we will not upload item purchases",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1303
    },
    "dota_upload_match_state_history_interval": {
        "data_type": "float",
        "default_value": "30",
        "description": "interval in seconds that we track game states",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1304
    },
    "dota_upload_neutral_item_equip_history_duration_threshold": {
        "data_type": "int32",
        "default_value": "1200",
        "description": "match duration below which we will not upload neutral item equips",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1306
    },
    "dota_upload_neutral_item_equip_history_mmr_threshold": {
        "data_type": "int32",
        "default_value": "1000",
        "description": "MMR below which we will not upload neutral item equips",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1305
    },
    "dota_use_aghanims_postprocess_material": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3847
    },
    "dota_use_experimental_npc_controller": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1390
    },
    "dota_use_heightmap": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 0 to disable using heightmap when tracing vertical rays",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4455
    },
    "dota_use_occluded_click_particle_effects": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3877
    },
    "dota_use_winter2022_postprocess_material": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3848
    },
    "dota_versus_scene_allow_multiple_actions": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Allow multiple actions in the vs screen",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2383
    },
    "dota_versus_scene_chat_bubble_player": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Player ID to force chat bubbles for",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2378
    },
    "dota_versus_scene_disable_heroes": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2377
    },
    "dota_versus_scene_featured_hero_force_hero_level": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "set to the hero level you want them to be. -1 means use the actual data",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2380
    },
    "dota_versus_scene_featured_hero_force_hero_relics": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "set to the number of relics you want to show up. -1 means use the actual data.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2381
    },
    "dota_versus_scene_featured_hero_force_hero_sticker": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "set to the sticker you want to show up. -1 means use the actual data.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2382
    },
    "dota_versus_scene_featured_hero_force_plus_subscriber": {
        "data_type": "int32",
        "default_value": "0",
        "description": "-1 to pretend they're not a plus subcriber, 1 to pretend they are, 0 for default.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2379
    },
    "dota_versus_scene_override_heroes": {
        "data_type": "string",
        "default_value": "",
        "description": "Comma separated list of hero names to show on the versus scene.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2376
    },
    "dota_versus_scene_override_layout_file": {
        "data_type": "string",
        "default_value": "",
        "description": "Specify an XML file for testing a new versus scene that doesn't have a corresponding item yet.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2375
    },
    "dota_versus_screen_fake_accolades": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3976
    },
    "dota_versus_screen_flip_team_order": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3975
    },
    "dota_victory_timer": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1997
    },
    "dota_video_config.DeviceID": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4463
    },
    "dota_video_config.VendorID": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4462
    },
    "dota_video_config.Version": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4461
    },
    "dota_video_config.setting.aspectratiomode": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4488
    },
    "dota_video_config.setting.coop_fullscreen": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4475
    },
    "dota_video_config.setting.cpu_level": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4464
    },
    "dota_video_config.setting.defaultres": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4467
    },
    "dota_video_config.setting.defaultresheight": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4468
    },
    "dota_video_config.setting.dota_ambient_cloth": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4483
    },
    "dota_video_config.setting.dota_ambient_creatures": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4482
    },
    "dota_video_config.setting.dota_cheap_water": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4480
    },
    "dota_video_config.setting.dota_portrait_animate": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4481
    },
    "dota_video_config.setting.fullscreen": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4474
    },
    "dota_video_config.setting.fullscreen_min_on_focus_loss": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4478
    },
    "dota_video_config.setting.gpu_level": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4469
    },
    "dota_video_config.setting.gpu_mem_level": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4466
    },
    "dota_video_config.setting.high_dpi": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4479
    },
    "dota_video_config.setting.knowndevice": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4471
    },
    "dota_video_config.setting.mat_viewportscale": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4486
    },
    "dota_video_config.setting.mat_vsync": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4477
    },
    "dota_video_config.setting.mem_level": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4465
    },
    "dota_video_config.setting.nowindowborder": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4476
    },
    "dota_video_config.setting.recommendedheight": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4485
    },
    "dota_video_config.setting.refreshrate_denominator": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4473
    },
    "dota_video_config.setting.refreshrate_numerator": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4472
    },
    "dota_video_config.setting.shaderquality": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4484
    },
    "dota_video_config.setting.useadvanced": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4487
    },
    "dota_video_config.setting.version": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 4470
    },
    "dota_wagering_info_cache_duration": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2806
    },
    "dota_wait_for_players_battle_cup_present_time": {
        "data_type": "float",
        "default_value": "10",
        "description": "Time to stay after waiting for players succeeds when displaying battle cup winners",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2138
    },
    "dota_wait_for_players_completed_delay": {
        "data_type": "float",
        "default_value": "2",
        "description": "How long to stay at the waiting-for-players UI after all players have loaded",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2136
    },
    "dota_wait_for_players_failed_delay": {
        "data_type": "float",
        "default_value": "3",
        "description": "How long to stay at the waiting-for-players UI after all players have loaded",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2137
    },
    "dota_wait_for_players_to_load": {
        "data_type": "int32",
        "default_value": "1",
        "description": "If set, hero picking will be delayed until all players have loaded.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2133
    },
    "dota_wait_for_players_to_load_streaming_timeout": {
        "data_type": "float",
        "default_value": "30",
        "description": "Game will start after this time, even if all players haven't loaded yet",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2135
    },
    "dota_wait_for_players_to_load_timeout": {
        "data_type": "float",
        "default_value": "180",
        "description": "Game will start after this time, even if all players haven't loaded yet",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2134
    },
    "dota_ward_placement_max_suggestions": {
        "data_type": "int32",
        "default_value": "15",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3720
    },
    "dota_ward_placement_min_weight": {
        "data_type": "float",
        "default_value": "0.028",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3719
    },
    "dota_watch_force_main_event": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2996
    },
    "dota_watch_game_disable_client_validation": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force disable client validation for spectating.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 2692
    },
    "dota_watch_live_friend_score_boost": {
        "data_type": "int32",
        "default_value": "500",
        "description": "Amount that friends in live games boost the game's sort score",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 2693
    },
    "dota_watch_live_league_id": {
        "data_type": "int32",
        "default_value": "0",
        "description": "League ID for requested games",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 2691
    },
    "dota_watch_live_match_data_refresh_interval": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2994
    },
    "dota_watch_live_match_list_auto_refresh_interval": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2993
    },
    "dota_watch_live_match_list_refresh_interval": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2992
    },
    "dota_watch_live_request_period": {
        "data_type": "float",
        "default_value": "30",
        "description": "Amount that friends in live games boost the game's sort score",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 2694
    },
    "dota_watch_menu_force_live_match_visible": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2890
    },
    "dota_watch_menu_force_rosters_set": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2891
    },
    "dota_watch_menu_force_visible": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2889
    },
    "dota_watch_pause_at_the_end_of_all_replays": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Pause at the end of replays",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2696
    },
    "dota_watch_tab_violator_scheduled_update_interval_s": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3212
    },
    "dota_watch_ti_16_teams": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2991
    },
    "dota_water_fadetime": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3634
    },
    "dota_water_rune_spawn_time_initial": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1974
    },
    "dota_wearable_dissolve_duration": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "How long the dissolve effect is in seconds.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2401
    },
    "dota_wearable_dissolve_intensity": {
        "data_type": "float",
        "default_value": "0",
        "description": "0.0 - 10.0, larger number gives more intense color",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2404
    },
    "dota_wearable_dissolve_noise": {
        "data_type": "float",
        "default_value": "40",
        "description": "1.0 - 1000.0, larger number is noisier ",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2402
    },
    "dota_wearable_dissolve_thickness": {
        "data_type": "float",
        "default_value": "0.03",
        "description": "0.0 - 1.0, larger number is thicker",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2403
    },
    "dota_wearable_dither_duration": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "How long the dither effect is in seconds.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2405
    },
    "dota_wearables_clientside": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1326
    },
    "dota_weekend_tourney_buyin_member_max": {
        "data_type": "int32",
        "default_value": "5",
        "description": "Max buyin allowed for a single member",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3163
    },
    "dota_weekend_tourney_buyin_team_max": {
        "data_type": "int32",
        "default_value": "5",
        "description": "Max buyin allowed for entire team",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3164
    },
    "dota_weekend_tourney_max_skill_increase": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Max number of tiers above the party's assigned level that you can compete at",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3165
    },
    "dota_weekend_tourney_participation_cooldown_hours": {
        "data_type": "int32",
        "default_value": "120",
        "description": "Players may not participate in another weekend tourney scheduled for N hours after the most recent schedule time",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 3166
    },
    "dota_weekend_tourney_selected_division": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Default division ID to show for weekend leagues and such",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2700
    },
    "dota_weekend_tourney_small_team_size": {
        "data_type": "int32",
        "default_value": "0",
        "description": "If non-zero, then we will allow teams of N players to queue for a test that requires fewer participants",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 3162
    },
    "dota_weekly_quest_challenge_debug": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Debug for weekly quest challenges",
        "flags": "devonly, game, archive",
        "flagsRaw": 134,
        "hasDefensiveFlag": false,
        "index": 1521
    },
    "dota_weekly_quests_disable_locks": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2809
    },
    "dota_weekly_quests_only_show_active_week": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2810
    },
    "dota_will_purchase_gold_remaining_max_remaining": {
        "data_type": "int32",
        "default_value": "1000",
        "description": "On the 'I will purchase <item>' alert, the maximum amount of gold remaining when showing the remaining gold cost",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2473
    },
    "dota_will_purchase_gold_remaining_min_cost": {
        "data_type": "int32",
        "default_value": "2000",
        "description": "On the 'I will purchase <item>' alert, the minimum cost of an item to show the remaining gold cost",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2472
    },
    "dota_windrunner_arcana_disable_hud_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2389
    },
    "dota_windrunner_arcana_enable_second_style": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2392
    },
    "dota_windrunner_arcana_hud_summary_delay": {
        "data_type": "float",
        "default_value": "2.5",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2391
    },
    "dota_windrunner_arcana_hud_summary_duration": {
        "data_type": "float",
        "default_value": "3.5",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2390
    },
    "dota_windrunner_focus_fire_fx_threshold": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2348
    },
    "dota_workshoptest": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2254
    },
    "dota_workshoptest_modelnew0": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2264
    },
    "dota_workshoptest_modelnew1": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2266
    },
    "dota_workshoptest_modelnew2": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2268
    },
    "dota_workshoptest_modelorg0": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2263
    },
    "dota_workshoptest_modelorg1": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2265
    },
    "dota_workshoptest_modelorg2": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2267
    },
    "dota_wraith_king_arcana_disable_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2386
    },
    "dota_wraith_king_arcana_hero_claim_bucket_1": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2703
    },
    "dota_wraith_king_arcana_hero_claim_bucket_2": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2704
    },
    "dota_wraith_king_arcana_hero_claim_bucket_3": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2705
    },
    "dota_wraith_king_arcana_hero_claim_bucket_4": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2706
    },
    "dota_wraith_king_arcana_hero_claim_bucket_5": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2707
    },
    "dota_wraith_king_arcana_meepo_test": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2688
    },
    "dota_wraith_king_arcana_progress_delay": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2388
    },
    "dota_wraith_king_arcana_progress_linger_duration": {
        "data_type": "float",
        "default_value": "6",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2387
    },
    "dota_wraith_king_arcana_show_hero_alive": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2689
    },
    "dota_xp_rune_spawn_time": {
        "data_type": "float",
        "default_value": "420",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1976
    },
    "dotadev_usebinds": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3242
    },
    "dp_pull": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2357
    },
    "dp_radius": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2358
    },
    "dp_spirits": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2359
    },
    "dsp_automatic": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, demo",
        "flagsRaw": 65538,
        "hasDefensiveFlag": true,
        "index": 753
    },
    "dsp_db_min": {
        "data_type": "int32",
        "default_value": "80",
        "description": "",
        "flags": "devonly, demo",
        "flagsRaw": 65538,
        "hasDefensiveFlag": true,
        "index": 749
    },
    "dsp_db_mixdrop": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, demo",
        "flagsRaw": 65538,
        "hasDefensiveFlag": true,
        "index": 750
    },
    "dsp_dist_max": {
        "data_type": "float",
        "default_value": "1440",
        "description": "",
        "flags": "cheat, demo",
        "flagsRaw": 81920,
        "hasDefensiveFlag": false,
        "index": 746
    },
    "dsp_dist_min": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "cheat, demo",
        "flagsRaw": 81920,
        "hasDefensiveFlag": false,
        "index": 745
    },
    "dsp_mix_max": {
        "data_type": "float",
        "default_value": "0.8",
        "description": "",
        "flags": "devonly, demo",
        "flagsRaw": 65538,
        "hasDefensiveFlag": true,
        "index": 748
    },
    "dsp_mix_min": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, demo",
        "flagsRaw": 65538,
        "hasDefensiveFlag": true,
        "index": 747
    },
    "dsp_off": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 754
    },
    "dsp_vol_2ch": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, demo",
        "flagsRaw": 65538,
        "hasDefensiveFlag": true,
        "index": 758
    },
    "dsp_vol_4ch": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, demo",
        "flagsRaw": 65538,
        "hasDefensiveFlag": true,
        "index": 757
    },
    "dsp_vol_5ch": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, demo",
        "flagsRaw": 65538,
        "hasDefensiveFlag": true,
        "index": 756
    },
    "dsp_volume": {
        "data_type": "float",
        "default_value": "0.8",
        "description": "",
        "flags": "archive, demo",
        "flagsRaw": 65664,
        "hasDefensiveFlag": false,
        "index": 755
    },
    "dump_audio_input": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 716
    },
    "enable_boneflex": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4163
    },
    "engine_accurate_input_processing_delta_time": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When true, elapsed time given to the input processing will be the time elapsed since the last input processing. This is only relevant when input is processed multiple times per frame ( i.e. multiple ticks per frame)",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 49
    },
    "engine_allow_multiple_simulates_per_frame": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When the client is catching up in low frame rate situations, should we run client simulate more than once a frame?",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 46
    },
    "engine_allow_multiple_ticks_per_frame": {
        "data_type": "bool",
        "default_value": "true",
        "description": "When the client is catching up in low frame rate situations, should we run tick more than once a frame?",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 45
    },
    "engine_client_tick_pad_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 47
    },
    "engine_cpu_info_extended": {
        "data_type": "string",
        "default_value": "",
        "description": "CPU the engine is running on.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 16
    },
    "engine_enable_frametime_warnings": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable framerate-related warnings, such as sv_long_frame_ms.  Disabling warnings is useful when running in situations such a debug where a slow frame rate is expected",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 53
    },
    "engine_low_latency_sleep_after_client_tick": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When r_low_latency is enabled, this moves the low latency sleep on tick frames to happen after client simulation.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 48
    },
    "engine_max_resource_system_update_time": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 58
    },
    "engine_no_focus_sleep": {
        "data_type": "int32",
        "default_value": "20",
        "description": "",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 23
    },
    "engine_no_focus_sleep_vconsole_suppress": {
        "data_type": "bool",
        "default_value": "true",
        "description": "When VConsole is in the foreground, don't trigger engine_no_focus_sleep behavior",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 24
    },
    "engine_ostype": {
        "data_type": "string",
        "default_value": "",
        "description": "OS type the engine is running on.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 15
    },
    "engine_platform_name_extended": {
        "data_type": "string",
        "default_value": "",
        "description": "Platform the engine is running on.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 14
    },
    "engine_render_only": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 44
    },
    "engine_rendersystem_init": {
        "data_type": "string",
        "default_value": "",
        "description": "Rendersystem option requested (changing this does not change the rendersystem).",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 12
    },
    "engine_rendersystem_shader_model": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Rendersystem shader model in use (changing this does not change the shader model).",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 13
    },
    "engine_rendersystem_used": {
        "data_type": "string",
        "default_value": "",
        "description": "Rendersystem option in use (changing this does not change the rendersystem).",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 11
    },
    "engine_show_frame_dispatch": {
        "data_type": "bool",
        "default_value": "false",
        "description": "show frame dispatch names.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 41
    },
    "engine_show_frame_pacing": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 25
    },
    "engine_show_frame_ticks": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 42
    },
    "engine_sse42": {
        "data_type": "bool",
        "default_value": "true",
        "description": "turn on sse4.2 optimizations in the engine",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 275
    },
    "engine_vr_max_ticks_to_simulate": {
        "data_type": "int32",
        "default_value": "3",
        "description": "Max number of ticks to simulate per frame, after which simulation will start to slow down compared to real time.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 43
    },
    "english": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set to 1, running the english language set of assets.",
        "flags": "client, userinfo",
        "flagsRaw": 520,
        "hasDefensiveFlag": false,
        "index": 3936
    },
    "ent_actornames_font": {
        "data_type": "string",
        "default_value": "Consolas",
        "description": "ent_actornames font name",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2297
    },
    "ent_actornames_fontsize": {
        "data_type": "int32",
        "default_value": "24",
        "description": "ent_actornames font size",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2298
    },
    "ent_debug_draw_thinkers": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1695
    },
    "ent_joint_axis_size": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1897
    },
    "ent_joint_filter_substring": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1899
    },
    "ent_joint_names": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1898
    },
    "ent_joint_only_ik_joints": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1901
    },
    "ent_joint_use_bind_pose": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1900
    },
    "ent_messages_draw": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Visualizes all entity input/output activity.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1928
    },
    "ent_pivot_size": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "game, archive, cheat",
        "flagsRaw": 16516,
        "hasDefensiveFlag": false,
        "index": 2293
    },
    "ent_revert_dormancy_change": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4253
    },
    "ent_show_contexts": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show entity contexts in ent_text display",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2296
    },
    "ent_showonlyattachment": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1909
    },
    "ent_skeleton_duration": {
        "data_type": "float",
        "default_value": "0",
        "description": "Duration of ent_skeleton display",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2313
    },
    "ent_skeleton_only_ik_joints": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1902
    },
    "ent_steadystate_batchsize": {
        "data_type": "int32",
        "default_value": "20",
        "description": "Max number of entities to transmit to player",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1882
    },
    "ent_steadystate_delay": {
        "data_type": "float",
        "default_value": "5",
        "description": "Time in seconds without network state changes until an entity is considered for trickle updates",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1826
    },
    "ent_steadystate_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1825
    },
    "ent_steadystate_interval": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "Rate at which entities can be trickled to players",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1881
    },
    "ent_test_interpolation": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4144
    },
    "ent_text_flags_active": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, archive, cheat",
        "flagsRaw": 16516,
        "hasDefensiveFlag": false,
        "index": 2299
    },
    "ent_text_no_name_really_i_mean_it": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2295
    },
    "entity_log_load_unserialize": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Output unserialization of entities on map load. 0 - off, 1 - client/server, 2 - server, 3 - client",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 303
    },
    "event_points_activate_timeout": {
        "data_type": "int32",
        "default_value": "10",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2895
    },
    "execute_command_every_frame": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 40
    },
    "fade_debug_splitscreen_slot": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3913
    },
    "fairy_shadow_realm_overlay_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Fairy Shadow Realm Overlay Effect",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3282
    },
    "fake_account_disabled": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2824
    },
    "fake_account_disabled_end_time": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2825
    },
    "fake_chat_members": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Number of users in chat channel.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3120
    },
    "fake_custom_lobbies": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Show additional lobbies in the lobby list",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3210
    },
    "fake_event_game_active": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3020
    },
    "fake_event_game_countdown": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3021
    },
    "fake_low_behavior_for_ranked": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2827
    },
    "fake_low_behavior_for_ranked_account_id": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2828
    },
    "fake_low_pri": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2826
    },
    "fake_team_crest": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3579
    },
    "filesystem_buffer_size": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Size of per file buffers. 0 for none",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 407
    },
    "filesystem_fake_latency": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 412
    },
    "filesystem_max_stdio_read": {
        "data_type": "int32",
        "default_value": "16",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 410
    },
    "filesystem_native": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Use native FS or STDIO",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 409
    },
    "filesystem_report_buffered_io": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 411
    },
    "filesystem_unbuffered_io": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 408
    },
    "filter_player_simulation_time": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2289
    },
    "fire_extinguishes_under_water": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1177
    },
    "fire_use_modifier": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2066
    },
    "fog_color": {
        "data_type": "Vector3",
        "default_value": "-1 -1 -1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 967
    },
    "fog_colorskybox": {
        "data_type": "Vector3",
        "default_value": "-1 -1 -1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3923
    },
    "fog_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable fog",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 79
    },
    "fog_enableskybox": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3924
    },
    "fog_end": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3919
    },
    "fog_endskybox": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3921
    },
    "fog_hdrcolorscale": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 968
    },
    "fog_hdrcolorscaleskybox": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3926
    },
    "fog_maxdensity": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3925
    },
    "fog_maxdensityskybox": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3922
    },
    "fog_override": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Overrides the map's fog settings (-1 populates fog_ vars with map's values)",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 966
    },
    "fog_override_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use fog_override convars instead of world fog data",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 92
    },
    "fog_override_end": {
        "data_type": "float",
        "default_value": "3500",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 94
    },
    "fog_override_exponent": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 96
    },
    "fog_override_max_density": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 95
    },
    "fog_override_start": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 93
    },
    "fog_start": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3918
    },
    "fog_startskybox": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3920
    },
    "fog_volume_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, prints diagnostic information about the current fog volume",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1330
    },
    "font_show_glyph_miss": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 478
    },
    "footstep_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2050
    },
    "footstep_force_volume": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2051
    },
    "force_allow_team_matchmaking": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Forces play UI to show team matchmaking options. You must be on a team for this to work.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2833
    },
    "force_leave_game_button": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2830
    },
    "force_multicast": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2186
    },
    "fov_desired": {
        "data_type": "float",
        "default_value": "75",
        "description": "Sets the base field-of-view.",
        "flags": "client, archive, userinfo",
        "flagsRaw": 648,
        "hasDefensiveFlag": false,
        "index": 4101
    },
    "fow_client_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3583
    },
    "fow_client_debug_team": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3589
    },
    "fow_client_nofiltering": {
        "data_type": "int32",
        "default_value": "0",
        "description": "0 = normal, 1 = off",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3280
    },
    "fow_client_show_grid": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3586
    },
    "fow_client_show_grid_xy": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3587
    },
    "fow_client_show_occluders": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3585
    },
    "fow_client_show_stats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3588
    },
    "fow_client_show_viewers": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3584
    },
    "fow_client_visibility": {
        "data_type": "int32",
        "default_value": "0",
        "description": "0 = normal, 1 = off, 2 = never seen, 3 = seen",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3281
    },
    "fow_client_viz_flags": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, hidden, cheat",
        "flagsRaw": 16408,
        "hasDefensiveFlag": false,
        "index": 3590
    },
    "fow_debug_draw_height_override": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1090
    },
    "fow_degree_fade_in_rate1": {
        "data_type": "float",
        "default_value": "4",
        "description": "FoW area fade in rate #1 (greater than 1 is faster)",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1179
    },
    "fow_degree_fade_in_rate2": {
        "data_type": "float",
        "default_value": "4",
        "description": "FoW area fade in rate #2 (greater than 1 is faster)",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1180
    },
    "fow_degree_fade_in_rate_midpoint": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "FoW area fade out rate midpoint (0.0 - 1.0)",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1178
    },
    "fow_degree_fade_out_rate1": {
        "data_type": "float",
        "default_value": "4",
        "description": "FoW area fade out rate #1 (greater than 1 is faster)",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1182
    },
    "fow_degree_fade_out_rate2": {
        "data_type": "float",
        "default_value": "4",
        "description": "FoW area fade out rate #2 (greater than 1 is faster)",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1183
    },
    "fow_degree_fade_out_rate_midpoint": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "FoW area fade out rate (0.0 - 1.0)",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1181
    },
    "fow_entity_reveal_unseen_radius": {
        "data_type": "float",
        "default_value": "0",
        "description": "Radius in world space to reveal around all viewers from unseen state, regardless of visibility.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1185
    },
    "fow_entity_reveal_unseen_time": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "Seconds over which an unseen area is revealed by radius checks, 0 is instant.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1186
    },
    "fow_server_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1617
    },
    "fow_server_debug_team": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1623
    },
    "fow_server_show_grid": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1620
    },
    "fow_server_show_grid_xy": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1621
    },
    "fow_server_show_occluders": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1619
    },
    "fow_server_show_stats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1622
    },
    "fow_server_show_viewers": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1618
    },
    "fow_server_viz_flags": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, hidden, cheat",
        "flagsRaw": 16404,
        "hasDefensiveFlag": false,
        "index": 1624
    },
    "fow_simd_unseen": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1187
    },
    "fow_tile_update_time": {
        "data_type": "float",
        "default_value": "0",
        "description": "FoW tile update time.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1184
    },
    "fps_max": {
        "data_type": "float",
        "default_value": "120",
        "description": "Frame rate limiter.  0=no limit.  Does not apply to dedicated server.",
        "flags": "archive, release",
        "flagsRaw": 524416,
        "hasDefensiveFlag": false,
        "index": 31
    },
    "fps_max_tools": {
        "data_type": "float",
        "default_value": "120",
        "description": "Additional frame rate limit while in tools mode and a window other than the game window has focus. Note that fps_max still applies, this only allows the maximum frame rate for tools mode to be lower. 0=no tools specific limit.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 33
    },
    "fps_max_ui": {
        "data_type": "float",
        "default_value": "0",
        "description": "Frame rate limiter while the game UI is displayed.  0=no limit.  Does not apply to dedicated server.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 32
    },
    "freecamera_accel": {
        "data_type": "float",
        "default_value": "5",
        "description": "Tweak this parameter to adjust Free Camera movement acceleration.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4036
    },
    "freecamera_fog_end": {
        "data_type": "float",
        "default_value": "2500",
        "description": "Fog end for Free Camera.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4032
    },
    "freecamera_fog_start": {
        "data_type": "float",
        "default_value": "1800",
        "description": "Fog start for Free Camera.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4210
    },
    "freecamera_max_speed": {
        "data_type": "float",
        "default_value": "500",
        "description": "Tweak this parameter to adjust Free Camera movement max speed.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4035
    },
    "freecamera_rotation_multiplier": {
        "data_type": "float",
        "default_value": "10",
        "description": "Tweak this parameter to adjust Free Camera mouse rotation.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4034
    },
    "freecamera_zfar": {
        "data_type": "float",
        "default_value": "4500",
        "description": "Fog start for Free Camera.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4033
    },
    "frontpage_overwrite_twitch_stream": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3047
    },
    "fs_async_threads": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Number of IO threads in async filesystem (-1 == auto)",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 401
    },
    "fs_fake_read_delay_ms": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Add N ms of delay to every low-level read operation, to simulate a slow disk",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 406
    },
    "fs_report_async_io": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 402
    },
    "fs_report_long_reads": {
        "data_type": "int32",
        "default_value": "0",
        "description": "0:Off, 1:All (for tracking accumulated duplicate read times), >1:Microsecond threashold",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 404
    },
    "fs_report_sync_opens": {
        "data_type": "int32",
        "default_value": "0",
        "description": "0:Off, 1:Always, 2:Not during load",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 403
    },
    "fs_warning_mode": {
        "data_type": "int32",
        "default_value": "0",
        "description": "0:Off, 1:Warn main thread, 2:Warn other threads",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 405
    },
    "func_break_max_pieces": {
        "data_type": "int32",
        "default_value": "15",
        "description": "",
        "flags": "game, archive, replicated",
        "flagsRaw": 8324,
        "hasDefensiveFlag": false,
        "index": 1814
    },
    "func_break_reduction_factor": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1815
    },
    "func_breakdmg_bullet": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1894
    },
    "func_breakdmg_club": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1895
    },
    "func_breakdmg_explosive": {
        "data_type": "float",
        "default_value": "1.25",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1896
    },
    "fx_drawmetalspark": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Draw metal spark effects.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3955
    },
    "g_debug_angularsensor": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1749
    },
    "g_debug_constraint_sounds": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable debug printing about constraint sounds.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1879
    },
    "g_debug_ragdoll_visualize": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4174
    },
    "g_debug_transitions": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set to 1 and restart the map to be warned if the map has no trigger_transition volumes. Set to 2 to see a dump of all entities & associated results during a transition.",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1785
    },
    "g_ragdoll_fadespeed": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4175
    },
    "g_ragdoll_important_maxcount": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1755
    },
    "g_ragdoll_lvfadespeed": {
        "data_type": "int32",
        "default_value": "100",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4176
    },
    "g_ragdoll_maxcount": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1751
    },
    "game_particle_manager_requeue_messages": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 4247
    },
    "gameevents_showeventlisteners": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show listening addition/removals",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 38
    },
    "gameevents_showevents": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Dump game events to console. (1 = Show Signaling, 2 = Show Posting also).",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 37
    },
    "gameinstructor_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Display in game lessons that teach new players.",
        "flags": "client, archive, release",
        "flagsRaw": 524424,
        "hasDefensiveFlag": false,
        "index": 4183
    },
    "gameinstructor_find_errors": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set to 1 and the game instructor will run EVERY scripted command to uncover errors.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4182
    },
    "gameinstructor_start_sound_cooldown": {
        "data_type": "float",
        "default_value": "4",
        "description": "Number of seconds forced between similar lesson start sounds.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4184
    },
    "gameinstructor_verbose": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set to 1 for standard debugging or 2 (in combo with gameinstructor_verbose_lesson) to show update actions.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4180
    },
    "gameinstructor_verbose_lesson": {
        "data_type": "string",
        "default_value": "",
        "description": "Display more verbose information for lessons have this name.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4181
    },
    "gc_secret_key": {
        "data_type": "string",
        "default_value": "",
        "description": "Secret key for authenticating with the GC\n",
        "flags": "devonly, game, prot",
        "flagsRaw": 38,
        "hasDefensiveFlag": true,
        "index": 1329
    },
    "gl_clear": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3900
    },
    "gl_clear_gray": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Clear the back buffer to gray every frame.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3902
    },
    "gl_clear_randomcolor": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Clear the back buffer to random colors every frame. Helps spot open seams in geometry.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3901
    },
    "glow_use_tolerance": {
        "data_type": "float",
        "default_value": "0.85",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 3989
    },
    "gpu_level": {
        "data_type": "int32",
        "default_value": "3",
        "description": "GPU Level - Default: High",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4042
    },
    "gpu_mem_level": {
        "data_type": "int32",
        "default_value": "2",
        "description": "Memory Level - Default: High",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4044
    },
    "hero_grid_selected_config": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2724
    },
    "hero_grid_selected_rank_tier": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2725
    },
    "host_force_frametime_to_equal_tick_interval": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 54
    },
    "host_force_max_frametime_to_tick_interval": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 55
    },
    "host_framerate": {
        "data_type": "float",
        "default_value": "0",
        "description": "Set to lock per-frame time elapse.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 56
    },
    "host_readconfig_ignore_userconfig": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Whether we should ignore the user config file for reading/writing.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 5
    },
    "host_timescale": {
        "data_type": "float",
        "default_value": "1",
        "description": "Prescale the clock by this amount.",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 57
    },
    "hostfile": {
        "data_type": "string",
        "default_value": "host.txt",
        "description": "The HOST file to load.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1829
    },
    "hostip": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Host game server ip",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 503
    },
    "hostname": {
        "data_type": "string",
        "default_value": "",
        "description": "Hostname for server.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 263
    },
    "hostname_in_client_status": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show server hostname in client status.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 264
    },
    "hostport": {
        "data_type": "int32",
        "default_value": "27015",
        "description": "Host game server port",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 176
    },
    "hud_fastswitch": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3930
    },
    "hud_max_minimap_distance": {
        "data_type": "float",
        "default_value": "2600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2425
    },
    "hud_river_vial_ui_expanded": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2466
    },
    "hud_sticky_item_name": {
        "data_type": "string",
        "default_value": "item_tpscroll",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3398
    },
    "hullivr_edge_merge_tan": {
        "data_type": "float",
        "default_value": "0.02",
        "description": "Should we try to straighten two faces connected to this edge? (tangent)",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 630
    },
    "hullivr_faceisland_merge_disp": {
        "data_type": "float",
        "default_value": "0",
        "description": "Should we straighten face island if the displacement is this much? (inches)",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 632
    },
    "hullivr_faceisland_merge_tan": {
        "data_type": "float",
        "default_value": "0.04",
        "description": "Should we try to straighten an island of faces deviating from their average normal (tangent)?",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 631
    },
    "hullivr_version": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 633
    },
    "ik_constraints_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 534
    },
    "ik_debug_all_chains_unique_color_per_chain": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 527
    },
    "ik_debug_ccd": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 546
    },
    "ik_debug_chain_to_filter_by": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 555
    },
    "ik_debug_constraints": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 531
    },
    "ik_debug_dogleg3bone": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 544
    },
    "ik_debug_dogleg3bone_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 545
    },
    "ik_debug_fabrik_backwards_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 536
    },
    "ik_debug_fabrik_backwards_iterations": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 538
    },
    "ik_debug_fabrik_forwards_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 537
    },
    "ik_debug_fabrik_forwards_iterations": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 539
    },
    "ik_debug_groundtraces": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show IK trace related details",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 516
    },
    "ik_debug_perlin_solver": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 553
    },
    "ik_debug_planetilt": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 528
    },
    "ik_debug_planetilt_axis_length": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 529
    },
    "ik_debug_targets": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 533
    },
    "ik_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable IK.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 535
    },
    "ik_fabrik_align_chain": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 540
    },
    "ik_fabrik_backwards_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 543
    },
    "ik_fabrik_forwards_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 542
    },
    "ik_fabrik_override_num_iterations": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 541
    },
    "ik_final_fixup_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 532
    },
    "ik_hinge_debug_bone_index": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 556
    },
    "ik_planetilt_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 530
    },
    "imgui_desired_state_override": {
        "data_type": "int32",
        "default_value": "0",
        "description": "if imgui should override the desired state",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1908
    },
    "imgui_domain": {
        "data_type": "int32",
        "default_value": "2",
        "description": "1 == client, 2 == server",
        "flags": "devonly, game, client, archive, replicated, cheat",
        "flagsRaw": 24718,
        "hasDefensiveFlag": false,
        "index": 1904
    },
    "imgui_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "if imgui should display",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1905
    },
    "imgui_enable_input": {
        "data_type": "bool",
        "default_value": "false",
        "description": "if imgui should consume input",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1907
    },
    "imgui_entity_browser_size": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, archive, replicated, cheat",
        "flagsRaw": 24718,
        "hasDefensiveFlag": false,
        "index": 1911
    },
    "imgui_show_command_tool": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Game/Show Command Tool",
        "flags": "devonly, game, client, archive, replicated, cheat, menubar_item",
        "flagsRaw": 1073294,
        "hasDefensiveFlag": false,
        "index": 1912
    },
    "imgui_show_entity_browser": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Game/Show Entity Browser",
        "flags": "devonly, game, client, archive, replicated, cheat, menubar_item",
        "flagsRaw": 1073294,
        "hasDefensiveFlag": false,
        "index": 1910
    },
    "imgui_show_entity_catalog": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Game/Show Entity Catalog",
        "flags": "devonly, game, client, archive, replicated, cheat, menubar_item",
        "flagsRaw": 1073294,
        "hasDefensiveFlag": false,
        "index": 1913
    },
    "imgui_show_entity_text_window": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Game/Show Entity Text History",
        "flags": "devonly, game, client, archive, replicated, cheat, menubar_item",
        "flagsRaw": 1073294,
        "hasDefensiveFlag": false,
        "index": 1914
    },
    "imgui_show_example_window": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Source2/Show Example Window",
        "flags": "devonly, game, client, archive, replicated, cheat, menubar_item",
        "flagsRaw": 1073294,
        "hasDefensiveFlag": false,
        "index": 1915
    },
    "imgui_show_overlay_nav_editor": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Game/Nav Editor",
        "flags": "devonly, game, cheat, menubar_item",
        "flagsRaw": 1064966,
        "hasDefensiveFlag": false,
        "index": 1813
    },
    "imgui_show_sound_window": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Source2/Show Example Window",
        "flags": "devonly, game, client, archive, replicated, cheat, menubar_item",
        "flagsRaw": 1073294,
        "hasDefensiveFlag": false,
        "index": 1916
    },
    "imgui_temp_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "if imgui should display temporarily",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1906
    },
    "in_button_double_press_window": {
        "data_type": "float",
        "default_value": "0.22",
        "description": "How short the time between presses needs to be for us to consider it a double-press",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1935
    },
    "in_spewbuttondelta": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Spew button deltas, 0 = off, 1 = server, 2 = client, 3 = both",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1938
    },
    "in_spewbuttonhold": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Spew button hold times, 0 = off, 1 = server, 2 = client, 3 = both",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1939
    },
    "in_spewent": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Which entity should we spew input for? (Useful for debugging bot input)",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1940
    },
    "in_spewinput": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Spew input, 0 = off, 1 = server, 2 = client, 3 = both",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1937
    },
    "ingame_predictions_allow_players_to_vote": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2596
    },
    "input_button_code_is_scan_code_scd": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Bind keys based on keyboard position instead of key name",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 156
    },
    "input_downimpulsevalue": {
        "data_type": "float",
        "default_value": "0.7",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 143
    },
    "input_filter_relative_analog_inputs": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 145
    },
    "input_forceuser": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Force user input to this split screen player.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 154
    },
    "input_upimpulsevalue": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 144
    },
    "instant_replay": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable instant replay recording.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 319
    },
    "instant_replay_history_limit": {
        "data_type": "int32",
        "default_value": "120",
        "description": "Maximum amount of minutes to save history (0 is unlimited).",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 320
    },
    "instant_replay_history_limit_low": {
        "data_type": "int32",
        "default_value": "10",
        "description": "Maximum amount of minutes to save history on low memory (32 bit) systems (0 is unlimited).",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 321
    },
    "ip": {
        "data_type": "string",
        "default_value": "",
        "description": "Overrides IP for multihomed hosts",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 502
    },
    "item_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1328
    },
    "iv_debugbone": {
        "data_type": "string",
        "default_value": "",
        "description": "Debug bone name for interpolation spew of CAnimationState.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 561
    },
    "iv_parallel_latch": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4148
    },
    "iv_parallel_restore": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4149
    },
    "iv_wrapped_parallel_latch": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4147
    },
    "joy_accel_filter": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4004
    },
    "joy_accelmax": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4001
    },
    "joy_accelscale": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4000
    },
    "joy_advanced": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4088
    },
    "joy_advaxisr": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4092
    },
    "joy_advaxisu": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4093
    },
    "joy_advaxisv": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4094
    },
    "joy_advaxisx": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4089
    },
    "joy_advaxisy": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4090
    },
    "joy_advaxisz": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4091
    },
    "joy_autosprint": {
        "data_type": "float",
        "default_value": "0",
        "description": "Automatically sprint when moving with an analog joystick",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4015
    },
    "joy_axisbutton_threshold": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "Analog axis range before a button press is registered.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 417
    },
    "joy_axisr_deadzone": {
        "data_type": "float",
        "default_value": "0.15",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 167
    },
    "joy_axisr_relative": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 161
    },
    "joy_axisu_deadzone": {
        "data_type": "float",
        "default_value": "0.15",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 168
    },
    "joy_axisu_relative": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 162
    },
    "joy_axisv_deadzone": {
        "data_type": "float",
        "default_value": "0.15",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 169
    },
    "joy_axisv_relative": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 163
    },
    "joy_axisx_deadzone": {
        "data_type": "float",
        "default_value": "0.15",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 164
    },
    "joy_axisx_relative": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 158
    },
    "joy_axisy_deadzone": {
        "data_type": "float",
        "default_value": "0.15",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 165
    },
    "joy_axisy_relative": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 159
    },
    "joy_axisz_deadzone": {
        "data_type": "float",
        "default_value": "0.15",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 166
    },
    "joy_axisz_relative": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 160
    },
    "joy_circle_correct_mode": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4008
    },
    "joy_circle_correct_mode_vehicle": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4009
    },
    "joy_display_input": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4019
    },
    "joy_forward_sensitivity": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4013
    },
    "joy_lowend": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3998
    },
    "joy_lowmap": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3999
    },
    "joy_movement_stick": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Which stick controls movement (0 is left stick)",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4098
    },
    "joy_name": {
        "data_type": "string",
        "default_value": "joystick",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4087
    },
    "joy_pegged": {
        "data_type": "float",
        "default_value": "0.75",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4002
    },
    "joy_pitch_sensitivity": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4011
    },
    "joy_pitchsensitivity": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4096
    },
    "joy_response_look": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4005
    },
    "joy_response_move": {
        "data_type": "int32",
        "default_value": "9",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4006
    },
    "joy_response_move_vehicle": {
        "data_type": "int32",
        "default_value": "6",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4007
    },
    "joy_sensitive_step0": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3995
    },
    "joy_sensitive_step1": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3996
    },
    "joy_sensitive_step2": {
        "data_type": "float",
        "default_value": "0.9",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3997
    },
    "joy_side_sensitivity": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4014
    },
    "joy_sidesensitivity": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4095
    },
    "joy_vehicle_turn_lowend": {
        "data_type": "float",
        "default_value": "0.7",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3993
    },
    "joy_vehicle_turn_lowmap": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3994
    },
    "joy_virtual_peg": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4003
    },
    "joy_wingmanwarrior_centerhack": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Wingman warrior centering hack.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 415
    },
    "joy_wingmanwarrior_turnhack": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Wingman warrior hack related to turn axes.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 416
    },
    "joy_xcontroller_cfg_loaded": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If 0, the 360controller.cfg file will be executed on startup & option changes.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4099
    },
    "joy_yaw_sensitivity": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4012
    },
    "joy_yawsensitivity": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4097
    },
    "joystick": {
        "data_type": "bool",
        "default_value": "false",
        "description": "True if the joystick is enabled, false otherwise.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4060
    },
    "jpeg_quality": {
        "data_type": "int32",
        "default_value": "90",
        "description": "Set jpeg screenshot quality. [1..100]",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 183
    },
    "labelled_debug_helper_arc_segments": {
        "data_type": "int32",
        "default_value": "20",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 549
    },
    "labelled_debug_helper_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 550
    },
    "labelled_debug_helper_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 551
    },
    "labelled_debug_helper_show_position": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 548
    },
    "labelled_debug_helper_show_text": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 547
    },
    "labelled_debug_helper_skeleton_show_bone_names": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 552
    },
    "language_fake_unsupported_primary": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2852
    },
    "lb_allow_time_sliced_shadow_map_rendering": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Allow time-sliced shadow buffer rendering when enabled via gameinfo.gi",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1018
    },
    "lb_barnlight_shadowmap_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "Scale for computed barnlight shadowmap size",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 1016
    },
    "lb_bin_slices": {
        "data_type": "int32",
        "default_value": "8192",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 991
    },
    "lb_convert_to_barn_lights_falloff_match_point": {
        "data_type": "float",
        "default_value": "0.15",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1019
    },
    "lb_csm_cascade_size_override": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Override width/height of individual cascades in the CSM",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 994
    },
    "lb_csm_cross_fade_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "Override CSM cross fade amount",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1000
    },
    "lb_csm_distance_fade_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "Override CSM distance fade",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1001
    },
    "lb_csm_draw_alpha_tested": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 997
    },
    "lb_csm_draw_translucent": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 998
    },
    "lb_csm_fov_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 999
    },
    "lb_csm_override_staticgeo_cascades": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Override Cascades that will render static objects with lb_csm_override_staticgeo_cascades_value",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1002
    },
    "lb_csm_override_staticgeo_cascades_value": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "If lb_csm_override_staticgeo_cascades, override value used to determine which cascades render static objects",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1003
    },
    "lb_csm_receiver_plane_depth_bias": {
        "data_type": "float",
        "default_value": "1.526e-05",
        "description": "Shader depth bias applied to shadow receiver (Note this conflicts with renderstate depth bias, both now default to 0)",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 995
    },
    "lb_csm_receiver_plane_depth_bias_transmissive_backface": {
        "data_type": "float",
        "default_value": "0.00015",
        "description": "Depth bias applied to shadow receiver for transmissive backface geo (based on renderstate depthbias being 0)",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 996
    },
    "lb_cubemap_normalization_max": {
        "data_type": "float",
        "default_value": "32",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1020
    },
    "lb_cubemap_normalization_roughness_begin": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1021
    },
    "lb_debug_light_bounds": {
        "data_type": "bool",
        "default_value": "false",
        "description": "SceneSystem/LightBinner/Debug Light Bounds",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 981
    },
    "lb_debug_shadow_atlas": {
        "data_type": "bool",
        "default_value": "false",
        "description": "SceneSystem/LightBinner/Debug Dynamic Shadow Atlas",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 982
    },
    "lb_debug_silhouette": {
        "data_type": "int32",
        "default_value": "0",
        "description": "SceneSystem/LightBinner/Debug Silhouettes",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 978
    },
    "lb_debug_tiles": {
        "data_type": "int32",
        "default_value": "0",
        "description": "SceneSystem/LightBinner/Debug Tiles",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 979
    },
    "lb_debug_visualize_shadowed_lights": {
        "data_type": "bool",
        "default_value": "false",
        "description": "SceneSystem/LightBinner/Debug Visualize Shadowed Lights",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 980
    },
    "lb_dynamic_shadow_penumbra": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Adjust shadow penumbra based on light size",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1005
    },
    "lb_dynamic_shadow_resolution": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Dynamically adjust shadow resolution",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1006
    },
    "lb_dynamic_shadow_resolution_base": {
        "data_type": "float",
        "default_value": "1024",
        "description": "Base resolution for dynamic shadowmap sizing.  Shadowmap size of a screen sized light",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1007
    },
    "lb_dynamic_shadow_resolution_delay": {
        "data_type": "float",
        "default_value": "0.85",
        "description": "Update delay for shadow size",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1010
    },
    "lb_dynamic_shadow_resolution_hysteresis": {
        "data_type": "float",
        "default_value": "0.33",
        "description": "Update hysteresis for shadow size",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1009
    },
    "lb_dynamic_shadow_resolution_quantization": {
        "data_type": "uint32",
        "default_value": "64",
        "description": "Quantization of dynamically computed shadow size",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1008
    },
    "lb_enable_baked_shadows": {
        "data_type": "bool",
        "default_value": "true",
        "description": "SceneSystem/LightBinner/Enable Baked Shadows",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 986
    },
    "lb_enable_binning": {
        "data_type": "bool",
        "default_value": "true",
        "description": "SceneSystem/LightBinner/Enable Binning",
        "flags": "devonly, menubar_item",
        "flagsRaw": 1048578,
        "hasDefensiveFlag": true,
        "index": 989
    },
    "lb_enable_dynamic_lights": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Allows rendering dynamic lights",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 984
    },
    "lb_enable_envmaps": {
        "data_type": "bool",
        "default_value": "true",
        "description": "SceneSystem/LightBinner/Enable EnvMaps",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 975
    },
    "lb_enable_lights": {
        "data_type": "bool",
        "default_value": "true",
        "description": "SceneSystem/LightBinner/Enable Lights",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 974
    },
    "lb_enable_shadow_casting": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Allow stationary/dynamic lights to cast shadows.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 985
    },
    "lb_enable_stationary_lights": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Allows rendering stationary/mixed lights",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 983
    },
    "lb_enable_sunlight": {
        "data_type": "bool",
        "default_value": "true",
        "description": "SceneSystem/LightBinner/Enable Sunlight",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 1012
    },
    "lb_low_quality_shader_fade_region_rescale": {
        "data_type": "float",
        "default_value": "0",
        "description": "For envmaps in low quality shader mode, how much of the fade region to scale the envmap box by.",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 1013
    },
    "lb_max_visible_barn_lights_override": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Override maximum visible barn lights",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 1015
    },
    "lb_max_visible_envmaps_override": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Override maximum visible envmaps",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 1014
    },
    "lb_mixed_shadows": {
        "data_type": "bool",
        "default_value": "true",
        "description": "SceneSystem/LightBinner/Enable Mixed Shadows",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 987
    },
    "lb_shadow_map_culling": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1017
    },
    "lb_shadow_texture_height_override": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Override height of shadow atlas texture",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 993
    },
    "lb_shadow_texture_width_override": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Override width of shadow atlas texture",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 992
    },
    "lb_show_light_fog_clipmap_cb_cost": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show cost of lights in fog clipmap constant buffer. yellow = 1 cost, red = 6 cost",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 988
    },
    "lb_sun_csm_size_cull_threshold_texels": {
        "data_type": "float",
        "default_value": "10",
        "description": "Size, in texels, where we will cull an object in the shadowmap",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1004
    },
    "lb_tile_pixels": {
        "data_type": "int32",
        "default_value": "8",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 990
    },
    "lb_timesliced_shadows_dynamic_size": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1011
    },
    "lb_use_ellipsoid_bounds": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 977
    },
    "lb_use_illumination_silhouette": {
        "data_type": "bool",
        "default_value": "true",
        "description": "SceneSystem/LightBinner/Use Illumination Bounds",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 976
    },
    "leaderboards_cache_duration": {
        "data_type": "int32",
        "default_value": "600",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4312
    },
    "legacy_models_supported": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Whether to support legacy (pre-modeldoc) models",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 648
    },
    "lightquery_debug_direct_lighting": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2316
    },
    "lightquery_debug_indirect_lighting": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2317
    },
    "loadout_test_activity_modifiers": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3786
    },
    "locator_topdown_style": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Topdown games set this to handle distance and offscreen location differently.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3992
    },
    "logic_npc_counter_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, replicated, cheat",
        "flagsRaw": 24580,
        "hasDefensiveFlag": false,
        "index": 1841
    },
    "lservercfgfile": {
        "data_type": "string",
        "default_value": "listenserver.cfg",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1817
    },
    "lua_assert_on_error": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 480
    },
    "lua_shipping_assert_on_error": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 481
    },
    "m_pitch": {
        "data_type": "float",
        "default_value": "0.022",
        "description": "Mouse pitch factor.",
        "flags": "client, archive, userinfo, per_user",
        "flagsRaw": 33416,
        "hasDefensiveFlag": false,
        "index": 4018
    },
    "m_yaw": {
        "data_type": "float",
        "default_value": "0.022",
        "description": "Mouse yaw factor.",
        "flags": "client, archive, userinfo, per_user",
        "flagsRaw": 33416,
        "hasDefensiveFlag": false,
        "index": 4017
    },
    "markup_volume_ref_cone_angle": {
        "data_type": "float",
        "default_value": "135",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1842
    },
    "mat_assert_on_error_shader_use": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 472
    },
    "mat_colcorrection_disableentities": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Disable map color-correction entities",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4177
    },
    "mat_colcorrection_editor": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4106
    },
    "mat_colcorrection_forceentitiesclientside": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Forces color correction entities to be updated on the client",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4178
    },
    "mat_colorcorrection": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 479
    },
    "mat_depthbias_shadowmap": {
        "data_type": "float",
        "default_value": "0.0005",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4226
    },
    "mat_fullbright": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Debug rendering modes",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 81
    },
    "mat_hide_error_shader": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 473
    },
    "mat_lpv_luxels": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 85
    },
    "mat_luxels": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 83
    },
    "mat_max_lighting_complexity": {
        "data_type": "float",
        "default_value": "8",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 82
    },
    "mat_overdraw": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Visualize overdraw",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 2
    },
    "mat_overdraw_color": {
        "data_type": "Vector3",
        "default_value": "0.075 0.15 0.3",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 477
    },
    "mat_shader_cache": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 470
    },
    "mat_shading_complexity": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Visualize shading complexity",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 103
    },
    "mat_shading_complexity_color": {
        "data_type": "Vector3",
        "default_value": "1 0.5 0.25",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 474
    },
    "mat_shading_complexity_max_instruction_count": {
        "data_type": "float",
        "default_value": "1024",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 475
    },
    "mat_shading_complexity_max_register_count": {
        "data_type": "float",
        "default_value": "128",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 476
    },
    "mat_shadowmap_luxels": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 84
    },
    "mat_show_distance_field": {
        "data_type": "int32",
        "default_value": "0",
        "description": "0=Off, 1=Visualize trace from camera, 2=Visualize occlusion",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 91
    },
    "mat_slopescaledepthbias_shadowmap": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4225
    },
    "mat_tonemap_bloom_scale": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 817
    },
    "mat_tonemap_bloom_start_value": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 816
    },
    "mat_tonemap_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 813
    },
    "mat_tonemap_force_accelerate_exposure_down": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 809
    },
    "mat_tonemap_force_average_lum_min": {
        "data_type": "float",
        "default_value": "-1",
        "description": "Override. Old default was 3.0",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 807
    },
    "mat_tonemap_force_log_lum_max": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 815
    },
    "mat_tonemap_force_log_lum_min": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 814
    },
    "mat_tonemap_force_max": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 928
    },
    "mat_tonemap_force_min": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 927
    },
    "mat_tonemap_force_percent_bright_pixels": {
        "data_type": "float",
        "default_value": "-1",
        "description": "Override. Old value was 1.0",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 930
    },
    "mat_tonemap_force_percent_target": {
        "data_type": "float",
        "default_value": "-1",
        "description": "Override. Old default was 45.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 929
    },
    "mat_tonemap_force_rate": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 808
    },
    "mat_tonemap_force_scale": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 811
    },
    "mat_tonemap_force_use_alpha": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 810
    },
    "mat_tonemap_uncap_exposure": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 812
    },
    "mat_viewportscale": {
        "data_type": "float",
        "default_value": "1",
        "description": "Scale down the main viewport (to reduce GPU impact on CPU profiling)",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3897
    },
    "mat_warn_bad_modes": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 471
    },
    "mat_wireframe": {
        "data_type": "int32",
        "default_value": "0",
        "description": "0=Off, 1=Surface Wireframe, 2=Transparent Wireframe",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 80
    },
    "mem_level": {
        "data_type": "int32",
        "default_value": "2",
        "description": "Memory Level - Default: High",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4043
    },
    "mem_test_each_frame": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Run heap check at end of every frame",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 273
    },
    "mem_test_every_n_seconds": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Run heap check at a specified interval",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 274
    },
    "mem_test_quiet": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Don't print stats when memtesting",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 272
    },
    "mesh_calculate_curvature_smooth_invert": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 558
    },
    "mesh_calculate_curvature_smooth_pass_count": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 557
    },
    "mesh_calculate_curvature_smooth_weight": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 559
    },
    "mic_listen_while_nonfocused": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enables the ability for the mic to remain open if the window loses focus such as when a caster tabs out to adjust settings",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4205
    },
    "midi_auto_connect_port": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "On init, attempt to connect to the device on this port",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3122
    },
    "mobile_fps_increase_during_charging": {
        "data_type": "bool",
        "default_value": "false",
        "description": "MOBILE_FPS_CONTROL: If true we increase framerate limit while charging",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 29
    },
    "mobile_fps_increase_during_hfr_animations": {
        "data_type": "bool",
        "default_value": "true",
        "description": "MOBILE_FPS_CONTROL: If true we increase framerate limit during HFR-tagged animations and transitions.",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 30
    },
    "mobile_fps_increase_during_touch": {
        "data_type": "bool",
        "default_value": "true",
        "description": "MOBILE_FPS_CONTROL: If true we increase framerate limit during touch",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 28
    },
    "mobile_fps_limit": {
        "data_type": "float",
        "default_value": "30",
        "description": "MOBILE_FPS_CONTROL: Mobile FPS limit - 15, 30, 60",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 27
    },
    "model_default_preview_sequence_name": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "game, client, archive, replicated",
        "flagsRaw": 8332,
        "hasDefensiveFlag": false,
        "index": 554
    },
    "motdfile": {
        "data_type": "string",
        "default_value": "motd.txt",
        "description": "The MOTD file to load.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1828
    },
    "mouse_disableinput": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set to disable mouse input",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 155
    },
    "mouse_inverty": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, userinfo",
        "flagsRaw": 648,
        "hasDefensiveFlag": false,
        "index": 4010
    },
    "mp_allowspectators": {
        "data_type": "bool",
        "default_value": "true",
        "description": "toggles whether the server allows spectator mode or not",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1946
    },
    "mp_fadetoblack": {
        "data_type": "bool",
        "default_value": "false",
        "description": "fade a player's screen to black when he dies",
        "flags": "devonly, game, client, notify, replicated",
        "flagsRaw": 8462,
        "hasDefensiveFlag": true,
        "index": 1947
    },
    "mp_forcecamera": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Restricts spectator modes for dead players",
        "flags": "game, client, replicated, release",
        "flagsRaw": 2629644,
        "hasDefensiveFlag": false,
        "index": 1945
    },
    "mp_forcerespawn": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, notify",
        "flagsRaw": 262,
        "hasDefensiveFlag": true,
        "index": 1819
    },
    "mp_friendlyfire": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Allows team members to injure other members of their team",
        "flags": "game, client, notify, replicated, release",
        "flagsRaw": 2629900,
        "hasDefensiveFlag": false,
        "index": 1833
    },
    "mp_restartgame": {
        "data_type": "int32",
        "default_value": "0",
        "description": "If non-zero, game will restart in the specified number of seconds",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1873
    },
    "mp_teamplay": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, notify",
        "flagsRaw": 262,
        "hasDefensiveFlag": true,
        "index": 1818
    },
    "multigpu_skip_semaphores": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 445
    },
    "multigpu_skip_transfers": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 444
    },
    "multiunit_frame_tall": {
        "data_type": "int32",
        "default_value": "44",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3773
    },
    "multiunit_frame_tall_three_col": {
        "data_type": "int32",
        "default_value": "66",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3783
    },
    "multiunit_frame_tall_two_col": {
        "data_type": "int32",
        "default_value": "104",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3779
    },
    "multiunit_frame_wide": {
        "data_type": "int32",
        "default_value": "64",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3772
    },
    "multiunit_frame_wide_three_col": {
        "data_type": "int32",
        "default_value": "84",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3782
    },
    "multiunit_frame_wide_two_col": {
        "data_type": "int32",
        "default_value": "130",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3778
    },
    "multiunit_x_gap": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3775
    },
    "multiunit_x_gap_three_col": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3784
    },
    "multiunit_x_gap_two_col": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3780
    },
    "multiunit_x_start": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3774
    },
    "multiunit_y_gap": {
        "data_type": "int32",
        "default_value": "15",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3777
    },
    "multiunit_y_gap_three_col": {
        "data_type": "int32",
        "default_value": "17",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3785
    },
    "multiunit_y_gap_two_col": {
        "data_type": "int32",
        "default_value": "15",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3781
    },
    "multiunit_y_start": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3776
    },
    "muzzle_flash_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3981
    },
    "name": {
        "data_type": "string",
        "default_value": "unnamed",
        "description": "",
        "flags": "archive, per_user",
        "flagsRaw": 32896,
        "hasDefensiveFlag": false,
        "index": 271
    },
    "nav_avoid_obstacles": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1260
    },
    "nav_bfs_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1136
    },
    "nav_corner_adjust_adjacent": {
        "data_type": "float",
        "default_value": "18",
        "description": "radius used to raise/lower corners in nearby areas when raising/lowering corners.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4534
    },
    "nav_curve_alt": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1123
    },
    "nav_curve_iter": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1118
    },
    "nav_curve_lock": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1122
    },
    "nav_curve_max_step": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1120
    },
    "nav_curve_set": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1121
    },
    "nav_curve_step": {
        "data_type": "float",
        "default_value": "0.02",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1119
    },
    "nav_debug_blocked": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1257
    },
    "nav_drag_selection_volume_zmax_offset": {
        "data_type": "int32",
        "default_value": "32",
        "description": "The offset of the nav drag volume top from center",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1377
    },
    "nav_drag_selection_volume_zmin_offset": {
        "data_type": "int32",
        "default_value": "32",
        "description": "The offset of the nav drag volume bottom from center",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1378
    },
    "nav_draw_area_connections": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1335
    },
    "nav_draw_area_filled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1331
    },
    "nav_draw_area_gravity": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1346
    },
    "nav_draw_area_ground": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1345
    },
    "nav_draw_area_hull_support": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1334
    },
    "nav_draw_area_ids": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1333
    },
    "nav_draw_area_inset_margin": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1339
    },
    "nav_draw_area_normal": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1344
    },
    "nav_draw_area_should_be_destroyed": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1340
    },
    "nav_draw_area_split_by_nav_link_mgr": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1342
    },
    "nav_draw_area_split_by_obstacle_mgr": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1341
    },
    "nav_draw_area_ztest": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1332
    },
    "nav_draw_attribute_dynamic": {
        "data_type": "string",
        "default_value": "",
        "description": "Draw all nav areas with this dynamic attribute",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1363
    },
    "nav_draw_attribute_game": {
        "data_type": "string",
        "default_value": "",
        "description": "Draw all nav areas with this game attribute",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1362
    },
    "nav_draw_blocked": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1336
    },
    "nav_draw_blocked_connections": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1337
    },
    "nav_draw_connected_area_radius": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1338
    },
    "nav_draw_externally_created": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1343
    },
    "nav_draw_jump_links": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1352
    },
    "nav_draw_limit": {
        "data_type": "int32",
        "default_value": "300",
        "description": "The maximum number of areas to draw in edit mode",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1376
    },
    "nav_draw_link_alignment": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1365
    },
    "nav_draw_links": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1364
    },
    "nav_draw_markup": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1354
    },
    "nav_draw_markup_offset": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1355
    },
    "nav_draw_mesh": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1350
    },
    "nav_draw_mesh_grid": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Draw the mesh's spatial grid structure around the edit cursor position.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1353
    },
    "nav_draw_mesh_offset": {
        "data_type": "float",
        "default_value": "1",
        "description": "Vertical offset for drawing the mesh (useful for flat planes where the mesh is often a fixed offset from the physical ground",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1351
    },
    "nav_draw_space_cells": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1361
    },
    "nav_draw_space_fly": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1357
    },
    "nav_draw_space_neighbors": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1359
    },
    "nav_draw_space_portals": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1360
    },
    "nav_draw_space_radius": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1358
    },
    "nav_draw_space_swim": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1356
    },
    "nav_edit": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set to one to interactively edit the Navigation Mesh. Set to zero to leave edit mode.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1347
    },
    "nav_edit_validate": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Validate navmesh structures.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1348
    },
    "nav_gen_add_jumps": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4519
    },
    "nav_gen_agent_radius_buffer": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "Buffer to add to agent radius before passing to nav gen",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4528
    },
    "nav_gen_clip_polys_to_clearance": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4525
    },
    "nav_gen_clip_polys_to_clearance_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4526
    },
    "nav_gen_connect_allow_multiple": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4518
    },
    "nav_gen_connect_angle": {
        "data_type": "float",
        "default_value": "0.75",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4515
    },
    "nav_gen_connect_angle_ignore_z": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4516
    },
    "nav_gen_connect_dist_a": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4512
    },
    "nav_gen_connect_dist_b": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4513
    },
    "nav_gen_connect_dist_z_mult": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4514
    },
    "nav_gen_connect_overlap": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4517
    },
    "nav_gen_degen_limit": {
        "data_type": "float",
        "default_value": "0.001",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4500
    },
    "nav_gen_false": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Always false",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4490
    },
    "nav_gen_island_removal": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4510
    },
    "nav_gen_island_removal_all_hulls": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4511
    },
    "nav_gen_join_nonzup": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4527
    },
    "nav_gen_jump_connection_min_overlap_ratio": {
        "data_type": "float",
        "default_value": "1",
        "description": "Minimum edge overlap required for jump connection consideration as a percentage of agent radius",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4529
    },
    "nav_gen_markup_split_expand": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4504
    },
    "nav_gen_markup_split_tol_base": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4501
    },
    "nav_gen_markup_split_tol_nonav": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4503
    },
    "nav_gen_markup_split_tol_nonentity": {
        "data_type": "float",
        "default_value": "8",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4502
    },
    "nav_gen_match_ground": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4491
    },
    "nav_gen_max_bottleneck_width": {
        "data_type": "float",
        "default_value": "128",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4509
    },
    "nav_gen_max_bottleneck_width_do_clip": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4508
    },
    "nav_gen_max_edge_len": {
        "data_type": "float",
        "default_value": "512",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4506
    },
    "nav_gen_max_edge_len_do_clip": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4505
    },
    "nav_gen_max_edge_len_split_tol": {
        "data_type": "float",
        "default_value": "24",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4507
    },
    "nav_gen_opt_to_quads": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4492
    },
    "nav_gen_opt_to_quads_angle_limit": {
        "data_type": "float",
        "default_value": "8",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4493
    },
    "nav_gen_opt_to_quads_num_steps": {
        "data_type": "int32",
        "default_value": "6",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4495
    },
    "nav_gen_opt_to_quads_planar_deviation_limit": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4494
    },
    "nav_gen_opt_to_quads_se_limit_end": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4497
    },
    "nav_gen_opt_to_quads_se_limit_start": {
        "data_type": "float",
        "default_value": "1e-05",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4496
    },
    "nav_gen_opt_to_quads_weld_limit_end": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4499
    },
    "nav_gen_opt_to_quads_weld_limit_start": {
        "data_type": "float",
        "default_value": "1e-07",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4498
    },
    "nav_gen_remove_vertical_polys": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4521
    },
    "nav_gen_split_boundary_polys": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4522
    },
    "nav_gen_split_multi_connection_polys": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4523
    },
    "nav_gen_split_multi_connection_polys_tol": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4524
    },
    "nav_gen_true": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Always true",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4489
    },
    "nav_gen_vertical_limit": {
        "data_type": "float",
        "default_value": "88",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4520
    },
    "nav_genrt_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1250
    },
    "nav_genrt_no_splice": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1248
    },
    "nav_genrt_no_split": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1247
    },
    "nav_genrt_step": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1249
    },
    "nav_max_vis_delta_list_length": {
        "data_type": "int32",
        "default_value": "64",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4533
    },
    "nav_obstacle_genrt": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1258
    },
    "nav_obstacle_validate": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1251
    },
    "nav_obstruction_draw": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1252
    },
    "nav_obstruction_draw_change": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1259
    },
    "nav_obstruction_draw_dist": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1253
    },
    "nav_obstruction_draw_island": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1254
    },
    "nav_obstruction_draw_island_hull": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1255
    },
    "nav_obstruction_draw_movefail_blocking": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1256
    },
    "nav_path_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1279
    },
    "nav_path_debug_compute_with_open_goal": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1270
    },
    "nav_path_draw_areas": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1263
    },
    "nav_path_draw_arrow": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1261
    },
    "nav_path_draw_climb_segments": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1268
    },
    "nav_path_draw_connected_areas": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1264
    },
    "nav_path_draw_ground_segments": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1265
    },
    "nav_path_draw_jump_segments": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1267
    },
    "nav_path_draw_ladder_segments": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1266
    },
    "nav_path_draw_link_segments": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1269
    },
    "nav_path_draw_tick": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1262
    },
    "nav_path_fixup_climb_up_segments": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1276
    },
    "nav_path_fixup_gap_segments": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1271
    },
    "nav_path_jump_process_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1278
    },
    "nav_path_optimize": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1274
    },
    "nav_path_optimize_portals": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1275
    },
    "nav_path_optimizer_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1277
    },
    "nav_path_record_draw_last_fail": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1273
    },
    "nav_path_record_enable": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1272
    },
    "nav_pathfind_debug_log": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1128
    },
    "nav_pathfind_draw": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1129
    },
    "nav_pathfind_draw_blocked": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1130
    },
    "nav_pathfind_draw_costs": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1132
    },
    "nav_pathfind_draw_fail": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1131
    },
    "nav_pathfind_draw_total_costs": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1133
    },
    "nav_pathfind_inadmissable_heuristic_factor": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1134
    },
    "nav_pathfind_multithread": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1093
    },
    "nav_search_lattice_initial_scale": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1138
    },
    "nav_search_lattice_progressive_scale": {
        "data_type": "float",
        "default_value": "1.7",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1137
    },
    "nav_select_allow_blocked": {
        "data_type": "bool",
        "default_value": "true",
        "description": "When selecting an area under nav_edit, allow area marked as blocked.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1373
    },
    "nav_select_area_id": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Select nav area with matching ID.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1374
    },
    "nav_select_block_id": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Select nav space block with matching ID.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1375
    },
    "nav_select_hull": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Restrict area selection to areas that can support a hull of the given category",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1372
    },
    "nav_show_area_connections": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show connections to selected area when true",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1369
    },
    "nav_show_area_info_font": {
        "data_type": "string",
        "default_value": "Consolas",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1366
    },
    "nav_show_area_info_font_size": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1367
    },
    "nav_show_area_info_font_voffset": {
        "data_type": "float",
        "default_value": "-11",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1368
    },
    "nav_show_area_verts": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show area vertex positions",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1370
    },
    "nav_show_area_water_info": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1371
    },
    "nav_show_potentially_visible": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Show areas that are potentially visible from the current nav area",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4535
    },
    "nav_smooth_calc_z": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1283
    },
    "nav_smooth_constrain_results": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1284
    },
    "nav_smooth_constrain_results_relax": {
        "data_type": "float",
        "default_value": "0.006",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1285
    },
    "nav_smooth_constrain_spring": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1286
    },
    "nav_smooth_constrain_spring_relax": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1287
    },
    "nav_smooth_draw_accel": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1101
    },
    "nav_smooth_draw_boundary": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1097
    },
    "nav_smooth_draw_calc": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1096
    },
    "nav_smooth_draw_constraint_spline": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1098
    },
    "nav_smooth_draw_constraint_spring": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1099
    },
    "nav_smooth_draw_speed": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1100
    },
    "nav_smooth_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1280
    },
    "nav_smooth_relax": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1116
    },
    "nav_smooth_relax_use_timesteps": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1117
    },
    "nav_smooth_separating_dist_override": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1282
    },
    "nav_smooth_spring_const_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1102
    },
    "nav_smooth_spring_factor_deriv": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1107
    },
    "nav_smooth_spring_factor_dist": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1106
    },
    "nav_smooth_spring_factor_speed": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1108
    },
    "nav_smooth_spring_forward_dist_base": {
        "data_type": "float",
        "default_value": "50",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1104
    },
    "nav_smooth_spring_forward_dist_time_limit": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1105
    },
    "nav_smooth_spring_max_dist": {
        "data_type": "float",
        "default_value": "36",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1109
    },
    "nav_smooth_spring_tension_max_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1103
    },
    "nav_smooth_spring_timestep_factor_accel": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1113
    },
    "nav_smooth_spring_timestep_factor_speed": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1112
    },
    "nav_smooth_spring_timestep_max": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1111
    },
    "nav_smooth_spring_timestep_min": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1110
    },
    "nav_smooth_spring_yaw_rotation_speed": {
        "data_type": "float",
        "default_value": "50",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1114
    },
    "nav_smooth_spring_yaw_threshold": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1115
    },
    "nav_smooth_use_opt": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1281
    },
    "nav_space_select_dist": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1349
    },
    "nav_split_place_on_ground": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If true, nav areas will be placed flush with the ground when split.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4532
    },
    "nav_split_show_line": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show the free split line.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1379
    },
    "nav_test_area_gravity": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1241
    },
    "nav_test_bfs_lattice_dist_0": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1201
    },
    "nav_test_bfs_lattice_dist_1": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1203
    },
    "nav_test_bfs_lattice_dist_2": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1205
    },
    "nav_test_bfs_lattice_hex": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Demonstrates searching hexagonal lattice over nav mesh.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1210
    },
    "nav_test_bfs_lattice_mark": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1207
    },
    "nav_test_bfs_lattice_simple": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1209
    },
    "nav_test_bfs_lattice_spacing_0": {
        "data_type": "float",
        "default_value": "24",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1202
    },
    "nav_test_bfs_lattice_spacing_1": {
        "data_type": "float",
        "default_value": "48",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1204
    },
    "nav_test_bfs_lattice_spacing_2": {
        "data_type": "float",
        "default_value": "96",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1206
    },
    "nav_test_bfs_simple": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1208
    },
    "nav_test_boundary_zone_circle": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1194
    },
    "nav_test_boundary_zone_force": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1199
    },
    "nav_test_boundary_zone_grid_dim": {
        "data_type": "float",
        "default_value": "90",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1200
    },
    "nav_test_boundary_zone_path": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1195
    },
    "nav_test_boundary_zone_rays": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1196
    },
    "nav_test_boundary_zone_rays_margin": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1198
    },
    "nav_test_boundary_zone_rays_random": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1197
    },
    "nav_test_curve_opt": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1235
    },
    "nav_test_detour": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1211
    },
    "nav_test_find_nearest": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Calculate the nearest point on the navmesh to the trace point.  Uses selection from nav_select_hull.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1220
    },
    "nav_test_find_nearest_clear": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Calculate the nearest point on the navmesh to the trace point.  Uses selection from nav_select_hull.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1221
    },
    "nav_test_find_random_connected": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Demonstrates finding random points that are connected in the nav mesh to the start point.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1229
    },
    "nav_test_find_random_connected_dist_max": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1231
    },
    "nav_test_find_random_connected_dist_min": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1230
    },
    "nav_test_find_z": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1222
    },
    "nav_test_force_npc_repath": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1236
    },
    "nav_test_genrt": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1232
    },
    "nav_test_genrt_place": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1233
    },
    "nav_test_getareaoverlapping_gravity": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1243
    },
    "nav_test_getnearestnav_gravity": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1242
    },
    "nav_test_multi_connection": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1223
    },
    "nav_test_npc_area": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1240
    },
    "nav_test_npc_collision": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1237
    },
    "nav_test_npc_collision_range": {
        "data_type": "float",
        "default_value": "250",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1238
    },
    "nav_test_npc_collision_show_geometry": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1239
    },
    "nav_test_path": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Calculate and draw a path from player/camera position to the test position.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1380
    },
    "nav_test_path_expansion_search": {
        "data_type": "float",
        "default_value": "0",
        "description": "Extend nav_test_path by doing an expansion search on that path.  Convar value defines dist.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1188
    },
    "nav_test_path_lock_goal": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Lock the pathfinding goal to the current intersection point.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1385
    },
    "nav_test_path_lock_start": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Lock the pathfinding start to the current intersection point.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1384
    },
    "nav_test_path_move": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1189
    },
    "nav_test_path_opt": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable path optimization for nav_edit_path paths.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1386
    },
    "nav_test_path_opt_transitions": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1387
    },
    "nav_test_path_return": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Calculate a return path from cursor position to the path calculated by nav_test_path.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1190
    },
    "nav_test_path_space": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Should nav_test_path test 3d navigation?  1 = space to space, 2 = multi-modal space/ground",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1381
    },
    "nav_test_path_space_fly": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Test flight paths",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1382
    },
    "nav_test_path_space_swim": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Test swim paths",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1383
    },
    "nav_test_pos_name": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1244
    },
    "nav_test_pos_place": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1245
    },
    "nav_test_ray_space": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1192
    },
    "nav_test_ray_space_scatter": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1193
    },
    "nav_test_rays": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1191
    },
    "nav_test_smooth": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1212
    },
    "nav_test_smooth_extern_push": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1219
    },
    "nav_test_smooth_in_speed": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1214
    },
    "nav_test_smooth_in_yaw": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1213
    },
    "nav_test_smooth_path_speed": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1215
    },
    "nav_test_smooth_separating_dist": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1216
    },
    "nav_test_smooth_spring_const": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1217
    },
    "nav_test_smooth_spring_tension_max": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1218
    },
    "nav_test_spline": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1234
    },
    "nav_test_split_obstacle": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1224
    },
    "nav_test_split_obstacle_dirty": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1227
    },
    "nav_test_split_obstacle_leave": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1228
    },
    "nav_test_split_obstacle_size": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1225
    },
    "nav_test_split_obstacle_update_pos": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1226
    },
    "nav_validate": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Level of validation for nav system.  Higher will be slower.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 4536
    },
    "nav_volume_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Draw or print debug information about nav volume queries.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1092
    },
    "navnetsolve_draw_tri": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1162
    },
    "navspace_create_water_smooth_connections": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1141
    },
    "navspace_create_water_transition_connections": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1140
    },
    "navspace_debug_pathfind": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1124
    },
    "navspace_debug_stringpull": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1125
    },
    "navspace_debug_trace": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1139
    },
    "navspace_debug_transition_calc": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1126
    },
    "navspace_draw_water_changes": {
        "data_type": "float",
        "default_value": "0",
        "description": "Draw changes in water volumes",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1142
    },
    "navspace_path_use_water_level_locator": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1127
    },
    "nb_debug_history": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If true, each bot keeps a history of debug output in memory",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1176
    },
    "nb_freeze": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Stop all NextBots from moving only",
        "flags": "game, replicated, cheat",
        "flagsRaw": 24580,
        "hasDefensiveFlag": false,
        "index": 1166
    },
    "nb_lod_0_limit": {
        "data_type": "int32",
        "default_value": "12",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1169
    },
    "nb_lod_0_range": {
        "data_type": "float",
        "default_value": "1500",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1170
    },
    "nb_lod_1_limit": {
        "data_type": "int32",
        "default_value": "25",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1171
    },
    "nb_lod_1_range": {
        "data_type": "float",
        "default_value": "2500",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1172
    },
    "nb_lod_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1167
    },
    "nb_lod_stats": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1168
    },
    "nb_stop": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Stop all NextBots",
        "flags": "game, replicated, cheat",
        "flagsRaw": 24580,
        "hasDefensiveFlag": false,
        "index": 1165
    },
    "nb_update_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1174
    },
    "nb_update_framelimit": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1173
    },
    "nb_update_maxslide": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1175
    },
    "net_async_clientconnect": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable async client connect optimization",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 227
    },
    "net_async_job_random_sleep": {
        "data_type": "float",
        "default_value": "0",
        "description": "Sleep randomly 0..net_async_job_random_sleep ms in the parallel server jobs; sleep is per job",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 3
    },
    "net_compresspackets_minsize": {
        "data_type": "int32",
        "default_value": "1024",
        "description": "Don't bother compressing packets below this size.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 496
    },
    "net_culloptimization": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable optimization of slow path that makes HLTV CPU consumption high in AnimGraph-using mods. Will switch to this on by default soon.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 484
    },
    "net_debug_to_file": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1827
    },
    "net_detailed_canpacket_log": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 500
    },
    "net_filelogging": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Log packets to files",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 485
    },
    "net_force_steamdatagram": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If SDR connectivity is possible with gameserver, then always use it, even if GC selected to use ordinary UDP for this match.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3160
    },
    "net_fs_showindirections": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 506
    },
    "net_log_processing": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Log network processing",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 488
    },
    "net_max_message_process_count": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Maximum number of messages to process from a client in a single frame (0 == no limit).",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 498
    },
    "net_max_message_queue_size": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Maximum number of messages to allow waiting in queue after processing; exceeding this disconnects the client. 0 == no limit",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 499
    },
    "net_max_polymorphic_spew": {
        "data_type": "int32",
        "default_value": "5",
        "description": "Max polymorphic variants to spew when spewing a flattened serializer.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 482
    },
    "net_p2p_listen_dedicated": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Should dedicated server listen for new-style P2P?",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 505
    },
    "net_public_adr": {
        "data_type": "string",
        "default_value": "",
        "description": "For servers behind NAT/DHCP meant to be exposed to the public internet, this is the public facing ip address string: (\"x.x.x.x\" )",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 504
    },
    "net_qosinterval_spew": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Spew QoS interval data as we gather it",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 486
    },
    "net_qospacketloss_percentage_threshold": {
        "data_type": "float",
        "default_value": "5",
        "description": "Spew a warning if packet loss percentage is above this threshold",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 487
    },
    "net_restrict_showmsg_socket": {
        "data_type": "string",
        "default_value": "",
        "description": "If set, only net_showmsg spew for data inbound on this socket name e.g. client, server, etc.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 497
    },
    "net_showdrop": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show dropped packets in console",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 495
    },
    "net_showeventlisteners": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show listening addition/removals",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1930
    },
    "net_showevents": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Dump game events to console (1=client only, 2=all).",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1929
    },
    "net_showmsg": {
        "data_type": "string",
        "default_value": "0",
        "description": "Show incoming message: <0|1|2|name> where 1 == all and 2 == all except net_NOP",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 492
    },
    "net_showoob": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show connectionless UDP traffic.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 501
    },
    "net_showpeaks": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Show messages for large packets only: <size>",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 494
    },
    "net_showreliable": {
        "data_type": "string",
        "default_value": "0",
        "description": "Like net_showmsg, but only spew reliable messages",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 493
    },
    "net_showudp": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Dump UDP packets summary to console",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 490
    },
    "net_showudp_remoteonly": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Dump non-loopback udp only",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 491
    },
    "net_use_delta_property_fastpath": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 483
    },
    "net_use_packet_compression": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Compress network traffic",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 489
    },
    "neutral_camp_arrow_offset": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2612
    },
    "nian_fight_duration": {
        "data_type": "int32",
        "default_value": "1500",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2173
    },
    "noclip_fixup": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1944
    },
    "npc_go_do_run": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set whether should run on NPC go",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1163
    },
    "npc_go_max_distance": {
        "data_type": "float",
        "default_value": "56755.8",
        "description": "How far is the trace we shoot when using NPC Go",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1164
    },
    "npcsolve_attract_draw": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1148
    },
    "npcsolve_constraint_nav": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1151
    },
    "npcsolve_constraint_npc": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1150
    },
    "npcsolve_drag_linear": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1149
    },
    "npcsolve_forward": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1158
    },
    "npcsolve_forward_const": {
        "data_type": "float",
        "default_value": "30000",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1159
    },
    "npcsolve_forward_dist": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1160
    },
    "npcsolve_forward_margin": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1161
    },
    "npcsolve_path_close_const": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1145
    },
    "npcsolve_path_close_max_tension": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1146
    },
    "npcsolve_path_lookahead_const": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1143
    },
    "npcsolve_path_lookahead_dist": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1144
    },
    "npcsolve_path_vel_const": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1147
    },
    "npcsolve_separation": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1152
    },
    "npcsolve_separation_const": {
        "data_type": "float",
        "default_value": "10000",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1153
    },
    "npcsolve_separation_dist": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1154
    },
    "npcsolve_separation_draw": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1157
    },
    "npcsolve_separation_jitter": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1156
    },
    "npcsolve_separation_r2": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1155
    },
    "option_duck_method": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Input toggle control",
        "flags": "client, archive, userinfo, per_user",
        "flagsRaw": 33416,
        "hasDefensiveFlag": false,
        "index": 4255
    },
    "opus_decode_test_signal": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 800
    },
    "opus_encode_test_signal": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 200
    },
    "opus_unittest_test_signal": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 801
    },
    "override_badge_level": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set to force all badges in the UI to the specified level. Set to -1 to randomize badges.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2659
    },
    "override_trophy_badge_points": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Set to force badge points shown on trophy page",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2988
    },
    "overwatch_help_shown_once": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2498
    },
    "overwatch_marker_padding": {
        "data_type": "int32",
        "default_value": "1",
        "description": "extra time added to markers",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2499
    },
    "pa_arcana_level": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2360
    },
    "panorama_2d_translate_no_comp_layer": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4446
    },
    "panorama_allow_texture_composition_layer_fast_path": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4450
    },
    "panorama_allow_transitions": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4445
    },
    "panorama_assert_loading_panel_type": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force style invalidation of the entire panel subtree when adding / removing classes.",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4425
    },
    "panorama_async_compute_mipgen": {
        "data_type": "bool",
        "default_value": "true",
        "description": "use asynchronous compute for mipmap generation.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4353
    },
    "panorama_box_shadow_no_comp_layer": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4448
    },
    "panorama_cache_command_list_repaint_threshold": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4419
    },
    "panorama_cache_command_list_size_threshold": {
        "data_type": "uint32",
        "default_value": "2048",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4420
    },
    "panorama_classes_force_invalidate": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force style invalidation of the entire panel subtree when adding / removing classes.",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4424
    },
    "panorama_clear_frames_on_device_restore": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4428
    },
    "panorama_command_reordering": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4403
    },
    "panorama_comp_layer_lru_lifetime": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4402
    },
    "panorama_composition_atlas": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4404
    },
    "panorama_console_max_autocomplete": {
        "data_type": "int32",
        "default_value": "100",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2419
    },
    "panorama_console_max_history": {
        "data_type": "int32",
        "default_value": "100",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2418
    },
    "panorama_console_max_lines": {
        "data_type": "int32",
        "default_value": "2000",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2420
    },
    "panorama_console_position_and_size": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "client, hidden, archive",
        "flagsRaw": 152,
        "hasDefensiveFlag": false,
        "index": 2417
    },
    "panorama_daisy_wheel": {
        "data_type": "string",
        "default_value": "ABXY",
        "description": "Daisy wheel input mode: RS | ABXY",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2423
    },
    "panorama_dash_gap_ratio": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4409
    },
    "panorama_dash_len": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4408
    },
    "panorama_debug_movies": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2410
    },
    "panorama_debug_overlay_opacity": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "hidden, archive",
        "flagsRaw": 144,
        "hasDefensiveFlag": false,
        "index": 2413
    },
    "panorama_debug_overlay_opacity_max": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "hidden, archive",
        "flagsRaw": 144,
        "hasDefensiveFlag": false,
        "index": 2415
    },
    "panorama_debug_overlay_opacity_min": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "hidden, archive",
        "flagsRaw": 144,
        "hasDefensiveFlag": false,
        "index": 2414
    },
    "panorama_debug_ready_for_display": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4422
    },
    "panorama_debugger_theme": {
        "data_type": "string",
        "default_value": "Light",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2416
    },
    "panorama_disable_blur": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4387
    },
    "panorama_disable_box_shadow": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4388
    },
    "panorama_disable_descendant_filtering": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Disable descendant selector filtering",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4429
    },
    "panorama_disable_draw_fancy_quad": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4390
    },
    "panorama_disable_draw_text": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4392
    },
    "panorama_disable_draw_text_shadow": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4394
    },
    "panorama_disable_layer_cache": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4395
    },
    "panorama_disable_layer_clear": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4391
    },
    "panorama_disable_render_callbacks": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4389
    },
    "panorama_disable_render_target_cache": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4406
    },
    "panorama_disallow_hover_styles": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4421
    },
    "panorama_dragscroll_affordance": {
        "data_type": "int32",
        "default_value": "20",
        "description": "Minimum mouse movement in pixels before a move is treated as a drag scroll",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4438
    },
    "panorama_dragscroll_maxflickvelocity": {
        "data_type": "float",
        "default_value": "8000",
        "description": "Maximum velocity for a drag scroll flick",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2422
    },
    "panorama_dragscroll_minflickvelocity": {
        "data_type": "float",
        "default_value": "60",
        "description": "Minimum velocity that the mouse must be moving as mouse up time to qualify as a drag scroll flick",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2421
    },
    "panorama_dragscroll_mintime": {
        "data_type": "float",
        "default_value": "0.02",
        "description": "Minimum time that the mouse button must be down before a move is treated as a drag scroll",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4439
    },
    "panorama_dragscroll_velocitymultiplier": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "Multiplier for flick velocity off of actual measured velocity",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4440
    },
    "panorama_early_anim_dispatch": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4386
    },
    "panorama_enable_secondary_layout_pass": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4431
    },
    "panorama_focus_world_panels": {
        "data_type": "bool",
        "default_value": "false",
        "description": "when set request key focus when a world panel is enabled",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4352
    },
    "panorama_force_active_controller_type": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4441
    },
    "panorama_force_text_shadow_strength": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4393
    },
    "panorama_highlight_bad_opacity_masks": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4399
    },
    "panorama_highlight_composition_layers": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4397
    },
    "panorama_highlight_slow_operations": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4398
    },
    "panorama_hsbc_through_fast_path": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4453
    },
    "panorama_joystick_axis_repeat_curve_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4434
    },
    "panorama_joystick_axis_repeat_interval_end": {
        "data_type": "float",
        "default_value": "0.05",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4433
    },
    "panorama_joystick_axis_repeat_interval_start": {
        "data_type": "float",
        "default_value": "0.22",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4432
    },
    "panorama_joystick_button_repeat_curve_time": {
        "data_type": "float",
        "default_value": "1.2",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4437
    },
    "panorama_joystick_button_repeat_interval_end": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4436
    },
    "panorama_joystick_button_repeat_interval_start": {
        "data_type": "float",
        "default_value": "0.48",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4435
    },
    "panorama_js_minidumps": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable sending minidumps on JS Exceptions.",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4413
    },
    "panorama_large_dispatch_event_queue": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4417
    },
    "panorama_max_fps": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4414
    },
    "panorama_max_oof_overlay_up_fps": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4416
    },
    "panorama_max_overlay_fps": {
        "data_type": "float",
        "default_value": "60",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4415
    },
    "panorama_max_text_shadow_strength": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4444
    },
    "panorama_might_scroll_no_comp_layer": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4447
    },
    "panorama_min_comp_layer_cache_cost": {
        "data_type": "int32",
        "default_value": "4096",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4401
    },
    "panorama_movie_async_load_size_bytes": {
        "data_type": "int32",
        "default_value": "20971520",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2411
    },
    "panorama_movie_force_not_ready_behavior": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2412
    },
    "panorama_reload_animations": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4418
    },
    "panorama_render_target_cache_max_size": {
        "data_type": "int32",
        "default_value": "31457280",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4407
    },
    "panorama_show_fps": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 4426
    },
    "panorama_show_fps_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 4427
    },
    "panorama_simple_borders_no_comp_layer": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4449
    },
    "panorama_spew_async_event_substring": {
        "data_type": "string",
        "default_value": "",
        "description": "If non-empty, print debug info about async event queue and dispatch behavior for events containing the substring.",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4412
    },
    "panorama_spew_layout_invalidates": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4442
    },
    "panorama_stats_log_time": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4400
    },
    "panorama_style_flag_force_invalidate": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force style invalidation of the entire panel subtree when adding / removing style flags.",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4423
    },
    "panorama_suspend_paint": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4430
    },
    "panorama_temp_comp_layer_min_dimension": {
        "data_type": "float",
        "default_value": "512",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4405
    },
    "panorama_track_render_commands": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4454
    },
    "panorama_transform_parents_no_layer_for_perspective": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4452
    },
    "panorama_transforms_no_comp_layer": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4451
    },
    "panorama_transition_time_factor": {
        "data_type": "float",
        "default_value": "1",
        "description": "A float representing a scale factor for transitions. 1.0 is normal, 2.0 would be twice as fast as normal, 0.5 half as fast",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4443
    },
    "panorama_use_backbuffer_directly": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 4396
    },
    "panorama_worldpanel_update_cull_distance": {
        "data_type": "float",
        "default_value": "1000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4355
    },
    "panorama_worldpanel_update_cull_size_threshold": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4356
    },
    "panorama_worldpanel_update_culling": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4354
    },
    "particle_cluster_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1917
    },
    "particle_cluster_manager_search_dist": {
        "data_type": "float",
        "default_value": "256",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1919
    },
    "particle_cluster_nodraw": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1918
    },
    "particle_debug_creation_filter": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, client, hidden, replicated",
        "flagsRaw": 8218,
        "hasDefensiveFlag": true,
        "index": 1047
    },
    "particle_layer_id_whitelist": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1061
    },
    "particle_powsimd_random_range_exp": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1077
    },
    "particle_snapshot_allow_combined_models": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1059
    },
    "particle_test_attach_attachment": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Attachment index for attachment mode",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1878
    },
    "particle_test_attach_mode": {
        "data_type": "string",
        "default_value": "follow_attachment",
        "description": "Possible Values: 'start_at_attachment', 'follow_attachment', 'start_at_origin', 'follow_origin'",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1877
    },
    "particle_test_file": {
        "data_type": "string",
        "default_value": "",
        "description": "Name of the particle system to dynamically spawn",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1876
    },
    "particle_use_gpu_particle_model_collection": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1048
    },
    "particles_multiplier": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Multiply # of rendered particles by this for perf testing",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1056
    },
    "password": {
        "data_type": "string",
        "default_value": "",
        "description": "Current server access password",
        "flags": "archive, norecord, server_cant_query",
        "flagsRaw": 1140981888,
        "hasDefensiveFlag": false,
        "index": 332
    },
    "pawn_mimic_all": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1890
    },
    "phonemedelay": {
        "data_type": "float",
        "default_value": "0",
        "description": "Phoneme delay to account for sound system latency.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4154
    },
    "phonemefilter": {
        "data_type": "float",
        "default_value": "0.08",
        "description": "Time duration of box filter to pass over phonemes.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4155
    },
    "phonemesnap": {
        "data_type": "int32",
        "default_value": "2",
        "description": "Lod at level at which visemes stops always considering two phonemes, regardless of duration.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4164
    },
    "phys2_contact_debug_draw_size": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 625
    },
    "phys2_debug_broadphase": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 611
    },
    "phys_active": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Whether PLAYER physics is actively simulated (ie. noclip)",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2318
    },
    "phys_async_buoyancy_update": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If true, buoyancy motion controllers are updated in an async job after the tick has completed.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2300
    },
    "phys_batch_ray_test": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4380
    },
    "phys_build_bounds": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 580
    },
    "phys_build_mass": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 579
    },
    "phys_buoyancy_angular_damping_multiplier": {
        "data_type": "float",
        "default_value": "1",
        "description": "Multiply water damping for buoyancy affecting angular velocity",
        "flags": "devonly, notify, replicated",
        "flagsRaw": 8450,
        "hasDefensiveFlag": true,
        "index": 570
    },
    "phys_buoyancy_drag_multiplier": {
        "data_type": "float",
        "default_value": "1",
        "description": "Multiply water drag (tries to equalize object velocity with the velocity of the water flow)",
        "flags": "devonly, notify, replicated",
        "flagsRaw": 8450,
        "hasDefensiveFlag": true,
        "index": 571
    },
    "phys_buoyancy_horizontal_damping_multiplier": {
        "data_type": "float",
        "default_value": "0",
        "description": "Multiply water damping for buoyancy affecting linear velocity in the horizontal plane",
        "flags": "devonly, notify, replicated",
        "flagsRaw": 8450,
        "hasDefensiveFlag": true,
        "index": 568
    },
    "phys_buoyancy_max_acceleration": {
        "data_type": "float",
        "default_value": "3200",
        "description": "Maximum acceleration that can be applied by water forces",
        "flags": "devonly, notify, replicated",
        "flagsRaw": 8450,
        "hasDefensiveFlag": true,
        "index": 572
    },
    "phys_buoyancy_vertical_damping_multiplier": {
        "data_type": "float",
        "default_value": "1",
        "description": "Multiply water damping for buoyancy affecting linear velocity in the vertical direction",
        "flags": "devonly, notify, replicated",
        "flagsRaw": 8450,
        "hasDefensiveFlag": true,
        "index": 569
    },
    "phys_client_clear_shadow_velocity": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2326
    },
    "phys_continuous_kinematic_update": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2329
    },
    "phys_controller_clear_velocity": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 615
    },
    "phys_cull_internal_mesh_contacts": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 626
    },
    "phys_debug_showdefaultmaterial": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, surfaces with default material are highlighted in physics debug geometry.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 577
    },
    "phys_deterministic": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 614
    },
    "phys_drag_multiplier": {
        "data_type": "float",
        "default_value": "1",
        "description": "Multiply air drag",
        "flags": "devonly, notify, replicated",
        "flagsRaw": 8450,
        "hasDefensiveFlag": true,
        "index": 567
    },
    "phys_dump_filter_body_name": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 640
    },
    "phys_dump_filter_solid_only": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 638
    },
    "phys_dump_filter_trace_callstack": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 639
    },
    "phys_dynamic_scaling": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1951
    },
    "phys_enable_fallback_toi": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 578
    },
    "phys_enable_gjk_clipping": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 628
    },
    "phys_expensive_shape_threshold": {
        "data_type": "int32",
        "default_value": "6",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4263
    },
    "phys_fast_report_contacts": {
        "data_type": "int32",
        "default_value": "1",
        "description": "when 1, fast path for collision reporting is implemented making triggers faster in some cases",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 629
    },
    "phys_fastaddcloneshape": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 573
    },
    "phys_highlight_expensive_objects": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Highlight expensive physics objects",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 76
    },
    "phys_highlight_expensive_objects_strength": {
        "data_type": "float",
        "default_value": "0.02",
        "description": "Highlight expensive physics objects strength",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 77
    },
    "phys_impactforcescale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1786
    },
    "phys_implicit_integarator": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Use implicit integrator for gyroscopic forces",
        "flags": "devonly, notify, replicated",
        "flagsRaw": 8450,
        "hasDefensiveFlag": true,
        "index": 566
    },
    "phys_intermediate_notify_remove_only": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 642
    },
    "phys_jiggle_bone_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 623
    },
    "phys_joint_teleport": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Teleport joint anchors if connected to world",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1689
    },
    "phys_length_damping_ratio": {
        "data_type": "float",
        "default_value": "2",
        "description": "Spring damping ratio for length constraint",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1691
    },
    "phys_length_frequency": {
        "data_type": "float",
        "default_value": "5",
        "description": "Spring stiffness for length constraint",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1690
    },
    "phys_log_updaters": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2337
    },
    "phys_log_updaters_exclude": {
        "data_type": "string",
        "default_value": "weapon pistol rifle survivor common_male",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2336
    },
    "phys_log_updaters_include": {
        "data_type": "string",
        "default_value": "limbs",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2335
    },
    "phys_manifold_pool_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 574
    },
    "phys_mesh_local_toi": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 627
    },
    "phys_min_motion_controller_count_to_run_in_job": {
        "data_type": "int32",
        "default_value": "8",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 641
    },
    "phys_old_contact_draw": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 624
    },
    "phys_parallel_islands": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable/Disable Parallel Island Solving",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2330
    },
    "phys_position_iterations": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 636
    },
    "phys_powered_ragdoll_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2046
    },
    "phys_pushscale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1782
    },
    "phys_reload_immediately": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set to 1 to reload resources and reconstruct physics of entities on the fly. May unexpectedly change behavior or crash the game, because game code is generally unaware of underlying resource reloads and may hold references to physics that may become invalid during resource reload. It is inherently harder for physics to deal with resource reloads because of persistent nature of objects being simulated (textures can be easily reloaded on the fly; if an entity holds a handle to a ragdoll body part, it may expect that handle to stay valid while the ragdoll exists)",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 645
    },
    "phys_server_clear_shadow_velocity": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2325
    },
    "phys_shoot_angular_speed": {
        "data_type": "float",
        "default_value": "3600",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1717
    },
    "phys_shoot_speed": {
        "data_type": "float",
        "default_value": "250",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1716
    },
    "phys_show_stats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2323
    },
    "phys_skip_creating_trivial_islands": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 613
    },
    "phys_solve_in_parallel_with_island_build": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": true,
        "index": 612
    },
    "phys_step_threaded": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 647
    },
    "phys_stressbodyweights": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1969
    },
    "phys_threaded_transform_update": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2324
    },
    "phys_timescale": {
        "data_type": "float",
        "default_value": "1",
        "description": "Scale time for physics",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2328
    },
    "phys_upimpactforcescale": {
        "data_type": "float",
        "default_value": "0.375",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1788
    },
    "phys_use_block_solver": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Use block solving for constraint entities",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1688
    },
    "phys_validate": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 610
    },
    "phys_vehicleimpactforcescale": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1787
    },
    "phys_velocity_iterations": {
        "data_type": "int32",
        "default_value": "8",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 637
    },
    "phys_visualize_awake_dynamic_only": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2332
    },
    "phys_visualize_awake_unattached_only": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2333
    },
    "phys_visualize_traces": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1932
    },
    "physcannon_maxforce": {
        "data_type": "float",
        "default_value": "1500",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1726
    },
    "physcannon_minforce": {
        "data_type": "float",
        "default_value": "700",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1725
    },
    "physics_hull_sphere_cast_sat_experimental": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 581
    },
    "pickup_check_period": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1840
    },
    "ping_wheel_0": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2427
    },
    "ping_wheel_1": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2428
    },
    "ping_wheel_2": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2429
    },
    "ping_wheel_3": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2430
    },
    "ping_wheel_4": {
        "data_type": "int32",
        "default_value": "4",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2431
    },
    "ping_wheel_5": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2432
    },
    "ping_wheel_6": {
        "data_type": "int32",
        "default_value": "6",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2433
    },
    "ping_wheel_7": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2434
    },
    "player0_using_joystick": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 170
    },
    "player_debug_off_nav": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1963
    },
    "player_debug_print_damage": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When true, print amount and type of all damage received by player to console.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1802
    },
    "player_item_merge_dots_dist": {
        "data_type": "float",
        "default_value": "32",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2953
    },
    "population_distribution_debug": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1135
    },
    "portrait_red": {
        "data_type": "int32",
        "default_value": "200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3343
    },
    "practice_password": {
        "data_type": "string",
        "default_value": "",
        "description": "Password used to filter private practice lobbies.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2769
    },
    "predictions_spoof_league_id": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3118
    },
    "predictions_spoof_league_id_ti10": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3116
    },
    "predictions_spoof_league_id_ti11": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3078
    },
    "pregame_debug_base_event_points": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3973
    },
    "pregame_debug_event_points": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3974
    },
    "prop_debug_collision": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Highlights props based on their collision group: COLLISION_GROUP_PROPS(white), COLLISION_GROUP_INTERACTIVE_DEBRIS(green), COLLISION_GROUP_DEBRIS and will return to COLLISION_GROUP_INTERACTIVE_DEBRIS on sleeping(bright red), COLLISION_GROUP_DEBRIS permanently (dark red), COLLISION_GROUP_DEBRIS(blue), OTHER(grey)",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1715
    },
    "prop_nav_ignore_edge_len": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1708
    },
    "prop_nav_ignore_mass": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1707
    },
    "prop_nav_obstacle_avoid_mass": {
        "data_type": "float",
        "default_value": "100.1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1709
    },
    "prop_nav_obstacle_avoid_use_connection_blocker": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1710
    },
    "prop_nav_obstacle_block_edge_min_a": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1712
    },
    "prop_nav_obstacle_block_edge_min_b": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1714
    },
    "prop_nav_obstacle_block_mass_a": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1711
    },
    "prop_nav_obstacle_block_mass_b": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1713
    },
    "props_break_max_pieces_perframe": {
        "data_type": "int32",
        "default_value": "16",
        "description": "Maximum prop breakable piece count per frame (-1 = model default)",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2302
    },
    "pvs_debugentity": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Verbose spew for this entity when doing IsInPVS computation.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 2285
    },
    "pvs_flowtype": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Flow through spawn groups for vis (0 == default, 1 == always visible, 2 == never visible.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 2284
    },
    "pwatchent": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Entity to watch for prediction system changes.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4314
    },
    "pwatchvar": {
        "data_type": "string",
        "default_value": "",
        "description": "Entity variable to watch in prediction system for changes.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4315
    },
    "r_AirboatViewDampenDamp": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, client, notify, replicated, cheat",
        "flagsRaw": 24844,
        "hasDefensiveFlag": false,
        "index": 1871
    },
    "r_AirboatViewDampenFreq": {
        "data_type": "float",
        "default_value": "7",
        "description": "",
        "flags": "game, client, notify, replicated, cheat",
        "flagsRaw": 24844,
        "hasDefensiveFlag": false,
        "index": 1870
    },
    "r_AirboatViewZHeight": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "game, client, notify, replicated, cheat",
        "flagsRaw": 24844,
        "hasDefensiveFlag": false,
        "index": 1872
    },
    "r_JeepViewDampenDamp": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, client, notify, replicated, cheat",
        "flagsRaw": 24844,
        "hasDefensiveFlag": false,
        "index": 1868
    },
    "r_JeepViewDampenFreq": {
        "data_type": "float",
        "default_value": "7",
        "description": "",
        "flags": "game, client, notify, replicated, cheat",
        "flagsRaw": 24844,
        "hasDefensiveFlag": false,
        "index": 1867
    },
    "r_JeepViewZHeight": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, client, notify, replicated, cheat",
        "flagsRaw": 24844,
        "hasDefensiveFlag": false,
        "index": 1869
    },
    "r_RainAllowInSplitScreen": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Allows rain in splitscreen",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3949
    },
    "r_RainParticleDensity": {
        "data_type": "float",
        "default_value": "1",
        "description": "Density of Particle Rain 0-1",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3948
    },
    "r_add_views_in_pre_output": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 150
    },
    "r_allow_all_objects_to_refract": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3286
    },
    "r_allow_refracted_particles": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3285
    },
    "r_always_render_all_windows": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Always force all engine & tools to render",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 180
    },
    "r_aoproxy_cull_dist": {
        "data_type": "float",
        "default_value": "12",
        "description": "Distance to cull the AO proxy as a factor of size",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 946
    },
    "r_aoproxy_min_dist": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 944
    },
    "r_aoproxy_min_dist_box": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 945
    },
    "r_aspectratio": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 365
    },
    "r_async_shader_compile_notify_frequency": {
        "data_type": "int32",
        "default_value": "10",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 428
    },
    "r_character_decal_renderdoc_capture": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 918
    },
    "r_character_decal_resolution": {
        "data_type": "int32",
        "default_value": "1024",
        "description": "Resolution of character decal texture.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 917
    },
    "r_cubemap_debug_colors": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 970
    },
    "r_dac_particle_desat_amount": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3121
    },
    "r_dac_particle_desat_color": {
        "data_type": "Vector3",
        "default_value": "1 1 1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3306
    },
    "r_dashboard_render_quality": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 2873
    },
    "r_debug_draw_safe_area_insets": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Render safe area insets as wireframe.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 153
    },
    "r_debug_precipitation": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show precipitation volumes",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3950
    },
    "r_decals": {
        "data_type": "int32",
        "default_value": "2048",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3951
    },
    "r_decals_default_fade_duration": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client, replicated",
        "flagsRaw": 8202,
        "hasDefensiveFlag": true,
        "index": 4109
    },
    "r_decals_default_start_fade": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client, replicated",
        "flagsRaw": 8202,
        "hasDefensiveFlag": true,
        "index": 4108
    },
    "r_deferred_additive_pass": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 2872
    },
    "r_deferred_height_fog": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3273
    },
    "r_deferred_simple_light": {
        "data_type": "int32",
        "default_value": "1",
        "description": "0=off, 1=on, 2=debug visualization",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4220
    },
    "r_deferred_specular": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3275
    },
    "r_deferred_specular_bloom": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3274
    },
    "r_depth_of_field": {
        "data_type": "int32",
        "default_value": "1",
        "description": "0 = off, 1 = Infinity Ward GPU Gems 3 ch 28, 2 = Gustafsson 2018 Reference, 3 = Gustafsson 2018 Precomputed Coc, 4 = Gustafsson 2018 Precomputed Coc and Depth",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3271
    },
    "r_directional_lightmaps": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1022
    },
    "r_directlighting": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to use direct lighting",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 66
    },
    "r_dof1_d0": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3277
    },
    "r_dof1_d1": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3278
    },
    "r_dof_override": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 97
    },
    "r_dof_override_far_blurry": {
        "data_type": "float",
        "default_value": "2000",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 101
    },
    "r_dof_override_far_crisp": {
        "data_type": "float",
        "default_value": "180",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 100
    },
    "r_dof_override_near_blurry": {
        "data_type": "float",
        "default_value": "-100",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 98
    },
    "r_dof_override_near_crisp": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 99
    },
    "r_dof_override_tilt_to_ground": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 102
    },
    "r_dopixelvisibility": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 832
    },
    "r_dosta_allow_spotlight_shadows": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3250
    },
    "r_dota_allow_colorwarp": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3265
    },
    "r_dota_allow_desaturate_layers": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3249
    },
    "r_dota_allow_highquality_shadows": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3238
    },
    "r_dota_allow_parallax_mapping": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3302
    },
    "r_dota_allow_particle_only_portraits": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2790
    },
    "r_dota_allow_wind_on_trees": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3301
    },
    "r_dota_always_reflect_refract": {
        "data_type": "bool",
        "default_value": "false",
        "description": "1 = force setup of refrect / refact pipelines even when using cheap water",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3269
    },
    "r_dota_bloom_compute_shader": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Use compute shader for Bloom downsample",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3267
    },
    "r_dota_caustic_fog_exclusion_radius": {
        "data_type": "float",
        "default_value": "3000",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3235
    },
    "r_dota_caustic_fog_plane_min": {
        "data_type": "float",
        "default_value": "-128",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3236
    },
    "r_dota_clouds": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3256
    },
    "r_dota_color_correction": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3255
    },
    "r_dota_debug_reflection_rects": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3261
    },
    "r_dota_default_post_process_fade": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 3266
    },
    "r_dota_default_post_process_fade_ui": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2787
    },
    "r_dota_depthbias": {
        "data_type": "float",
        "default_value": "0.001",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3297
    },
    "r_dota_disable_portrait_world_renderer": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2788
    },
    "r_dota_draw_overlays": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3290
    },
    "r_dota_draw_water": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3291
    },
    "r_dota_enabled_3d_skybox_postprocess": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3264
    },
    "r_dota_force_forward": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3293
    },
    "r_dota_framebuffer_refraction": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3259
    },
    "r_dota_fsr_enable_mip_bias": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Apply negative mip bias when rendering with FSR.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3254
    },
    "r_dota_fsr_rcas_sharpness": {
        "data_type": "float",
        "default_value": "0.25",
        "description": "RCAS sharpness when using FSR + RCAS upsample.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3253
    },
    "r_dota_fsr_upsample": {
        "data_type": "int32",
        "default_value": "0",
        "description": "0 == bilinear upsampe, 1 == FSR upscample, 2 == FSR + RCAS upsample",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3252
    },
    "r_dota_fxaa": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3248
    },
    "r_dota_height_fog_exclusion_radius": {
        "data_type": "float",
        "default_value": "2200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3234
    },
    "r_dota_height_fog_plane_height": {
        "data_type": "float",
        "default_value": "128",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3233
    },
    "r_dota_highlight_particle_only_portraits": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2791
    },
    "r_dota_local_light_compute": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3268
    },
    "r_dota_lowend_objects": {
        "data_type": "int32",
        "default_value": "1",
        "description": "0 = Force disable, 1 = use video settings, 2 = force enable",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3304
    },
    "r_dota_normal_maps": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 1073741834,
        "hasDefensiveFlag": true,
        "index": 3295
    },
    "r_dota_prewarm_particles": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3279
    },
    "r_dota_reflection_min_far_plane": {
        "data_type": "float",
        "default_value": "5000",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3292
    },
    "r_dota_refract_heroes": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3284
    },
    "r_dota_render_2d_skybox": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3300
    },
    "r_dota_render_3d_skybox": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3263
    },
    "r_dota_render_ground_last": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 3294
    },
    "r_dota_shadow_ambient_light": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3237
    },
    "r_dota_shadows": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3287
    },
    "r_dota_shadows_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3288
    },
    "r_dota_shadows_scissor": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3289
    },
    "r_dota_slopescaledepthbias": {
        "data_type": "float",
        "default_value": "4.5",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3298
    },
    "r_dota_spotlight_shadows_resolution": {
        "data_type": "int32",
        "default_value": "256",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3251
    },
    "r_dota_tonemap": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3276
    },
    "r_dota_tools_full_renderer": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3247
    },
    "r_dota_ultra_slopescaledepthbias": {
        "data_type": "float",
        "default_value": "4.5",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3299
    },
    "r_dota_unseen_fow": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3262
    },
    "r_dota_water_reflection": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3257
    },
    "r_dota_water_refraction": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3258
    },
    "r_dota_white_skybox": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3260
    },
    "r_dota_wind_min_high_freq_strength": {
        "data_type": "float",
        "default_value": "25",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3303
    },
    "r_draw3dskybox": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4254
    },
    "r_draw_first_tri_only": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 423
    },
    "r_draw_instances": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 424
    },
    "r_draw_overlays": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 836
    },
    "r_draw_particle_children_with_parents": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Draw particle children with parents (-1=use gameinfo, 0=no, 1=yes)",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1050
    },
    "r_draw_selected_ring": {
        "data_type": "bool",
        "default_value": "true",
        "description": "hides the selected_ring particle",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3884
    },
    "r_drawblankworld": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Render blank instead of the game world",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 90
    },
    "r_drawdecals": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to render decals",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 64
    },
    "r_drawdevvisualizers": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Render dev visualizers",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3916
    },
    "r_drawmodeldecals": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4140
    },
    "r_drawpanorama": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable the rendering of panorama UI",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 142
    },
    "r_drawparticles": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable/disable particle rendering",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1049
    },
    "r_drawpixelvisibility": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show the occlusion proxies",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 834
    },
    "r_drawropes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4197
    },
    "r_drawskybox": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Render the 2d skybox.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 86
    },
    "r_drawsprites": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4209
    },
    "r_drawtracers": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3986
    },
    "r_drawtracers_firstperson": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Toggle visibility of first person weapon tracers",
        "flags": "client, archive, release",
        "flagsRaw": 524424,
        "hasDefensiveFlag": false,
        "index": 3987
    },
    "r_drawviewmodel": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Render view model",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 65
    },
    "r_drawworld": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Render the world.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1038
    },
    "r_dx11_software_cmd_lists": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable Software Command lists for DX11 (Avoid using deferred contexts)",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 432
    },
    "r_enable_rigid_animation": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 4132
    },
    "r_experimental_lag_limiter": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 59
    },
    "r_extra_render_frames": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 151
    },
    "r_fallback_texture_lod_scale": {
        "data_type": "float",
        "default_value": "2",
        "description": "Scale factor for requested texture size (texture streaming) - used for geo that doesn't have a precomputed UV density measure",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 898
    },
    "r_fallback_texture_orange": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Display fallback texture as orange",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 454
    },
    "r_farz": {
        "data_type": "float",
        "default_value": "-1",
        "description": "Override the far clipping plane. -1 means to use the value in env_fog_controller.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3904
    },
    "r_flashlightambient": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4121
    },
    "r_flashlightbacktraceoffset": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3979
    },
    "r_flashlightbrightness": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4119
    },
    "r_flashlightconstant": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4117
    },
    "r_flashlightfar": {
        "data_type": "float",
        "default_value": "1500",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4116
    },
    "r_flashlightfov": {
        "data_type": "float",
        "default_value": "53",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4111
    },
    "r_flashlightladderdist": {
        "data_type": "float",
        "default_value": "40",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4123
    },
    "r_flashlightlinear": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4124
    },
    "r_flashlightlockposition": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4110
    },
    "r_flashlightmuzzleflashfov": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3982
    },
    "r_flashlightnear": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4115
    },
    "r_flashlightnearoffsetscale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4127
    },
    "r_flashlightoffsetforward": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4114
    },
    "r_flashlightoffsetright": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4112
    },
    "r_flashlightoffsetup": {
        "data_type": "float",
        "default_value": "-5",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4113
    },
    "r_flashlightquadratic": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4118
    },
    "r_flashlightshadowatten": {
        "data_type": "float",
        "default_value": "0.35",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4122
    },
    "r_flashlighttracedistcutoff": {
        "data_type": "float",
        "default_value": "128",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4128
    },
    "r_flashlighttracedistwatercutoff": {
        "data_type": "float",
        "default_value": "80",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3980
    },
    "r_flashlightvisualizetrace": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4120
    },
    "r_flush_on_pooled_ib_resize": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 429
    },
    "r_force_no_present": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force the render device to not present frames.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 442
    },
    "r_force_render_frame_count": {
        "data_type": "int32",
        "default_value": "5",
        "description": "The number of frames to render when a",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 181
    },
    "r_force_zprepass": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "0: Force z prepass off. 1: Force on. -1: Don't force",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 68
    },
    "r_frame_sync_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 441
    },
    "r_freeze_sceneobjects": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4385
    },
    "r_freezeparticles": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Pause particle simulation",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1069
    },
    "r_fullscreen_gamma": {
        "data_type": "float",
        "default_value": "2.2",
        "description": "Screen Gamma (only in fullscreen modes)",
        "flags": "archive",
        "flagsRaw": 1073741952,
        "hasDefensiveFlag": false,
        "index": 426
    },
    "r_fullscreen_quad_single_triangle": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 919
    },
    "r_grass_allow_flattening": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1031
    },
    "r_grass_alpha_test": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1025
    },
    "r_grass_density_mode": {
        "data_type": "int32",
        "default_value": "0",
        "description": "0 = Density corresponds to blade existance, 1 = Density corresponds to blade height, 2 = Both 0 and 1",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1028
    },
    "r_grass_end_fade": {
        "data_type": "float",
        "default_value": "3000",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1027
    },
    "r_grass_max_brightness_change": {
        "data_type": "float",
        "default_value": "75",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1030
    },
    "r_grass_parallel_load": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1032
    },
    "r_grass_quality": {
        "data_type": "int32",
        "default_value": "2",
        "description": "0 = Off, 1 = Low, 2 = Med, 3 = high, 4 = ultra",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1029
    },
    "r_grass_start_fade": {
        "data_type": "float",
        "default_value": "2000",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1026
    },
    "r_grass_vertex_lighting": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1024
    },
    "r_hair_voxels": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 921
    },
    "r_haircull_percent": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 920
    },
    "r_hairsort": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 922
    },
    "r_hero_debug_render_mode": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Hero Debug Rendering: 0-off, 2-Grayscale full specular without normal maps, 3-Grayscale full specular with normal maps, 4-Grayscale with normal maps, 5-Desaturated, 6-Wireframe, 7-Shaded wireframe, 8-Wireframe overlay",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3296
    },
    "r_impacts_alt_orientation": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3983
    },
    "r_impacts_decal_grazing_incidence_cutoff": {
        "data_type": "float",
        "default_value": "0.55",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3984
    },
    "r_impacts_decal_grazing_incidence_variance": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3985
    },
    "r_indirectlighting": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to use indirect lighting",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 62
    },
    "r_legacy_vsync": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use legacy vsync mode -- for testing for a couple user machines.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 443
    },
    "r_light_flickering_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2276
    },
    "r_light_probe_volume_debug_colors": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 969
    },
    "r_light_probe_volume_debug_grid": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show LPV debug grid, 0: off, 1: closest only 2: closest and keep 3: all",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 971
    },
    "r_light_probe_volume_debug_grid_albedo": {
        "data_type": "RGB Color",
        "default_value": "128 128 128 255",
        "description": "albedo for LPV debug grid",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 848
    },
    "r_light_probe_volume_debug_grid_bbox": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show LPV bounding box when debug grid is on, 0: off, 1: on",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 972
    },
    "r_light_probe_volume_debug_grid_metalness": {
        "data_type": "float",
        "default_value": "0",
        "description": "metalness for LPV debug grid",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 847
    },
    "r_light_probe_volume_debug_grid_prim": {
        "data_type": "int32",
        "default_value": "0",
        "description": "0: spheres, 1: cubes",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 844
    },
    "r_light_probe_volume_debug_grid_roughness": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "roughness for LPV debug grid",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 846
    },
    "r_light_probe_volume_debug_grid_samplesize": {
        "data_type": "float",
        "default_value": "4",
        "description": "sphere radius (world) for LPV debug grid",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 845
    },
    "r_lightmap_set": {
        "data_type": "string",
        "default_value": "lightmaps",
        "description": "Lightmap set to use, only works on map load",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1036
    },
    "r_lightmap_size": {
        "data_type": "int32",
        "default_value": "65536",
        "description": "Maximum lightmap resolution.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1034
    },
    "r_lightmap_size_directional_irradiance": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Maximum lightmap resolution for directional_irradiance channel. -1 = use value of r_lightmap_size",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1035
    },
    "r_low_latency": {
        "data_type": "int32",
        "default_value": "1",
        "description": "NVIDIA Low Latency (0 = off, 1 = on, 2 = on + boost)",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 420
    },
    "r_low_latency_trigger_flash": {
        "data_type": "bool",
        "default_value": "true",
        "description": "NVIDIA Low Latency Trigger Flash",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 421
    },
    "r_mapextents": {
        "data_type": "float",
        "default_value": "1444",
        "description": "Set the max dimension for the map.  This determines the far clipping plane",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3899
    },
    "r_max_texture_pool_size": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Upper limit on texture pool size.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 448
    },
    "r_mixed_shadows_fade_in_time": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2278
    },
    "r_mixed_shadows_fade_out_time": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2277
    },
    "r_morphing_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 947
    },
    "r_multigpu_num_gpus_found": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 430
    },
    "r_multigpu_num_gpus_used": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 431
    },
    "r_muzzleflashbrightness": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4126
    },
    "r_muzzleflashlinear": {
        "data_type": "float",
        "default_value": "0.05",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 4125
    },
    "r_nearz": {
        "data_type": "float",
        "default_value": "-1",
        "description": "Override the near clipping plane. -1 means use the default.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3903
    },
    "r_particle_cables_cast_shadows": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1076
    },
    "r_particle_debug_filter": {
        "data_type": "string",
        "default_value": "",
        "description": "Limit debug visualizations to substring match of effect name",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1051
    },
    "r_particle_debug_force_simulation": {
        "data_type": "int32",
        "default_value": "0",
        "description": "-1 for all asleep, 1 for all awake",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1072
    },
    "r_particle_debug_randomseeds": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use random seeds in debug",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1052
    },
    "r_particle_enable_fastpath": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1088
    },
    "r_particle_force_material_binds": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1089
    },
    "r_particle_gpu_implicit": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1080
    },
    "r_particle_gpu_implicit_debug_bricks": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1081
    },
    "r_particle_gpu_implicit_debug_stats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1083
    },
    "r_particle_gpu_implicit_debug_wireframe": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1082
    },
    "r_particle_gpu_implicit_lds_cache": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1084
    },
    "r_particle_max_detail_level": {
        "data_type": "int32",
        "default_value": "3",
        "description": "The maximum detail level of particle to create",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1046
    },
    "r_particle_max_draw_distance": {
        "data_type": "float",
        "default_value": "1e+06",
        "description": "The maximum distance that particles will render",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1060
    },
    "r_particle_max_size_cull": {
        "data_type": "float",
        "default_value": "1200",
        "description": "Particle systems larger than this in every dimension skip culling to save CPU.  They will be drawn anyway.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1053
    },
    "r_particle_max_texture_layers": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1079
    },
    "r_particle_min_timestep": {
        "data_type": "float",
        "default_value": "0",
        "description": "A minimum on particle simulation time, particle simulation happening more frequently than this will lerp.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1057
    },
    "r_particle_mixed_resolution_viewstart": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1087
    },
    "r_particle_model_old": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1086
    },
    "r_particle_model_per_thread_count": {
        "data_type": "int32",
        "default_value": "32",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1085
    },
    "r_particle_newcode": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable new paths in some particle operators",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1078
    },
    "r_particle_newinput": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable input path in particle ops",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1058
    },
    "r_particle_render_refreshes_sleep_timer": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Disable to get a better look at what's happening offscreen",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1055
    },
    "r_particle_render_test": {
        "data_type": "bool",
        "default_value": "false",
        "description": "render particles 100 times and show perf",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1054
    },
    "r_particle_timescale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1071
    },
    "r_pipeline_stats_command_flush": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Experimental: Set to 1 to enable full GPU pipeline flushing after each command list.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 438
    },
    "r_pipeline_stats_flush_before_sleeping": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Experimental: Set to 1 to enable GPU pipeline flushes right before the render thread sleeps to wait for more work.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 440
    },
    "r_pipeline_stats_present_flush": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Experimental: Set to 1 to enable full GPU pipeline flushing after each present.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 437
    },
    "r_pipeline_stats_use_flush_api": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Experimental: Set to 1 to use the ID3D11DeviceContext11::Flush() to flush the GPU pipeline instead of queries.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 439
    },
    "r_pixelvisibility_partial": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1023
    },
    "r_pixelvisibility_spew": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 833
    },
    "r_propsmaxdist": {
        "data_type": "float",
        "default_value": "1200",
        "description": "Maximum visible distance",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4021
    },
    "r_render_to_cubemap_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 835
    },
    "r_render_world_node_bounds": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Render world node bounds",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 1033
    },
    "r_renderdoc_open_captures": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 434
    },
    "r_renderdoc_validation_error_capture_limit": {
        "data_type": "int32",
        "default_value": "5",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 435
    },
    "r_rendersun": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Render sun lighting",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 63
    },
    "r_replay_post_effect": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4310
    },
    "r_reset_character_decals": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 916
    },
    "r_ropetranslucent": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4198
    },
    "r_screen_size_expansion": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3915
    },
    "r_shadows": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 911
    },
    "r_showdebugoverlays": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set to render debug overlays",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 73
    },
    "r_showdebugrendertarget": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set the debug render target to show, 0 == disable",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 78
    },
    "r_showsceneobjectbounds": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Show scenesystem object bounding boxes",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 74
    },
    "r_showsunshadowdebugrendertargets": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set to render sun shadow render targets",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 72
    },
    "r_showsunshadowdebugsplitvis": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set to render sun shadow split visibility debugger",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 75
    },
    "r_size_cull_threshold": {
        "data_type": "float",
        "default_value": "0.4",
        "description": "Threshold of screen size percentage below which objects get culled",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 88
    },
    "r_size_cull_threshold_fade": {
        "data_type": "float",
        "default_value": "0",
        "description": "% above the screen size percentage where we will start fading out (==0 will disable fading).",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 87
    },
    "r_size_cull_threshold_shadow": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "Threshold of sun shadow map size percentage below which objects get culled",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 89
    },
    "r_skinning_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 948
    },
    "r_skip_particle_light_bounds_in_forward": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3305
    },
    "r_skip_precache_validation_check": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 147
    },
    "r_smooth_morph_normals": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 892
    },
    "r_ssao": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to use screen-space ambient occlusion",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 67
    },
    "r_ssao_bias": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 924
    },
    "r_ssao_blur": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 926
    },
    "r_ssao_radius": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 923
    },
    "r_ssao_strength": {
        "data_type": "float",
        "default_value": "1.2",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 925
    },
    "r_stereo_multiview_instancing": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use multiview instancing for stereo rendering.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 874
    },
    "r_strip_invisible_during_sceneobject_update": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4383
    },
    "r_suppress_redundant_state_changes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 422
    },
    "r_test_econ_item_isolate_view": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3270
    },
    "r_texture_budget_dynamic": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Dynamically adjust texture streaming budget based on GPU memory usage.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 461
    },
    "r_texture_budget_threshold": {
        "data_type": "float",
        "default_value": "0.9",
        "description": "Reduce texture memory pool size when this percentage of the budget is full.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 463
    },
    "r_texture_budget_update_period": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "Time (in seconds) between updating texture memory budget.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 462
    },
    "r_texture_eager_eviction": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 455
    },
    "r_texture_hookup_uses_threadpool": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Async Texture hookup uses its own threadpool instead of the global pool.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 450
    },
    "r_texture_lod_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "Scale factor for requested texture size (texture streaming)",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 899
    },
    "r_texture_nonstreaming_load": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Allow immediately loading mips of textures (when possible) when their headers are loaded, saving IO & reducing latency.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 449
    },
    "r_texture_pool_increase_rate": {
        "data_type": "float",
        "default_value": "64",
        "description": "Increase texture memory pool size by this many MB / s when under budget.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 465
    },
    "r_texture_pool_reduce_rate": {
        "data_type": "float",
        "default_value": "256",
        "description": "Reduce texture memory pool size by this many MB / s when over budget.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 464
    },
    "r_texture_pool_size": {
        "data_type": "int32",
        "default_value": "1600",
        "description": "Total size of the texture pool in MB",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 446
    },
    "r_texture_stream_max_resolution": {
        "data_type": "int32",
        "default_value": "2147483647",
        "description": "Maximum resolution for top mip level in streaming textures",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 451
    },
    "r_texture_stream_mip_bias": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Biases the mip level the texture streaming system choses to stream for each texture.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 447
    },
    "r_texture_stream_resolution_bias": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 452
    },
    "r_texture_stream_resolution_bias_decrease_rate": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 468
    },
    "r_texture_stream_resolution_bias_increase_rate": {
        "data_type": "float",
        "default_value": "0.05",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 467
    },
    "r_texture_stream_resolution_bias_min": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 469
    },
    "r_texture_stream_resolution_bias_update_period": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 466
    },
    "r_texture_stream_throttle_amount": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 456
    },
    "r_texture_stream_throttle_count": {
        "data_type": "int32",
        "default_value": "3",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 457
    },
    "r_texture_stream_throttle_count_over_budget": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 458
    },
    "r_texture_streaming_timesliced": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 460
    },
    "r_texture_streamout_unthrottle_ms": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "After hitting throttling limits for streamout, allow it to continue up to this number of milliseconds.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 459
    },
    "r_texturefilteringquality": {
        "data_type": "int32",
        "default_value": "1",
        "description": "0: Bilinear, 1: Trilinear, 2: Aniso 2x, 3: Aniso 4x, 4: Aniso 8x, 5: Aniso 16x",
        "flags": "devonly",
        "flagsRaw": 1073741826,
        "hasDefensiveFlag": true,
        "index": 425
    },
    "r_threaded_particles": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1070
    },
    "r_threaded_scene_object_update": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4384
    },
    "r_timestamp_query_multiplier": {
        "data_type": "float",
        "default_value": "1",
        "description": "Set the TIMESTAMP query cycle multiplier, for drivers that lie",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 436
    },
    "r_translucent": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable rendering of translucent geometry",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 70
    },
    "r_use_memory_budget_model": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Use a model of GPU memory use to determine budget rather than querying the OS.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 433
    },
    "r_validate_texture_streaming": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Dumps state of texture streaming at the next frame boundary.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 453
    },
    "r_vconsole_foregroundforcerender": {
        "data_type": "bool",
        "default_value": "true",
        "description": "When VConsole is in the foreground, force all engine & tools to render",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 179
    },
    "r_wait_on_present": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 427
    },
    "r_world_frame_load_threshold_ms": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1045
    },
    "r_world_wind_dir": {
        "data_type": "Vector3",
        "default_value": "0.707 0.707 0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1043
    },
    "r_world_wind_frequency_grass": {
        "data_type": "float",
        "default_value": "0.03",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1041
    },
    "r_world_wind_frequency_trees": {
        "data_type": "float",
        "default_value": "0.003",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1042
    },
    "r_world_wind_offset_speed": {
        "data_type": "Vector3",
        "default_value": "0.25 0.3 0.2",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1040
    },
    "r_world_wind_smooth_time": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1044
    },
    "r_world_wind_strength": {
        "data_type": "float",
        "default_value": "40",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1039
    },
    "r_worldlod": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to enable world LOD",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 71
    },
    "r_zprepass_normals": {
        "data_type": "bool",
        "default_value": "false",
        "description": "0: Use normals reconstructed from depth. 1: Output correct normals in z prepass.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 69
    },
    "ragdoll_debug_item_detachment": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1703
    },
    "ragdoll_impact_strength": {
        "data_type": "float",
        "default_value": "500",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4173
    },
    "ragdoll_lru_debug_removal": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1752
    },
    "ragdoll_lru_min_age": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1754
    },
    "ragdoll_override_root_orientation": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1705
    },
    "ragdoll_prop_settle": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable more aggressive ragdoll settling",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1699
    },
    "ragdoll_prop_sleepaftertime": {
        "data_type": "float",
        "default_value": "4",
        "description": "After this many seconds of being basically stationary, the ragdoll will go to sleep.",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1698
    },
    "ragdoll_prop_sleepdisabletime": {
        "data_type": "float",
        "default_value": "1.5",
        "description": "Ragdoll is not allowed to physically sleep until this timer has elapsed.",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1697
    },
    "ragdoll_relax_limts": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1706
    },
    "ragdoll_resolve_initial_conflict": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2043
    },
    "ragdoll_resolve_separation": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2044
    },
    "ragdoll_scale_sleep_tolerance": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1704
    },
    "ragdoll_validate_targetpose": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1702
    },
    "ragdoll_visualize_creation_skeleton": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1700
    },
    "ragdoll_visualize_targetpose": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1701
    },
    "rate": {
        "data_type": "int32",
        "default_value": "80000",
        "description": "Min bytes/sec the host can receive data",
        "flags": "archive, userinfo",
        "flagsRaw": 640,
        "hasDefensiveFlag": false,
        "index": 341
    },
    "rcon_address": {
        "data_type": "string",
        "default_value": "",
        "description": "Address of remote server if sending unconnected rcon commands (format x.x.x.x:p) ",
        "flags": "norecord, release, server_cant_query",
        "flagsRaw": 67764224,
        "hasDefensiveFlag": false,
        "index": 322
    },
    "rcon_connected_clients_allow": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Allow clients to use rcon commands on server.",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 255
    },
    "rcon_password": {
        "data_type": "string",
        "default_value": "",
        "description": "remote console password.",
        "flags": "norecord, release, server_cant_query",
        "flagsRaw": 67764224,
        "hasDefensiveFlag": false,
        "index": 254
    },
    "recast_mark_overhang": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable/disable overhang detection",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 4531
    },
    "recast_partitioning": {
        "data_type": "int32",
        "default_value": "0",
        "description": "0 = watershed, 1 = monotone, 2 = layers",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 4530
    },
    "replay_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 217
    },
    "report_cliententitysim": {
        "data_type": "bool",
        "default_value": "false",
        "description": "List all clientside simulations and time - will report and turn itself off.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4136
    },
    "report_clientthinklist": {
        "data_type": "bool",
        "default_value": "false",
        "description": "List all clientside entities thinking and time - will report and turn itself off.",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4052
    },
    "report_connection_failure_percentage": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 22
    },
    "resourcesystem_multiframe_finalize_time_msec": {
        "data_type": "float",
        "default_value": "10",
        "description": "Max time to spend finalizing resources per frame in miliseconds.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 418
    },
    "rope_averagelight": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Makes ropes use average of cubemap lighting instead of max intensity.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4200
    },
    "rope_collide": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Collide rope with the world",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4191
    },
    "rope_shake": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4189
    },
    "rope_smooth_enlarge": {
        "data_type": "float",
        "default_value": "1.4",
        "description": "How much to enlarge ropes in screen space for antialiasing effect",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4192
    },
    "rope_smooth_maxalpha": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "Alpha for rope antialiasing effect",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4196
    },
    "rope_smooth_maxalphawidth": {
        "data_type": "float",
        "default_value": "1.75",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4195
    },
    "rope_smooth_minalpha": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "Alpha for rope antialiasing effect",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4194
    },
    "rope_smooth_minwidth": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "When using smoothing, this is the min screenspace width it lets a rope shrink to",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4193
    },
    "rope_subdiv": {
        "data_type": "int32",
        "default_value": "2",
        "description": "Rope subdivision amount",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4190
    },
    "rope_wind_dist": {
        "data_type": "float",
        "default_value": "1000",
        "description": "Don't use CPU applying small wind gusts to ropes when they're past this distance.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4199
    },
    "rr_dacmode": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set to 1, enable special functionality for DAC",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2042
    },
    "rr_debugclassname": {
        "data_type": "string",
        "default_value": "",
        "description": "If set, rr_debugclassname will print only response tests where 'classname' corresponds to this variable. Use to filter for a specific character.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2041
    },
    "rr_debugresponseconcept": {
        "data_type": "string",
        "default_value": "",
        "description": "If set, rr_debugresponseconcept will print only responses testing for the specified concept",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2039
    },
    "rr_debugresponses": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Show verbose matching output (1 for simple, 2 for rule scoring, 3 for noisy). If set to 4, it will only show response success/failure for npc_selected NPCs.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2040
    },
    "rr_debugrule": {
        "data_type": "string",
        "default_value": "",
        "description": "If set to the name of the rule, that rule's score will be shown whenever a concept is passed into the response rules system.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2037
    },
    "rr_dumpresponses": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Dump all response_rules.txt and rules (requires restart)",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2038
    },
    "rr_followup_maxdist": {
        "data_type": "float",
        "default_value": "1800",
        "description": "'then ANY' or 'then ALL' response followups will be dispatched only to characters within this distance.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1960
    },
    "rr_thenany_score_slop": {
        "data_type": "float",
        "default_value": "0",
        "description": "When computing respondents for a 'THEN ANY' rule, all rule-matching scores within this much of the best score will be considered.",
        "flags": "game, archive, cheat",
        "flagsRaw": 16516,
        "hasDefensiveFlag": false,
        "index": 1961
    },
    "rtx_force_default_hitgroup": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Forces all ray traced geometry to use default hit shaders instead of specialized ones.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 849
    },
    "rubikon_joint_always_draw_at_pivot_point": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 576
    },
    "rubikon_joint_deepdebugging": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 575
    },
    "run_voicecontainer_async": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 791
    },
    "save_async": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1920
    },
    "save_fake_hitch": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Force a busy wait for the specified number of milliseconds during save to simulate a hitch",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1922
    },
    "save_history_count": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Keep this many old copies in history of autosaves and quicksaves.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1925
    },
    "save_maxarray_spew": {
        "data_type": "int32",
        "default_value": "10",
        "description": "Max number of array entries to spew when using SaveRestoreIO spewing.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1927
    },
    "save_screenshot": {
        "data_type": "int32",
        "default_value": "2",
        "description": "0 = none, 1 = non-autosave, 2 = always, 3 = bug_only",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1924
    },
    "save_spew": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1926
    },
    "sc_aggregate_debug_draw_meshlets": {
        "data_type": "bool",
        "default_value": "false",
        "description": "SceneSystem/Aggregates/Visualize Meshlets",
        "flags": "devonly, menubar_item",
        "flagsRaw": 1048578,
        "hasDefensiveFlag": false,
        "index": 942
    },
    "sc_aggregate_fragment_merging": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 939
    },
    "sc_aggregate_gpu_culling": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Toggles GPU culling of aggregate meshes",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 934
    },
    "sc_aggregate_gpu_culling_conservative_bounds": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 938
    },
    "sc_aggregate_gpu_culling_show_culled": {
        "data_type": "bool",
        "default_value": "false",
        "description": "SceneSystem/Aggregates/Show GPU Culled Meshes",
        "flags": "devonly, menubar_item",
        "flagsRaw": 1048578,
        "hasDefensiveFlag": false,
        "index": 937
    },
    "sc_aggregate_gpu_occlusion_culling": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 935
    },
    "sc_aggregate_gpu_vis_culling": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 936
    },
    "sc_aggregate_indirect_draw_compaction": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Use multidrawindirect...count if the driver/hardware supports it",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 940
    },
    "sc_aggregate_indirect_draw_compaction_threshold": {
        "data_type": "uint32",
        "default_value": "8",
        "description": "Threshold of indirect draws when we will do compaction",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 941
    },
    "sc_aggregate_material_solo": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 943
    },
    "sc_allow_dithered_lod": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Allow use of dithered lod transitions",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 882
    },
    "sc_allow_dynamic_constant_batching": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 959
    },
    "sc_allow_precomputed_vismembers": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 1037
    },
    "sc_allow_write_depth_before_blend": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 963
    },
    "sc_batch_layer_cb_updates": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 908
    },
    "sc_bounds_group_cull": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 880
    },
    "sc_cache_envmap_lpv_lookup": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 973
    },
    "sc_check_world": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 896
    },
    "sc_clutter_density_full_size": {
        "data_type": "float",
        "default_value": "0.05",
        "description": "Screen-size where clutter will be full density",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 950
    },
    "sc_clutter_density_none_size": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "Screen-size where clutter will be gone",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 951
    },
    "sc_clutter_draw": {
        "data_type": "bool",
        "default_value": "true",
        "description": "SceneSystem/Aggregates/Draw Aggregates",
        "flags": "devonly, menubar_item",
        "flagsRaw": 1048578,
        "hasDefensiveFlag": false,
        "index": 949
    },
    "sc_disableThreading": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 910
    },
    "sc_disable_baked_lighting": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 895
    },
    "sc_disable_culling_boxes": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 881
    },
    "sc_disable_procedural_layer_rendering": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 903
    },
    "sc_disable_shadow_fastpath": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 887
    },
    "sc_disable_shadow_materials": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 886
    },
    "sc_disable_spotlight_shadows": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 839
    },
    "sc_disable_world_materials": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 965
    },
    "sc_dithered_lod_transition_amt": {
        "data_type": "float",
        "default_value": "0.075",
        "description": "Percentage of the transition between two lods we will apply a dither",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 883
    },
    "sc_draw_aggregate_meshes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "SceneSystem/Aggregates/Draw Aggregates",
        "flags": "devonly, menubar_item",
        "flagsRaw": 1048578,
        "hasDefensiveFlag": false,
        "index": 933
    },
    "sc_dump_lists": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 894
    },
    "sc_enable_discard": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 838
    },
    "sc_extended_stats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 889
    },
    "sc_fade_distance_scale_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 897
    },
    "sc_force_lod_level": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 900
    },
    "sc_force_materials_batchable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 964
    },
    "sc_force_single_display_list_per_layer": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 877
    },
    "sc_force_translation_in_projection": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, the camera's translation will be included in the projection matrix.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 893
    },
    "sc_hdr_enabled_override": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Override default setting for HDR rendering. -1 default, 0 NoHdr, 1 Hdr, 2 Hdr 1010102 3 Hdr 111110",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 890
    },
    "sc_instanced_material_solo": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 958
    },
    "sc_instanced_mesh_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Toggles rendering instanced meshes",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 952
    },
    "sc_instanced_mesh_gpu_culling": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Toggles GPU culling of instanced meshes",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 953
    },
    "sc_instanced_mesh_gpu_occlusion_culling": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Toggles GPU occlusion of instanced meshes",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 954
    },
    "sc_instanced_mesh_gpu_vis_culling": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Toggles GPU vis of instanced meshes",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 955
    },
    "sc_instanced_mesh_motion_vectors": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Toggles motion vector support for instanced meshes",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 956
    },
    "sc_instanced_mesh_solo": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 957
    },
    "sc_keep_all_layers": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 907
    },
    "sc_layer_batch_threshold": {
        "data_type": "int32",
        "default_value": "128",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 884
    },
    "sc_layer_batch_threshold_fullsort": {
        "data_type": "int32",
        "default_value": "80",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 885
    },
    "sc_max_framebuffer_copies_per_layer": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 875
    },
    "sc_mesh_backface_culling": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 962
    },
    "sc_no_cull": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 878
    },
    "sc_no_vis": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 879
    },
    "sc_only_render_opaque": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 905
    },
    "sc_only_render_shadowcasters": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 904
    },
    "sc_queue_reflection_views_to_layers": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 876
    },
    "sc_reject_all_objects": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 901
    },
    "sc_screen_size_lod_scale_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 888
    },
    "sc_shadow_depth_bias": {
        "data_type": "int32",
        "default_value": "256",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 841
    },
    "sc_shadow_depth_bias_clamp": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 843
    },
    "sc_shadow_depth_bias_state_override": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 840
    },
    "sc_shadow_slopescale_depth_bias": {
        "data_type": "float",
        "default_value": "2.13",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 842
    },
    "sc_show_cs_skinning_stats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "SceneSystem/Compute Skinning Stats",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 891
    },
    "sc_show_gpu_profiler": {
        "data_type": "bool",
        "default_value": "false",
        "description": "SceneSystem/GPU Profiler",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 931
    },
    "sc_show_texture_visualizer": {
        "data_type": "bool",
        "default_value": "false",
        "description": "SceneSystem/Texture Visualizer",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 932
    },
    "sc_show_tonemap_visualizer": {
        "data_type": "bool",
        "default_value": "false",
        "description": "SceneSystem/Tonemap Visualizer",
        "flags": "devonly, cheat, menubar_item",
        "flagsRaw": 1064962,
        "hasDefensiveFlag": false,
        "index": 818
    },
    "sc_skip_traversal": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 902
    },
    "sc_spew_cmt_usage": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 909
    },
    "sc_throw_away_all_layers": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 906
    },
    "sc_use_clear_subrect": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 837
    },
    "sc_visualize_batches": {
        "data_type": "int32",
        "default_value": "0",
        "description": "color per batch",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 961
    },
    "sc_visualize_sceneobjects": {
        "data_type": "int32",
        "default_value": "0",
        "description": "1 = visualize bounds, 2 = visualize sceneobject mesh materials, 3 = required texture size, 4 = bounds group, 5 = LOD, 6 == LPV Binding, 7 == instancing",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 960
    },
    "scene_clientflex": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Do client side flex animation.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1760
    },
    "scene_maxcaptionradius": {
        "data_type": "float",
        "default_value": "1200",
        "description": "Only show closed captions if recipient is within this many units of speaking actor (0==disabled).",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1756
    },
    "scene_print": {
        "data_type": "int32",
        "default_value": "0",
        "description": "When playing back a scene, print timing and event info to console.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1759
    },
    "scene_vcdautosave": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Create a savegame before VCD playback",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4202
    },
    "screenmessage_notifytime": {
        "data_type": "float",
        "default_value": "8",
        "description": "How long to display screen message text",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1903
    },
    "screenmessage_show": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Enable display of console messages on screen. 1 = Enabled, 0 = Disabled, -1 = Enabled if vgui is not present",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 914
    },
    "screenshot_height": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Screenshot height. -1 for screen height.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 187
    },
    "screenshot_prefix": {
        "data_type": "string",
        "default_value": "shot",
        "description": "Set the screenshot auto naming prefix.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 185
    },
    "screenshot_subdir": {
        "data_type": "string",
        "default_value": "screenshots",
        "description": "Set the screenshot directory.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 184
    },
    "screenshot_width": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Screenshot width. -1 for screen width.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 186
    },
    "script_attach_debugger_at_startup": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2342
    },
    "script_break_in_native_debugger_on_error": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2341
    },
    "sensitivity": {
        "data_type": "float",
        "default_value": "1.25",
        "description": "Mouse sensitivity.",
        "flags": "client, archive, userinfo, per_user",
        "flagsRaw": 33416,
        "hasDefensiveFlag": false,
        "index": 4016
    },
    "servercfgfile": {
        "data_type": "string",
        "default_value": "server.cfg",
        "description": "",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1816
    },
    "sf_loadout_rotate_drag": {
        "data_type": "float",
        "default_value": "0.19",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2668
    },
    "sf_loadout_rotate_frametime_multiplier": {
        "data_type": "float",
        "default_value": "8",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2670
    },
    "sf_loadout_rotate_grab_scale": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2669
    },
    "sf_loadout_rotate_scale": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2667
    },
    "shake_show": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Displays a list of the active screen shakes.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3914
    },
    "show_visibility_boxes": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable or Disable debug display of visibility boxes",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4364
    },
    "showcase_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3226
    },
    "silence_dsp": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When on, silences all DSP mixes.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 717
    },
    "sk_autoaim_mode": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "game, client, archive, replicated",
        "flagsRaw": 8332,
        "hasDefensiveFlag": false,
        "index": 1832
    },
    "sk_player_arm": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1800
    },
    "sk_player_chest": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1798
    },
    "sk_player_head": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1797
    },
    "sk_player_leg": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1801
    },
    "sk_player_stomach": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1799
    },
    "skel_constraints_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 562
    },
    "skel_debug": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1955
    },
    "skeleton_instance_lod_optimization": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Compute LOD mask internally like since 2016, i.e. force all LOD groups' bones to compute",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1954
    },
    "skeleton_instance_scaleset_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1949
    },
    "skeleton_instance_smear_boneflags": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Smear boneflags across the model.  Costs computation, but tests to make sure your bone flags are consistent.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1950
    },
    "skill": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Game skill level.",
        "flags": "game, client, archive, replicated, per_user",
        "flagsRaw": 41100,
        "hasDefensiveFlag": false,
        "index": 2314
    },
    "smoothstairs": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Smooth player eye z coordinate when traversing stairs.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1933
    },
    "snd_async_spew_blocking": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Spew message to console any time async sound loading blocks on file i/o.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 767
    },
    "snd_autodetect_latency": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "archive",
        "flagsRaw": 1073741952,
        "hasDefensiveFlag": false,
        "index": 742
    },
    "snd_boxverb_simd": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable SIMD code path for shoebox reverb processor.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 711
    },
    "snd_boxverb_simd_svf": {
        "data_type": "int32",
        "default_value": "1",
        "description": "0 = use biquad instead of svf, 1 = use vectorized svf, 2 = use scalar svf",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 712
    },
    "snd_break_on_start_soundevent": {
        "data_type": "string",
        "default_value": "",
        "description": "Use to debug break on any soundevent that is started matching this name",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 2340
    },
    "snd_compare_KV_convert": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 774
    },
    "snd_delay_sound_ms_max": {
        "data_type": "float",
        "default_value": "250",
        "description": "Sound device synchronization max delay (ms)",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 738
    },
    "snd_delay_sound_ms_shift": {
        "data_type": "float",
        "default_value": "23",
        "description": "Sound device synchronization shift (ms)",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 737
    },
    "snd_diffusor_simd": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable SIMD code path for diffusor processor.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 710
    },
    "snd_disable_mixer_duck": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 765
    },
    "snd_disable_mixer_solo": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 763
    },
    "snd_dsp_distance_max": {
        "data_type": "float",
        "default_value": "2000",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 652
    },
    "snd_dsp_distance_min": {
        "data_type": "float",
        "default_value": "20",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 651
    },
    "snd_duckerattacktime": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 795
    },
    "snd_duckerreleasetime": {
        "data_type": "float",
        "default_value": "2.5",
        "description": "",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 796
    },
    "snd_duckerthreshold": {
        "data_type": "float",
        "default_value": "0.15",
        "description": "",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 797
    },
    "snd_ducktovolume": {
        "data_type": "float",
        "default_value": "0.55",
        "description": "",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 794
    },
    "snd_enable_imgui": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Game/Sound System Debugger",
        "flags": "devonly, archive, cheat, menubar_item",
        "flagsRaw": 1065090,
        "hasDefensiveFlag": false,
        "index": 782
    },
    "snd_enable_subgraph_corenull_passthrough": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 714
    },
    "snd_enable_subgraph_log": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 713
    },
    "snd_envelope_rate": {
        "data_type": "float",
        "default_value": "0.9",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 793
    },
    "snd_filter": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 752
    },
    "snd_foliage_db_loss": {
        "data_type": "float",
        "default_value": "0",
        "description": "foliage dB loss per 1200 units",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1962
    },
    "snd_gain": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "archive",
        "flagsRaw": 1073741952,
        "hasDefensiveFlag": false,
        "index": 770
    },
    "snd_gain_max": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 771
    },
    "snd_gain_min": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 772
    },
    "snd_gamevoicevolume": {
        "data_type": "float",
        "default_value": "1",
        "description": "Game v.o. volume",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 736
    },
    "snd_gamevolume": {
        "data_type": "float",
        "default_value": "1",
        "description": "Game volume",
        "flags": "archive",
        "flagsRaw": 1073741952,
        "hasDefensiveFlag": false,
        "index": 734
    },
    "snd_group_cluster_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 649
    },
    "snd_hrtf_distance_behind": {
        "data_type": "float",
        "default_value": "0",
        "description": "HRTF calculations will calculate the player as being this far behind the camera.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 786
    },
    "snd_list": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 762
    },
    "snd_mergemethod": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Sound merge method (0 == sum and clip, 1 == max, 2 == avg).",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 733
    },
    "snd_mix_async": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 744
    },
    "snd_mixahead": {
        "data_type": "float",
        "default_value": "0.001",
        "description": "",
        "flags": "archive",
        "flagsRaw": 1073741952,
        "hasDefensiveFlag": false,
        "index": 743
    },
    "snd_mixer_master_dsp": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 760
    },
    "snd_mixer_master_level": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 759
    },
    "snd_musicvolume": {
        "data_type": "float",
        "default_value": "1",
        "description": "Music volume",
        "flags": "archive",
        "flagsRaw": 1073741952,
        "hasDefensiveFlag": false,
        "index": 741
    },
    "snd_mute_losefocus": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "archive",
        "flagsRaw": 1073741952,
        "hasDefensiveFlag": false,
        "index": 191
    },
    "snd_new_visualize": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Displays soundevent name played at it's 3d position",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1768
    },
    "snd_occlusion_bounces": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 665
    },
    "snd_occlusion_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 656
    },
    "snd_occlusion_debug_listener_pos": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 667
    },
    "snd_occlusion_indirect_max": {
        "data_type": "float",
        "default_value": "0.7",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 669
    },
    "snd_occlusion_indirect_min": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 668
    },
    "snd_occlusion_indirect_radius": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 666
    },
    "snd_occlusion_min_wall_thickness": {
        "data_type": "float",
        "default_value": "4",
        "description": "",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 659
    },
    "snd_occlusion_override": {
        "data_type": "float",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, replicated, cheat",
        "flagsRaw": 24578,
        "hasDefensiveFlag": false,
        "index": 661
    },
    "snd_occlusion_rays": {
        "data_type": "int32",
        "default_value": "4",
        "description": "",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 664
    },
    "snd_occlusion_report": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 660
    },
    "snd_occlusion_visualize": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 662
    },
    "snd_op_test_convar": {
        "data_type": "float",
        "default_value": "720",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 650
    },
    "snd_opvar_set_point_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1763
    },
    "snd_opvar_set_point_update_interval": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1764
    },
    "snd_rear_stereo_scale": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 671
    },
    "snd_refdb": {
        "data_type": "float",
        "default_value": "60",
        "description": "Reference dB at snd_refdist",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 769
    },
    "snd_refdist": {
        "data_type": "float",
        "default_value": "36",
        "description": "Reference distance for snd_refdb",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 768
    },
    "snd_report_verbose_error": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set to 1, report more error found when playing sounds.\n",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 792
    },
    "snd_sequencer_show_bpm": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 706
    },
    "snd_sequencer_show_events": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 707
    },
    "snd_sequencer_show_quantize_queue": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 708
    },
    "snd_showclassname": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 761
    },
    "snd_showstart": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 751
    },
    "snd_sos_block_global_stack": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 703
    },
    "snd_sos_block_stop_global_stack": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 702
    },
    "snd_sos_calc_angle_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 654
    },
    "snd_sos_compare_kv3_native_stacks": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 695
    },
    "snd_sos_debug_trigger_opvar": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1588
    },
    "snd_sos_default_update_stack": {
        "data_type": "string",
        "default_value": "core_update_default",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 773
    },
    "snd_sos_hide_simple_parameter_overwrite_warnings": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 693
    },
    "snd_sos_ingame_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 704
    },
    "snd_sos_limit_self": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 676
    },
    "snd_sos_list_operator_updates": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 683
    },
    "snd_sos_max_event_base_depth": {
        "data_type": "int32",
        "default_value": "4",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 692
    },
    "snd_sos_opvar_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 696
    },
    "snd_sos_pause_system": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 701
    },
    "snd_sos_print_field_references": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 690
    },
    "snd_sos_print_full_field_info": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 689
    },
    "snd_sos_print_table_arrays": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 700
    },
    "snd_sos_report_entity_deleted": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 653
    },
    "snd_sos_show_block_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Spew data about the list of block entries.",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 805
    },
    "snd_sos_show_entry_match_free": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 806
    },
    "snd_sos_show_mixgroup_path_errors": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 655
    },
    "snd_sos_show_operator_event_and_stack": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 687
    },
    "snd_sos_show_operator_event_filter": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 684
    },
    "snd_sos_show_operator_field_filter": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 688
    },
    "snd_sos_show_operator_init": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 680
    },
    "snd_sos_show_operator_not_executing": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 686
    },
    "snd_sos_show_operator_operator_filter": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 685
    },
    "snd_sos_show_operator_pause_entry": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 670
    },
    "snd_sos_show_operator_shutdown": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 682
    },
    "snd_sos_show_operator_stop_entry": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 675
    },
    "snd_sos_show_operator_updates": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 681
    },
    "snd_sos_show_opvar_updates": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 697
    },
    "snd_sos_show_opvar_updates_filter": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 698
    },
    "snd_sos_show_parameter_overwrite_warnings": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 694
    },
    "snd_sos_show_queuetotrack": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 677
    },
    "snd_sos_show_soundevent_overwrites": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 776
    },
    "snd_sos_show_soundevent_param_overwrite": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 691
    },
    "snd_sos_show_soundevent_start": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 679
    },
    "snd_sos_show_track_list": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 705
    },
    "snd_sos_show_voice_elapsed_time": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 678
    },
    "snd_sos_soundevent_deferred_interval_time": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 777
    },
    "snd_sos_soundevent_filter": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 699
    },
    "snd_sos_soundevent_max_deferred_time": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 778
    },
    "snd_sos_use_case_sensitive_soundevents": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 775
    },
    "snd_sound_areas_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 3893
    },
    "snd_sound_areas_debug_interval": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "",
        "flags": "client, replicated, cheat",
        "flagsRaw": 24584,
        "hasDefensiveFlag": false,
        "index": 3894
    },
    "snd_soundmixer": {
        "data_type": "string",
        "default_value": "Default_Mix",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 764
    },
    "snd_soundmixer_version": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 766
    },
    "snd_spatialize_lerp": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "archive, release",
        "flagsRaw": 524416,
        "hasDefensiveFlag": false,
        "index": 781
    },
    "snd_steamaudio_dynamicpathing_max_samples": {
        "data_type": "int32",
        "default_value": "16",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1765
    },
    "snd_steamaudio_enable_reverb": {
        "data_type": "float",
        "default_value": "0",
        "description": "Enable Steam Audio Reverb processor.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 785
    },
    "snd_steamaudio_pathing_caching_threshold": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1767
    },
    "snd_steamaudio_pathing_enable_caching": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1766
    },
    "snd_steamaudio_perspective_correction_front_only": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Use perspective correction for 3D audio only in the frontal directions.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 783
    },
    "snd_steamaudio_reverb_level_db": {
        "data_type": "float",
        "default_value": "-3",
        "description": "Adjust overall volume (dB) of the output from Steam Audio Reverb processor.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 784
    },
    "snd_steamaudio_source_pathing_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable path visualization for steam_audio_source operator.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 672
    },
    "snd_steamaudio_source_pathing_debug_duration": {
        "data_type": "float",
        "default_value": "0.01",
        "description": "Duration for which path remains visible. Should be close to update rate of the sound operator stack.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 673
    },
    "snd_steamaudio_source_pathing_enable_validation": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable real-time pathing validation against dynamic geometry.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 674
    },
    "snd_toolvolume": {
        "data_type": "float",
        "default_value": "1",
        "description": "Volume of sounds in tools (e.g. Hammer, SFM)",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 740
    },
    "snd_ui_positional": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 4411
    },
    "snd_ui_spatialization_spread": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 4410
    },
    "snd_use_baked_occlusion": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "replicated, cheat, release",
        "flagsRaw": 548864,
        "hasDefensiveFlag": false,
        "index": 663
    },
    "snd_vmix_override_mix_decay_time": {
        "data_type": "float",
        "default_value": "-1",
        "description": "If set > 0, overrides how long the decay time is on all mix graphs (in seconds).\n",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 790
    },
    "snd_vmix_show_input_updates": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set to 1, show all incoming updates to vmix inputs.\n",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 789
    },
    "snd_voipvolume": {
        "data_type": "float",
        "default_value": "1",
        "description": "Voice volume",
        "flags": "archive",
        "flagsRaw": 1073741952,
        "hasDefensiveFlag": false,
        "index": 735
    },
    "sos_debug_emit": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2339
    },
    "sound_device_override": {
        "data_type": "string",
        "default_value": "",
        "description": "ID of the sound device to use",
        "flags": "archive, release",
        "flagsRaw": 524416,
        "hasDefensiveFlag": false,
        "index": 780
    },
    "soundevent_check_networked_entity": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1769
    },
    "soundpatch_captionlength": {
        "data_type": "float",
        "default_value": "2",
        "description": "How long looping soundpatch captions should display for.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1772
    },
    "soundscape_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When on, draws lines to all env_soundscape entities. Green lines show the active soundscape, red lines show soundscapes that aren't in range, and white lines show soundscapes that are in range, but not the active soundscape.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1773
    },
    "soundscape_fadetime": {
        "data_type": "float",
        "default_value": "3",
        "description": "Time to crossfade sound effects between soundscapes",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4206
    },
    "soundscape_message": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4207
    },
    "soundscape_radius_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Prints current volume of radius sounds",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 4208
    },
    "soundscape_update_include_bots": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable to calculate soundscape audio params for bots.",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1774
    },
    "soundsystem_device_used": {
        "data_type": "string",
        "default_value": "",
        "description": "Sound device in use (changing this does not change the soundsystem).",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 709
    },
    "soundsystem_update_async": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 4
    },
    "spawngroup_ignore_timeouts": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 210
    },
    "speaker_config": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 779
    },
    "spec_autodirector": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Auto-director chooses best view modes while spectating",
        "flags": "client, clientcmd_can_execute",
        "flagsRaw": 268435464,
        "hasDefensiveFlag": false,
        "index": 3990
    },
    "spec_centerchasecam": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Looks at the target player's center, instead of his eye position, in chase came mode",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4258
    },
    "spec_chasedistance": {
        "data_type": "float",
        "default_value": "96",
        "description": "Chase cam's ideal distance from target",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4256
    },
    "spec_chasedistancespeed": {
        "data_type": "float",
        "default_value": "144",
        "description": "Chase cam's ideal distance from target",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4257
    },
    "spec_replay_autostart": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Auto-start Killer Replay when available",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 4308
    },
    "spec_replay_bot": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable Spectator Hltv Replay when killed by bot",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1875
    },
    "spec_replay_cache_ragdolls": {
        "data_type": "bool",
        "default_value": "true",
        "description": "when set to 0, ragdolls will settle dynamically before and after Killer Replay",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4306
    },
    "spec_replay_enable": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Enable Killer Replay, requires hltv server running (0:off, 1:default, 2:force)",
        "flags": "replicated, release",
        "flagsRaw": 2629632,
        "hasDefensiveFlag": false,
        "index": 213
    },
    "spec_replay_fadein": {
        "data_type": "float",
        "default_value": "0.75",
        "description": "Amount of time in seconds it takes to visually fade into replay, or into real-time after replay",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4302
    },
    "spec_replay_fadeout": {
        "data_type": "float",
        "default_value": "0.75",
        "description": "Amount of time in seconds it takes to visually fade out of replay, or out of real-time before replay",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4303
    },
    "spec_replay_fullframe": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Send full frame on every hltv replay transition",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 226
    },
    "spec_replay_leadup_time": {
        "data_type": "float",
        "default_value": "5.3438",
        "description": "Replay time in seconds before the highlighted event",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 126
    },
    "spec_replay_message_time": {
        "data_type": "float",
        "default_value": "9.5",
        "description": "How long to show the message about Killer Replay after death. The best setting is a bit shorter than spec_replay_autostart_delay + spec_replay_leadup_time + spec_replay_winddown_time",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 214
    },
    "spec_replay_on_death": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When > 0, sets the mode whereas players see delayed replay, and are segregated into a domain of chat and voice separate from the alive players",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 216
    },
    "spec_replay_others_experimental": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Replay the last death of the round, if possible. Disabled on official servers by default. Experimental.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4307
    },
    "spec_replay_rate_base": {
        "data_type": "float",
        "default_value": "1",
        "description": "Base time scale of Killer Replay.Experimental.",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 340
    },
    "spec_replay_rate_limit": {
        "data_type": "float",
        "default_value": "3",
        "description": "Minimum allowable pause between replay requests in seconds",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 215
    },
    "spec_replay_rate_slowdown": {
        "data_type": "float",
        "default_value": "1",
        "description": "The part of Killer Replay right before death is played at this rate",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4300
    },
    "spec_replay_rate_slowdown_length": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "The part of Killer Replay right before death is played at this rate",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4301
    },
    "spec_replay_review_sound": {
        "data_type": "bool",
        "default_value": "true",
        "description": "When set to non-0, a sound effect is played during Killer Replay",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4299
    },
    "spec_replay_sound_fadein": {
        "data_type": "float",
        "default_value": "0.05",
        "description": "Amount of time in seconds it takes to fade in the audio before or after replay",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4304
    },
    "spec_replay_sound_fadeout": {
        "data_type": "float",
        "default_value": "0",
        "description": "Amount of time in seconds it takes to fade out the audio before or after replay",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4305
    },
    "spec_replay_victim_pov": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Killer Replay - replay from victim's point of view (1); the default is killer's (0). Experimental.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4309
    },
    "spec_replay_winddown_time": {
        "data_type": "float",
        "default_value": "2",
        "description": "The trailing time, in seconds, of replay past the event, including fade-out",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1803
    },
    "spec_track": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Tracks an entity in spec mode",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4259
    },
    "splitscreen_mode": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "archive, cheat",
        "flagsRaw": 16512,
        "hasDefensiveFlag": false,
        "index": 182
    },
    "ss_mimic": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Split screen users mimic base player's CUserCmds",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 4065
    },
    "ss_voice_hearpartner": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Route voice between splitscreen players on same system.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 225
    },
    "stats_collect_gpu": {
        "data_type": "bool",
        "default_value": "false",
        "description": "While doing stats_display, collect GPU perf counters. Used for stats_print_gpu.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 7
    },
    "stats_display": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Displays perf statistics information",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 6
    },
    "stats_highlight_interval": {
        "data_type": "float",
        "default_value": "10",
        "description": "Interval between hightlight screens in the transition stats panel",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4037
    },
    "steamlearn_data_submit_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Whether we should be submitting data to SteamLearn",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1775
    },
    "steamlearn_inference_http": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If we should use HTTP for inference queries",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1778
    },
    "steamlearn_max_in_flight": {
        "data_type": "int32",
        "default_value": "100",
        "description": "Maximum number of steamlearn requests that we can have in flight at once",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1780
    },
    "steamlearn_override_inference_access_tokens": {
        "data_type": "string",
        "default_value": "",
        "description": "Keys for overriding inference keys",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1776
    },
    "steamlearn_override_register_access_token": {
        "data_type": "string",
        "default_value": "",
        "description": "Key for overriding datasource registration key",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1777
    },
    "steamlearn_request_timeout_s": {
        "data_type": "float",
        "default_value": "5",
        "description": "Timeout in seconds for backend requests",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1779
    },
    "steamlearn_spew_um_times": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If we should spew how long inferences take to complete",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1781
    },
    "sticker_opening_force_quality": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2987
    },
    "sticker_opening_particle_emissionB_min": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2986
    },
    "sticker_opening_particle_emission_min": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2985
    },
    "sticker_opening_particle_velocity_min": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2984
    },
    "stickerbook_other_user_cache_time_s": {
        "data_type": "int32",
        "default_value": "1800",
        "description": "Numer of seconds to cache other users' stickerbooks",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2820
    },
    "stickerbook_self_cache_time_s": {
        "data_type": "int32",
        "default_value": "7200",
        "description": "Numer of seconds to cache other users' stickerbooks",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2821
    },
    "sticky_tooltips": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Don't ever hide tooltips. Helpful when debugging complicated tooltip layouts.",
        "flags": "devonly, client, hidden",
        "flagsRaw": 26,
        "hasDefensiveFlag": true,
        "index": 2407
    },
    "sv_accelerate": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, client, notify, replicated, release",
        "flagsRaw": 532748,
        "hasDefensiveFlag": false,
        "index": 1851
    },
    "sv_airaccelerate": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, client, notify, replicated, release",
        "flagsRaw": 532748,
        "hasDefensiveFlag": false,
        "index": 1852
    },
    "sv_allchat": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Players can receive all other players' text chat, no death restrictions",
        "flags": "game, notify, release",
        "flagsRaw": 524548,
        "hasDefensiveFlag": false,
        "index": 1874
    },
    "sv_alltalk": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Players can hear all other players' voice communication, no team restrictions",
        "flags": "game, notify, release",
        "flagsRaw": 2621700,
        "hasDefensiveFlag": false,
        "index": 1593
    },
    "sv_anim_queue_changes": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2271
    },
    "sv_anim_sequence_transitioner": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable animation sequence transitioner.",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": false,
        "index": 2272
    },
    "sv_autosave": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 1 to autosave game on level transition. Does not affect autosave triggers.",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1923
    },
    "sv_backspeed": {
        "data_type": "float",
        "default_value": "0.6",
        "description": "How much to slow down backwards motion",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1862
    },
    "sv_banid_dev_enabled": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 236
    },
    "sv_banid_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Whether server supports banid command",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 235
    },
    "sv_bounce": {
        "data_type": "float",
        "default_value": "0",
        "description": "Bounce multiplier for when physically simulated objects collide with other objects.",
        "flags": "game, client, notify, replicated, release",
        "flagsRaw": 532748,
        "hasDefensiveFlag": false,
        "index": 1859
    },
    "sv_cheats": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Allow cheats on server",
        "flags": "notify, replicated, release",
        "flagsRaw": 532736,
        "hasDefensiveFlag": false,
        "index": 378
    },
    "sv_client_max_interp_ratio": {
        "data_type": "float",
        "default_value": "5",
        "description": "This can be used to limit the value of cl_interp_ratio for connected clients (only while they are connected).",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1886
    },
    "sv_client_min_interp_ratio": {
        "data_type": "float",
        "default_value": "0",
        "description": "This can be used to limit the value of cl_interp_ratio for connected clients (only while they are connected).\n",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1885
    },
    "sv_client_predict": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "This can be used to force the value of cl_predict for connected clients (only while they are connected).\n   -1 = let clients set cl_predict to anything\n    0 = force cl_predict to 0\n    1 = force cl_predict to 1",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1887
    },
    "sv_clockcorrection_msecs": {
        "data_type": "float",
        "default_value": "60",
        "description": "The server tries to keep each player's m_nTickBase withing this many msecs of the server absolute tickcount",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 2068
    },
    "sv_cluster": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Data center cluster this server lives in.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 396
    },
    "sv_debug_client_not_in_pvs": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, draw failed client PVS checks with red box",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1590
    },
    "sv_debug_overlays_bandwidth": {
        "data_type": "int32",
        "default_value": "65536",
        "description": "Broadcast server debug overlays traffic",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 385
    },
    "sv_debug_overlays_broadcast": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Broadcast server debug overlays",
        "flags": "notify, cheat, release",
        "flagsRaw": 540928,
        "hasDefensiveFlag": false,
        "index": 386
    },
    "sv_dev_entitydeltapadding_extra_max": {
        "data_type": "int32",
        "default_value": "0",
        "description": "When encoding entity deltas, append on a random number of extra bytes.  This happens after sv_dev_entitydeltapadding_min_size.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 231
    },
    "sv_dev_entitydeltapadding_extra_min": {
        "data_type": "int32",
        "default_value": "0",
        "description": "When encoding entity deltas, append on a random number of extra bytes.  This happens after sv_dev_entitydeltapadding_min_size.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 230
    },
    "sv_dev_entitydeltapadding_min_size": {
        "data_type": "int32",
        "default_value": "0",
        "description": "When encoding entity deltas, if the delta size is < N bytes, then shove in N dummy bytes.  This happens before sv_dev_entitydeltapadding_extra_min/sv_dev_entitydeltapadding_extra_max",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 229
    },
    "sv_disable_querycache": {
        "data_type": "bool",
        "default_value": "false",
        "description": "debug - disable trace query cache",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1750
    },
    "sv_disable_reliable_delta_retransmit": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Assume that a reliable entity delta will be ack'ed and send future deltas relative to the last reliable delta.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 219
    },
    "sv_dota_auto_save_interval": {
        "data_type": "float",
        "default_value": "300",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1983
    },
    "sv_dota_auto_save_min_players": {
        "data_type": "int32",
        "default_value": "10",
        "description": "minimum number of players in the game to allow saves",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1985
    },
    "sv_dota_auto_save_test": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Force saves of bot games",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1986
    },
    "sv_dota_auto_save_test_interval": {
        "data_type": "float",
        "default_value": "120",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1987
    },
    "sv_dota_auto_save_test_interval_futz": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1988
    },
    "sv_dota_crash_sentinel_filename": {
        "data_type": "string",
        "default_value": "",
        "description": "Filename of crash detection sentinel",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1313
    },
    "sv_dota_custom_game_cache_download_stuck_mb": {
        "data_type": "float",
        "default_value": "1",
        "description": "We must download N megabytes within sv_dota_custom_game_cache_download_stuck_timeout seconds, or else we'll assume the download is stuck and give up",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1319
    },
    "sv_dota_custom_game_cache_download_stuck_timeout": {
        "data_type": "float",
        "default_value": "30",
        "description": "Every N seconds, we must make download progress of at least sv_dota_custom_game_cache_download_stuck_mb megabytes, or else we'll assume the download is stuck and give up",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1318
    },
    "sv_dota_custom_game_cache_download_timeout_total": {
        "data_type": "float",
        "default_value": "300",
        "description": "If we cannot finish downloading after N seconds, give up",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1317
    },
    "sv_dota_custom_game_cache_lock_file_timeout": {
        "data_type": "float",
        "default_value": "30",
        "description": "If we cannot acquire lock on shared cache in N seconds, give up and fail UGC install",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1316
    },
    "sv_dota_custom_game_cache_shared_folder": {
        "data_type": "string",
        "default_value": "custom_game_cache",
        "description": "Shared cache for downloaded custom game data.  (Dedicated server only)",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1315
    },
    "sv_dota_league_auto_save_interval": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1984
    },
    "sv_dota_save_games": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable save game code",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1982
    },
    "sv_dota_server_send_modifiers_using_buf_reliable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1999
    },
    "sv_dota_speech_announcer_networking": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Set to 0 to prevent announcer speech from being matched on the client; match it on the server instead, like the old way.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1489
    },
    "sv_enable_alternate_baselines": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Allow alternate baseline system, set to 2 for debugging spew.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 252
    },
    "sv_enable_delta_packing": {
        "data_type": "bool",
        "default_value": "true",
        "description": "When enabled, this allows for entity packing to use the property changes for building up the data. This is many times faster, but can be disabled for error checking.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 249
    },
    "sv_enable_donttransmit": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When encoding entity deltas, instead of unreliably deducing explicit deletions, actually send list of existing but not networked entities (dont_transmit list) to each client.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 232
    },
    "sv_enable_pvs_vis_bits": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 253
    },
    "sv_ent_showonlyhitbox": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1956
    },
    "sv_ents_write_alarm": {
        "data_type": "float",
        "default_value": "0",
        "description": "Print callstack every time CNetworkGameServerBase::WriteEntityUpdate takes more than this amount of milliseconds",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 233
    },
    "sv_extra_client_connect_time": {
        "data_type": "float",
        "default_value": "15",
        "description": "Seconds after client connect during which extra frames are buffered to prevent non-delta'd update",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 221
    },
    "sv_fake_dropped_ucmd_interval": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1941
    },
    "sv_filterban": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Set packet filtering by IP mode",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 234
    },
    "sv_footsteps": {
        "data_type": "float",
        "default_value": "1",
        "description": "Play footstep sound for players",
        "flags": "devonly, game, client, notify, replicated",
        "flagsRaw": 8462,
        "hasDefensiveFlag": false,
        "index": 1855
    },
    "sv_force_transmit_ents": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Will transmit all entities to client, regardless of PVS conditions (will still skip based on transmit flags, however).",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1821
    },
    "sv_fps_max": {
        "data_type": "float",
        "default_value": "0",
        "description": "Dedicated server frame rate limiter. 0=tick rate. Only applies to the dedicated server.",
        "flags": "devonly, hidden",
        "flagsRaw": 18,
        "hasDefensiveFlag": true,
        "index": 34
    },
    "sv_friction": {
        "data_type": "float",
        "default_value": "4",
        "description": "World friction.",
        "flags": "game, client, notify, replicated, release",
        "flagsRaw": 532748,
        "hasDefensiveFlag": false,
        "index": 1858
    },
    "sv_gameinstructor_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force all clients to disable their game instructors.",
        "flags": "client, replicated, release",
        "flagsRaw": 532488,
        "hasDefensiveFlag": false,
        "index": 4186
    },
    "sv_gameinstructor_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Force all clients to enable their game instructors.",
        "flags": "client, replicated, release",
        "flagsRaw": 532488,
        "hasDefensiveFlag": false,
        "index": 4185
    },
    "sv_gravity": {
        "data_type": "float",
        "default_value": "800",
        "description": "World gravity.",
        "flags": "game, client, notify, replicated, release",
        "flagsRaw": 532748,
        "hasDefensiveFlag": false,
        "index": 2327
    },
    "sv_hibernate_postgame_delay": {
        "data_type": "float",
        "default_value": "5",
        "description": "# of seconds to wait after final client leaves before hibernating.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 391
    },
    "sv_hibernate_when_empty": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Puts the server into extremely low CPU usage mode when no clients connected",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 392
    },
    "sv_hide_ent_in_pvs": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1824
    },
    "sv_hitbox_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2338
    },
    "sv_hosting_lobby": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, replicated",
        "flagsRaw": 8194,
        "hasDefensiveFlag": false,
        "index": 206
    },
    "sv_hoststate_quit_syscall": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When enabled, game server will quit immediately via syscall instead of running host states shutdown sequence",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 39
    },
    "sv_infinite_ammo": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Player's active weapon will never run out of ammo",
        "flags": "game, client, replicated, cheat, release",
        "flagsRaw": 2646028,
        "hasDefensiveFlag": false,
        "index": 1948
    },
    "sv_instancebaselines": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable instanced baselines. Saves network overhead.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 397
    },
    "sv_lagcompensationforcerestore": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Don't test validity of a lag comp restore, just do it.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1722
    },
    "sv_lan": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Server is a lan server ( no heartbeat, no authentication, no non-class C addresses )",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 379
    },
    "sv_late_commands_allowed": {
        "data_type": "int32",
        "default_value": "5",
        "description": "Allow N late commands to run at 0 timescale prior to running an on-time command. Negative values for network round trip based calculation with a hard cap of the of absolute value",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1936
    },
    "sv_lightquery_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2315
    },
    "sv_log_change_offsets": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Log change offsets to game/varchangeinfoN.log files.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2279
    },
    "sv_log_onefile": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Log server information to only one file.",
        "flags": "archive, release",
        "flagsRaw": 524416,
        "hasDefensiveFlag": false,
        "index": 245
    },
    "sv_logbans": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Log server bans in the server logs.",
        "flags": "archive, release",
        "flagsRaw": 524416,
        "hasDefensiveFlag": false,
        "index": 246
    },
    "sv_logblocks": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If true when log when a query is blocked (can cause very large log files)",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 240
    },
    "sv_logecho": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Echo log information to the console.",
        "flags": "archive, release",
        "flagsRaw": 524416,
        "hasDefensiveFlag": false,
        "index": 244
    },
    "sv_logfile": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Log server information in the log file.",
        "flags": "archive, release",
        "flagsRaw": 524416,
        "hasDefensiveFlag": false,
        "index": 242
    },
    "sv_logflush": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Flush the log file to disk on each write (slow).",
        "flags": "archive, release",
        "flagsRaw": 524416,
        "hasDefensiveFlag": false,
        "index": 243
    },
    "sv_logsdir": {
        "data_type": "string",
        "default_value": "logs",
        "description": "Folder in the game directory where server logs will be stored.",
        "flags": "archive, release",
        "flagsRaw": 524416,
        "hasDefensiveFlag": false,
        "index": 241
    },
    "sv_long_frame_ms": {
        "data_type": "float",
        "default_value": "0",
        "description": "If a server frame takes longer than N ms, complain about it.  (Dedicated server only.)  See also engine_enable_frametime_warnings.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 52
    },
    "sv_massreport": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2312
    },
    "sv_max_change_offsets": {
        "data_type": "int32",
        "default_value": "48",
        "description": "How many network changes to track before requiring full diff check.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2281
    },
    "sv_max_queries_sec": {
        "data_type": "float",
        "default_value": "3",
        "description": "Maximum queries per second to respond to from a single IP address.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 237
    },
    "sv_max_queries_sec_global": {
        "data_type": "float",
        "default_value": "60",
        "description": "Maximum queries per second to respond to from anywhere.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 239
    },
    "sv_max_queries_window": {
        "data_type": "float",
        "default_value": "30",
        "description": "Window over which to average queries per second averages.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 238
    },
    "sv_max_unreliable_delta_size": {
        "data_type": "int32",
        "default_value": "4096",
        "description": "Maximum allowable entity delta size over unreliable delivery.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 218
    },
    "sv_maxclientframes": {
        "data_type": "int32",
        "default_value": "128",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 220
    },
    "sv_maxrate": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Max bandwidth rate allowed on server, 0 == unlimited",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 19
    },
    "sv_maxreplay": {
        "data_type": "float",
        "default_value": "0",
        "description": "Maximum replay time in seconds",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 222
    },
    "sv_maxspeed": {
        "data_type": "float",
        "default_value": "320",
        "description": "",
        "flags": "game, client, notify, replicated, release",
        "flagsRaw": 532748,
        "hasDefensiveFlag": false,
        "index": 1850
    },
    "sv_maxunlag": {
        "data_type": "float",
        "default_value": "1",
        "description": "Maximum lag compensation in seconds",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1720
    },
    "sv_maxupdaterate": {
        "data_type": "float",
        "default_value": "60",
        "description": "Maximum updates per second that the server will allow",
        "flags": "game, client, replicated, release",
        "flagsRaw": 532492,
        "hasDefensiveFlag": false,
        "index": 1883
    },
    "sv_maxvelocity": {
        "data_type": "float",
        "default_value": "3500",
        "description": "Maximum speed any ballistically moving object is allowed to attain per axis.",
        "flags": "game, client, replicated, release",
        "flagsRaw": 532492,
        "hasDefensiveFlag": false,
        "index": 1860
    },
    "sv_memlimit": {
        "data_type": "int32",
        "default_value": "0",
        "description": "If set, whenever a game ends, if the total memory used by the server is greater than this # of megabytes, the server will exit.",
        "flags": "cheat, release",
        "flagsRaw": 540672,
        "hasDefensiveFlag": false,
        "index": 390
    },
    "sv_merge_changes_after_tick_with_calcdelta": {
        "data_type": "int32",
        "default_value": "1",
        "description": "This fixes bugs where pure calcdelta is used due to recipient changing but it doesn't pick up a field change where the value was changed back to same value as the from snapshot even though the destination fields change list does note the change. Set to 2 to spew any changes merged in by this fix.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 228
    },
    "sv_minrate": {
        "data_type": "int32",
        "default_value": "5000",
        "description": "Min bandwidth rate allowed on server, 0 == unlimited",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 20
    },
    "sv_minupdaterate": {
        "data_type": "float",
        "default_value": "10",
        "description": "Minimum updates per second that the server will allow",
        "flags": "game, client, replicated, release",
        "flagsRaw": 532492,
        "hasDefensiveFlag": false,
        "index": 1884
    },
    "sv_mldemo_delete_on_record_abort": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1324
    },
    "sv_mldemo_dir": {
        "data_type": "string",
        "default_value": "replays",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1320
    },
    "sv_mldemo_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1321
    },
    "sv_mldemo_gc_enabled": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1322
    },
    "sv_mldemo_matchmade_only": {
        "data_type": "int32",
        "default_value": "2",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1323
    },
    "sv_mmqueue_reservation": {
        "data_type": "string",
        "default_value": "",
        "description": "Server queue reservation",
        "flags": "devonly, norecord",
        "flagsRaw": 131074,
        "hasDefensiveFlag": false,
        "index": 207
    },
    "sv_mmqueue_reservation_extended_timeout": {
        "data_type": "int32",
        "default_value": "21",
        "description": "Extended time in seconds before mmqueue reservation expires.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 209
    },
    "sv_mmqueue_reservation_timeout": {
        "data_type": "int32",
        "default_value": "21",
        "description": "Time in seconds before mmqueue reservation expires.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 208
    },
    "sv_mover_maxslope": {
        "data_type": "float",
        "default_value": "0.7",
        "description": "The maximum slope the player can overcome [-]",
        "flags": "devonly, game, client, notify, replicated",
        "flagsRaw": 8462,
        "hasDefensiveFlag": true,
        "index": 1866
    },
    "sv_mover_pogodampingratio": {
        "data_type": "float",
        "default_value": "1",
        "description": "The capsule pogo stick damping ratio [-]",
        "flags": "devonly, game, client, notify, replicated",
        "flagsRaw": 8462,
        "hasDefensiveFlag": true,
        "index": 1865
    },
    "sv_mover_pogofrequency": {
        "data_type": "float",
        "default_value": "10",
        "description": "The capsule pogo stick frequency [hz].",
        "flags": "devonly, game, client, notify, replicated",
        "flagsRaw": 8462,
        "hasDefensiveFlag": true,
        "index": 1864
    },
    "sv_networkvar_perfieldtracking": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Track individual field offset changes, rather than a single dirty flag for the whole entity.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 251
    },
    "sv_networkvar_validate": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Validate each StateChanged against known offsets.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 248
    },
    "sv_no_navmesh": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Block loading of the navmesh. Unplayable, only used for memory sampling.",
        "flags": "devonly, game, cheat",
        "flagsRaw": 16390,
        "hasDefensiveFlag": false,
        "index": 1246
    },
    "sv_noclipaccelerate": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "game, client, archive, notify, replicated",
        "flagsRaw": 8588,
        "hasDefensiveFlag": false,
        "index": 1844
    },
    "sv_noclipduringpause": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If cheats are enabled, then you can noclip with the game paused (for doing screenshots, etc.).",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1943
    },
    "sv_noclipfriction": {
        "data_type": "float",
        "default_value": "4",
        "description": "Friction during noclip move.",
        "flags": "game, client, archive, notify, replicated",
        "flagsRaw": 8588,
        "hasDefensiveFlag": false,
        "index": 1846
    },
    "sv_noclipspeed": {
        "data_type": "float",
        "default_value": "1200",
        "description": "",
        "flags": "game, client, archive, notify, replicated",
        "flagsRaw": 8588,
        "hasDefensiveFlag": false,
        "index": 1845
    },
    "sv_parallel_checktransmit": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set to 1 to use threaded checkentities for transmit/pvs on listen servers, 2 for dedicated servers.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1823
    },
    "sv_parallel_packentities": {
        "data_type": "int32",
        "default_value": "2",
        "description": "Set to 1 to use threaded snapshot sending on listen servers, 2 for dedicated servers.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 247
    },
    "sv_parallel_sendsnapshot": {
        "data_type": "int32",
        "default_value": "2",
        "description": "0: run all send jobs on main thread; 1: send jobs run asynchronously (except on dedicated server); 2: send jobs asynchronously; 3: send jobs run in parallel but block to not overlap the next tick; 4: main server clients' send jobs run in parallel, then HLTV server jobs; this approximately matches pre-async profile for a single HLTV server configuration",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 383
    },
    "sv_password": {
        "data_type": "string",
        "default_value": "",
        "description": "Server password for entry into multiplayer games",
        "flags": "prot, notify, norecord, release",
        "flagsRaw": 655648,
        "hasDefensiveFlag": false,
        "index": 399
    },
    "sv_pausable": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Is the server pausable.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 380
    },
    "sv_pausable_dev": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Whether listen server is pausable when running -dev and playing solo against bots",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 374
    },
    "sv_pausable_dev_ds": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Whether dedicated server is pausable when running -dev and playing solo against bots",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 375
    },
    "sv_pause_on_console_open": {
        "data_type": "bool",
        "default_value": "false",
        "description": "1 = Pause the game when pressing ~ to open the console. CTRL+~ opens the console without pause.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 148
    },
    "sv_phys_animated_hierarchy": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2322
    },
    "sv_phys_debug_callback_entities": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Print all entities that get touch callbacks. Each entity is printed only once.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2334
    },
    "sv_phys_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable all physics simulation",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2319
    },
    "sv_phys_sleep_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable sleeping for dynamic physics bodies.",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2321
    },
    "sv_phys_stop_at_collision": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 2320
    },
    "sv_phys_visualize_awake": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2331
    },
    "sv_player_search_range": {
        "data_type": "float",
        "default_value": "64",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1747
    },
    "sv_pure_kick_clients": {
        "data_type": "bool",
        "default_value": "true",
        "description": "If set to 1, the server will kick clients with mismatching files. Otherwise, it will issue a warning to the client.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 376
    },
    "sv_pure_trace": {
        "data_type": "int32",
        "default_value": "0",
        "description": "If set to 1, the server will print a message whenever a client is verifying a CRC for a file.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 377
    },
    "sv_pushaway_clientside_size": {
        "data_type": "float",
        "default_value": "15",
        "description": "Minimum size of pushback objects",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 2301
    },
    "sv_pvs_entity": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "If set, only allows this ent index to network (other than players and things that force sending).",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2282
    },
    "sv_pvs_max_distance": {
        "data_type": "float",
        "default_value": "0",
        "description": "if set, adds a maximum range to PVS/PAS checks",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 382
    },
    "sv_pvs_random": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, objects blink in/out of pvs randomly.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2283
    },
    "sv_ragdoll_lru_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, replicated, cheat",
        "flagsRaw": 24580,
        "hasDefensiveFlag": false,
        "index": 1753
    },
    "sv_rcon_banpenalty": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Number of minutes to ban users who fail rcon authentication",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 257
    },
    "sv_rcon_log": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable/disable rcon logging.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 261
    },
    "sv_rcon_maxfailures": {
        "data_type": "int32",
        "default_value": "10",
        "description": "Max number of times a user can fail rcon authentication before being banned",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 258
    },
    "sv_rcon_minfailures": {
        "data_type": "int32",
        "default_value": "5",
        "description": "Number of times a user can fail rcon authentication in sv_rcon_minfailuretime before being banned",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 259
    },
    "sv_rcon_minfailuretime": {
        "data_type": "float",
        "default_value": "30",
        "description": "Number of seconds to track failed rcon authentications",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 260
    },
    "sv_regeneration_force_on": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Cheat to test regenerative health systems",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1762
    },
    "sv_regeneration_wait_time": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": true,
        "index": 1793
    },
    "sv_region": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "The region of the world to report this server in.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 395
    },
    "sv_remapper_loopsoundfix": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1748
    },
    "sv_remapper_range_multiplier": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1746
    },
    "sv_remove_ent_from_pvs": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1831
    },
    "sv_replaysdir": {
        "data_type": "string",
        "default_value": "replays",
        "description": "Directory to store replays in",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 108
    },
    "sv_reserve_slots_for_reconnecting_players_kick_prior": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Kick a previously connected player with the same steamID if a replacement comes along",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 389
    },
    "sv_rollangle": {
        "data_type": "float",
        "default_value": "0",
        "description": "Max view roll angle",
        "flags": "devonly, game, client, notify, replicated",
        "flagsRaw": 8462,
        "hasDefensiveFlag": false,
        "index": 1857
    },
    "sv_rollspeed": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "devonly, game, client, notify, replicated",
        "flagsRaw": 8462,
        "hasDefensiveFlag": false,
        "index": 1856
    },
    "sv_script_think_interval": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2290
    },
    "sv_search_key": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 394
    },
    "sv_sendtables": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Force full sendtable sending path.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 224
    },
    "sv_sequence_debug": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2062
    },
    "sv_sequence_debug2": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2063
    },
    "sv_sequence_debug_verbose": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2273
    },
    "sv_sequence_model_substring": {
        "data_type": "string",
        "default_value": "",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2064
    },
    "sv_shared_team_pvs": {
        "data_type": "bool",
        "default_value": "true",
        "description": "PVS is shared between teams",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1830
    },
    "sv_showlagcompensation": {
        "data_type": "float",
        "default_value": "0",
        "description": "If > 0, show lag compensated hitboxes whenever a player is lag compensated. Value is for how long.",
        "flags": "game, client, replicated, cheat",
        "flagsRaw": 24588,
        "hasDefensiveFlag": false,
        "index": 1891
    },
    "sv_showlagcompensation_rec": {
        "data_type": "float",
        "default_value": "0",
        "description": "If > 0, show lag compensation hitboxes as they're recorded. Value is for how long.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1721
    },
    "sv_shutdown_immediately_on_request": {
        "data_type": "bool",
        "default_value": "false",
        "description": "The server will always shutdown on receiving the shutdown request, even if not hibernating",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 393
    },
    "sv_skel_constraints_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "replicated, cheat",
        "flagsRaw": 24576,
        "hasDefensiveFlag": false,
        "index": 564
    },
    "sv_skip_update_animations": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Enable to skip game animations",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2307
    },
    "sv_skyname": {
        "data_type": "string",
        "default_value": "sky_urb01",
        "description": "Current name of the skybox texture",
        "flags": "game, client, archive, replicated",
        "flagsRaw": 8332,
        "hasDefensiveFlag": false,
        "index": 384
    },
    "sv_snapshot_unlimited": {
        "data_type": "bool",
        "default_value": "false",
        "description": "For debugging, don't throw away old snapshots so that if you break in debugger (on remote client or server) it won't require an uncompressed update to resume.  You may run out of memory of course...",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 211
    },
    "sv_specaccelerate": {
        "data_type": "float",
        "default_value": "5",
        "description": "",
        "flags": "game, client, archive, notify, replicated",
        "flagsRaw": 8588,
        "hasDefensiveFlag": false,
        "index": 1847
    },
    "sv_specnoclip": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, client, archive, notify, replicated",
        "flagsRaw": 8588,
        "hasDefensiveFlag": false,
        "index": 1849
    },
    "sv_specspeed": {
        "data_type": "float",
        "default_value": "1200",
        "description": "",
        "flags": "game, client, archive, notify, replicated",
        "flagsRaw": 8588,
        "hasDefensiveFlag": false,
        "index": 1848
    },
    "sv_stats": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Collect CPU usage stats",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 398
    },
    "sv_steamgroup": {
        "data_type": "string",
        "default_value": "",
        "description": "The ID of the steam group that this server belongs to. You can find your group's ID on the admin profile page in the steam community.",
        "flags": "notify, release",
        "flagsRaw": 524544,
        "hasDefensiveFlag": false,
        "index": 204
    },
    "sv_steamgroup_exclusive": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, only members of Steam group will be able to join the server when it's empty, public people will be able to join the server only if it has players.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 205
    },
    "sv_stepsize": {
        "data_type": "float",
        "default_value": "18",
        "description": "",
        "flags": "devonly, game, client, notify, replicated",
        "flagsRaw": 8462,
        "hasDefensiveFlag": false,
        "index": 1861
    },
    "sv_stopspeed": {
        "data_type": "float",
        "default_value": "100",
        "description": "Minimum stopping speed when on ground.",
        "flags": "game, client, notify, replicated, release",
        "flagsRaw": 532748,
        "hasDefensiveFlag": false,
        "index": 1843
    },
    "sv_stressbots": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set to 1, the server calculates data and fills packets to bots. Used for perf testing.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 223
    },
    "sv_strict_notarget": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If set, notarget will cause entities to never think they are in the pvs",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1591
    },
    "sv_suppress_friendlyfire_decals": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 2067
    },
    "sv_suppress_viewpunch": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated, cheat",
        "flagsRaw": 24590,
        "hasDefensiveFlag": false,
        "index": 1934
    },
    "sv_tags": {
        "data_type": "string",
        "default_value": "",
        "description": "Server tags. Used to provide extra information to clients when they're browsing for servers. Separate tags with a comma.",
        "flags": "notify, release",
        "flagsRaw": 524544,
        "hasDefensiveFlag": false,
        "index": 400
    },
    "sv_temp_baseline_string_table_buffer_size": {
        "data_type": "int32",
        "default_value": "524288",
        "description": "Buffer size for writing string table baselines",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 276
    },
    "sv_timeout": {
        "data_type": "float",
        "default_value": "20",
        "description": "After this many seconds without a message from fully connected client, the client is dropped",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 212
    },
    "sv_timeout_when_fully_connected": {
        "data_type": "float",
        "default_value": "15",
        "description": "Once fully connected, player will be kicked if he doesn't send a network message within this interval.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2157
    },
    "sv_timeout_when_fully_connected_customgame": {
        "data_type": "float",
        "default_value": "30",
        "description": "Once fully connected in a custom game game, player will be kicked if they don't send a network message within this interval.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2159
    },
    "sv_timeout_when_fully_connected_event": {
        "data_type": "float",
        "default_value": "60",
        "description": "Once fully connected in an event game, player will be kicked if they don't send a network message within this interval.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2160
    },
    "sv_timeout_when_fully_connected_tournament": {
        "data_type": "float",
        "default_value": "5",
        "description": "Once fully connected in a tournament game, player will be kicked if he doesn't send a network message within this interval.",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2158
    },
    "sv_unlag": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enables player lag compensation",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1719
    },
    "sv_unlag_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1724
    },
    "sv_unlag_fixstuck": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Disallow backtracking a player for lag compensation if it will cause them to become stuck",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1723
    },
    "sv_unlockedchapters": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Highest unlocked game chapter.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 270
    },
    "sv_unpause_on_console_close": {
        "data_type": "bool",
        "default_value": "true",
        "description": "1 = Unpause the game when pressing ~ to close the console. 0 = Leave the game paused.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 149
    },
    "sv_usenetworkvars": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Use networkvar system.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 250
    },
    "sv_usercmd_custom_random_seed": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When enabled server will populate an additional random seed independent of the client",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1942
    },
    "sv_usercmd_queue_spew_threshold": {
        "data_type": "int32",
        "default_value": "10",
        "description": "Spew warning if command queue has grown above this many backlogged commands.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1880
    },
    "sv_visiblemaxplayers": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "Overrides the max players reported to prospective clients",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 203
    },
    "sv_voicecodec": {
        "data_type": "string",
        "default_value": "vaudio_speex",
        "description": "Specifies which voice codec DLL to use in a game. Set to the name of the DLL without the extension.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 381
    },
    "sv_voiceenable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "archive, notify, release",
        "flagsRaw": 524672,
        "hasDefensiveFlag": false,
        "index": 387
    },
    "sv_watchtransmit": {
        "data_type": "int32",
        "default_value": "-2",
        "description": "Watch NetworkStateChanged info for this entity index.",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 2280
    },
    "sv_wateraccelerate": {
        "data_type": "float",
        "default_value": "10",
        "description": "",
        "flags": "game, client, notify, replicated, release",
        "flagsRaw": 532748,
        "hasDefensiveFlag": false,
        "index": 1853
    },
    "sv_waterdist": {
        "data_type": "float",
        "default_value": "12",
        "description": "Vertical view fixup when eyes are near water plane.",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": false,
        "index": 1863
    },
    "sv_waterfriction": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "game, client, notify, replicated, release",
        "flagsRaw": 532748,
        "hasDefensiveFlag": false,
        "index": 1854
    },
    "sys_minidumpexpandedspew": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 21
    },
    "sys_minidumpspewlines": {
        "data_type": "int32",
        "default_value": "2000",
        "description": "Lines of crash dump console spew to keep.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 18
    },
    "target_scan_use_query_cache": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1789
    },
    "teleport_trigger_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1589
    },
    "test_arcana_initial_info": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 2394
    },
    "test_arcana_vote_count": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2395
    },
    "test_arcana_vote_ui": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client, cheat",
        "flagsRaw": 16394,
        "hasDefensiveFlag": false,
        "index": 2393
    },
    "test_restoreonnewmodel": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 1952
    },
    "testscript_debug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Debug test scripts.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 0
    },
    "think_limit": {
        "data_type": "float",
        "default_value": "10",
        "description": "Maximum think time in milliseconds, warning is printed if this is exceeded.",
        "flags": "game, client, replicated, release",
        "flagsRaw": 532492,
        "hasDefensiveFlag": false,
        "index": 1696
    },
    "ti11_show_frontpage_winner": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3035
    },
    "ti11_takeover_force_bilibili": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3032
    },
    "ti11_takeover_force_stream": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3030
    },
    "ti11_takeover_force_youtube": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3033
    },
    "ti11_takeover_spoilers_blocked": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Avoid spoilers for takeover matches",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3031
    },
    "ti11_takeover_time_override": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3029
    },
    "ti11_upcoming_events_time_override": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3034
    },
    "ti12_live_video_fake_steam_account": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "Fake the steam account for live video",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3196
    },
    "ti12_live_video_fake_timestamp": {
        "data_type": "uint32",
        "default_value": "0",
        "description": "Fake the timestamp used for calculating the live video timestamp",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3194
    },
    "ti12_live_video_fake_twitch_channel": {
        "data_type": "string",
        "default_value": "",
        "description": "Fake the twitch stream for live video",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3195
    },
    "ti12_live_video_spoilers_blocked": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Avoid spoilers for frontpage matches",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3193
    },
    "ti12_live_video_update_interval_s": {
        "data_type": "float",
        "default_value": "30",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3197
    },
    "tier_treasure_mockup_item_offset_y": {
        "data_type": "float",
        "default_value": "200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2974
    },
    "tier_treasure_mockup_tier_offset_x": {
        "data_type": "float",
        "default_value": "-200",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2975
    },
    "tier_treasure_mockup_tier_offset_z": {
        "data_type": "float",
        "default_value": "100",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2976
    },
    "timedemo_end": {
        "data_type": "string",
        "default_value": "-1",
        "description": "Ends timedemo on given tick.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 309
    },
    "timedemo_start": {
        "data_type": "string",
        "default_value": "-1",
        "description": "Starts timedemo on given tick.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 308
    },
    "tool_spawned_model_scales": {
        "data_type": "Vector3",
        "default_value": "1 1 1",
        "description": "",
        "flags": "devonly, game, replicated",
        "flagsRaw": 8198,
        "hasDefensiveFlag": false,
        "index": 1784
    },
    "tools_stall_monitor_break_on_unknown_cause": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Break on unknown stall cause",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 1
    },
    "treasure_escalating_rares_popup_seen": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 2983
    },
    "treasure_opening_particle_emissionB_max": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2982
    },
    "treasure_opening_particle_emissionB_min": {
        "data_type": "float",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2981
    },
    "treasure_opening_particle_emission_max": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2980
    },
    "treasure_opening_particle_emission_min": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2979
    },
    "treasure_opening_particle_velocity_max": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2978
    },
    "treasure_opening_particle_velocity_min": {
        "data_type": "float",
        "default_value": "0.1",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2977
    },
    "truesight_force_ended": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3042
    },
    "truesight_force_live": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3041
    },
    "tv_advertise_watchable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "GOTV advertises the match as watchable via game UI, clients watching via UI will not need to type password",
        "flags": "prot, notify, norecord, release",
        "flagsRaw": 655648,
        "hasDefensiveFlag": false,
        "index": 116
    },
    "tv_allow_autorecording_index": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "When >=0 restricts autorecording only to the specified TV index",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1839
    },
    "tv_allow_camera_man": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Auto director allows spectators to become camera man",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1837
    },
    "tv_allow_static_shots": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Auto director uses fixed level cameras for shots",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1836
    },
    "tv_autorecord": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Automatically records all games as SourceTV demos.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 130
    },
    "tv_autoretry": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Relay proxies retry connection after network timeout",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 302
    },
    "tv_broadcast": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Automatically broadcasts all games as GOTV demos through Steam.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 131
    },
    "tv_broadcast1": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Automatically broadcasts all games as GOTV[1] demos through Steam.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 132
    },
    "tv_broadcast_drop_fragments": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Drop every Nth fragment",
        "flags": "hidden, release",
        "flagsRaw": 524304,
        "hasDefensiveFlag": false,
        "index": 289
    },
    "tv_broadcast_keyframe_interval": {
        "data_type": "float",
        "default_value": "3",
        "description": "The frequency, in seconds, of sending keyframes and delta fragments to the broadcast relay server",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 284
    },
    "tv_broadcast_keyframe_interval1": {
        "data_type": "float",
        "default_value": "3",
        "description": "The frequency, in seconds, of sending keyframes and delta fragments to the broadcast1 relay server",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 285
    },
    "tv_broadcast_max_requests": {
        "data_type": "int32",
        "default_value": "20",
        "description": "Max number of broadcast http requests in flight. If there is a network issue, the requests may start piling up, degrading server performance. If more than the specified number of requests are in flight, the new requests are dropped.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 287
    },
    "tv_broadcast_max_requests1": {
        "data_type": "int32",
        "default_value": "20",
        "description": "Max number of broadcast1 http requests in flight. If there is a network issue, the requests may start piling up, degrading server performance. If more than the specified number of requests are in flight, the new requests are dropped.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 288
    },
    "tv_broadcast_origin_auth": {
        "data_type": "string",
        "default_value": "gocastauth",
        "description": "X-Origin-Auth header of the broadcast POSTs",
        "flags": "hidden, release",
        "flagsRaw": 524304,
        "hasDefensiveFlag": false,
        "index": 291
    },
    "tv_broadcast_origin_auth1": {
        "data_type": "string",
        "default_value": "gocastauth",
        "description": "X-Origin-Auth header of the broadcast1 POSTs",
        "flags": "hidden, release",
        "flagsRaw": 524304,
        "hasDefensiveFlag": false,
        "index": 292
    },
    "tv_broadcast_origin_delay": {
        "data_type": "float",
        "default_value": "0",
        "description": "Injection delay request for CDN rebroadcast frameworks, seconds",
        "flags": "hidden, release",
        "flagsRaw": 524304,
        "hasDefensiveFlag": false,
        "index": 293
    },
    "tv_broadcast_startup_resend_interval": {
        "data_type": "float",
        "default_value": "10",
        "description": "The interval, in seconds, of re-sending startup data to the broadcast relay server (useful in case relay crashes, restarts or startup data http request fails)",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 286
    },
    "tv_broadcast_terminate": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Terminate every broadcast with a stop command",
        "flags": "hidden, release",
        "flagsRaw": 524304,
        "hasDefensiveFlag": false,
        "index": 290
    },
    "tv_broadcast_url": {
        "data_type": "string",
        "default_value": "http://localhost:8080",
        "description": "URL of the broadcast relay",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 128
    },
    "tv_broadcast_url1": {
        "data_type": "string",
        "default_value": "http://localhost:8080",
        "description": "URL of the broadcast relay1",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 129
    },
    "tv_chatgroupsize": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Set the default chat group size",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 298
    },
    "tv_chattimelimit": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "Limits spectators to chat only every n seconds",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 297
    },
    "tv_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "SourceTV debug info.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 119
    },
    "tv_delay": {
        "data_type": "int32",
        "default_value": "120",
        "description": "SourceTV broadcast delay in seconds",
        "flags": "game, release",
        "flagsRaw": 2621444,
        "hasDefensiveFlag": false,
        "index": 1834
    },
    "tv_delay1": {
        "data_type": "int32",
        "default_value": "15",
        "description": "SourceTV[instance 1] broadcast delay in seconds",
        "flags": "game, release",
        "flagsRaw": 2621444,
        "hasDefensiveFlag": false,
        "index": 1835
    },
    "tv_deltacache": {
        "data_type": "int32",
        "default_value": "2",
        "description": "Enable delta entity bit stream cache",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 137
    },
    "tv_demo_starttick": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 109
    },
    "tv_dispatchmode": {
        "data_type": "int32",
        "default_value": "1",
        "description": "Dispatch clients to relay proxies: 0=never, 1=if appropriate, 2=always",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 118
    },
    "tv_dota_auto_record": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, a demo will automatically be recorded for every game",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1636
    },
    "tv_dota_auto_record_stressbots": {
        "data_type": "bool",
        "default_value": "false",
        "description": "If enabled, a demo will automatically be recorded for stressbot games",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1637
    },
    "tv_enable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Activates SourceTV on server.",
        "flags": "notify, release",
        "flagsRaw": 524544,
        "hasDefensiveFlag": false,
        "index": 173
    },
    "tv_enable1": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Activates SourceTV[1] on server.",
        "flags": "notify, release",
        "flagsRaw": 524544,
        "hasDefensiveFlag": false,
        "index": 174
    },
    "tv_enable_delta_frames": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Indicates whether or not the tv should use delta frames for storage of intermediate frames. This takes more CPU but significantly less memory.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 135
    },
    "tv_enable_dynamic": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When enabled, changes in tv_enable convars cause immediate startup or shutdown of hltv server",
        "flags": "notify, release",
        "flagsRaw": 524544,
        "hasDefensiveFlag": false,
        "index": 172
    },
    "tv_extended_logging": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 133
    },
    "tv_grouprelaydatareliable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When enabled, this will collect all information for relay sending into a single datagram to ensure that the data stays together through a potentially large number of relays",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 299
    },
    "tv_grouprelaydataunreliable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "When enabled, this will collect all information for relay sending into a single datagram to ensure that the data stays together through a potentially large number of relays",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 300
    },
    "tv_grouprelaydatavoice": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Similar to tv_grouprelaydata, but controls whether or not the voice channels should be routed into the grouped data for the relays",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 301
    },
    "tv_instant_replay_full_frame": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Send embedded full frames",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 138
    },
    "tv_instant_replay_full_frame_build_threaded": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Build the full frames on a seperate job thread",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 140
    },
    "tv_instant_replay_full_frame_time": {
        "data_type": "int32",
        "default_value": "30",
        "description": "Seconds between full frame embeddeds",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 139
    },
    "tv_listen_voice_indices": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Bitfield of playerslots to listen to voice messages from when connected to SourceTV, default is none",
        "flags": "client, userinfo",
        "flagsRaw": 520,
        "hasDefensiveFlag": false,
        "index": 4203
    },
    "tv_listen_voice_indices_h": {
        "data_type": "int32",
        "default_value": "0",
        "description": "High 32 bits of bitfield of playerslots to listen to voice messages from when connected to SourceTV, default is none",
        "flags": "client, userinfo",
        "flagsRaw": 520,
        "hasDefensiveFlag": false,
        "index": 4204
    },
    "tv_log_director_events": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Log game events being considered by the director",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1838
    },
    "tv_maxclients": {
        "data_type": "int32",
        "default_value": "128",
        "description": "Maximum client number on SourceTV server.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 111
    },
    "tv_maxclients_relayreserved": {
        "data_type": "int32",
        "default_value": "0",
        "description": "This number of relay client connections are reserved for SourceTV relays.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 112
    },
    "tv_maxrate": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Max SourceTV spectator bandwidth rate allowed, 0 == unlimited",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 294
    },
    "tv_name": {
        "data_type": "string",
        "default_value": "SourceTV",
        "description": "SourceTV host name",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 114
    },
    "tv_nochat": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Don't receive chat messages from other SourceTV spectators",
        "flags": "archive, userinfo",
        "flagsRaw": 640,
        "hasDefensiveFlag": false,
        "index": 338
    },
    "tv_overridemaster": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Overrides the SourceTV master root address.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 117
    },
    "tv_password": {
        "data_type": "string",
        "default_value": "",
        "description": "SourceTV password for all clients",
        "flags": "prot, notify, norecord, release",
        "flagsRaw": 655648,
        "hasDefensiveFlag": false,
        "index": 115
    },
    "tv_playcast_delay_prediction": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 282
    },
    "tv_playcast_delay_resync": {
        "data_type": "float",
        "default_value": "0",
        "description": "To alleviate intermittent network connectivity problems, this is the number of seconds to wait before actually re-syncing the stream after failure",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 277
    },
    "tv_playcast_max_rcvage": {
        "data_type": "float",
        "default_value": "15",
        "description": "",
        "flags": "hidden, release",
        "flagsRaw": 524304,
        "hasDefensiveFlag": false,
        "index": 280
    },
    "tv_playcast_max_rtdelay": {
        "data_type": "float",
        "default_value": "300",
        "description": "",
        "flags": "hidden, release",
        "flagsRaw": 524304,
        "hasDefensiveFlag": false,
        "index": 281
    },
    "tv_playcast_origin_auth": {
        "data_type": "string",
        "default_value": "",
        "description": "Get request X-Origin-Auth string",
        "flags": "hidden, release",
        "flagsRaw": 524304,
        "hasDefensiveFlag": false,
        "index": 279
    },
    "tv_playcast_retry_timeout": {
        "data_type": "float",
        "default_value": "12",
        "description": "In case of intermittent network problems, how long should playcast retry fragment retrieval before resorting to resync",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 283
    },
    "tv_playcast_showerrors": {
        "data_type": "string",
        "default_value": "",
        "description": "Set to display headers upon error (e.g. \"CF-Ray,CF-Cache-Status,Body\" )",
        "flags": "hidden, release",
        "flagsRaw": 524304,
        "hasDefensiveFlag": false,
        "index": 278
    },
    "tv_port": {
        "data_type": "int32",
        "default_value": "27020",
        "description": "Host SourceTV[0] port",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 177
    },
    "tv_port1": {
        "data_type": "int32",
        "default_value": "27021",
        "description": "Host SourceTV[1] port",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 178
    },
    "tv_rate_multiplier": {
        "data_type": "float",
        "default_value": "2",
        "description": "Multiply requested rate by this value to adjust Dota TV send rate",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 295
    },
    "tv_record_immediate": {
        "data_type": "int32",
        "default_value": "0",
        "description": "tv_record starting the moment tv_record was executed, not tv_delay earlier",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 141
    },
    "tv_relay_hard_shutdown": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 110
    },
    "tv_relay_quit_after_game": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Quit after a game has been relayed, do not hibernate",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 124
    },
    "tv_relay_rate": {
        "data_type": "int32",
        "default_value": "500000",
        "description": "default rate for relays",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 125
    },
    "tv_relay_secret_code": {
        "data_type": "bool",
        "default_value": "true",
        "description": "When enabled, this will use a uniquely generated server code to authenticate relay to relay connections. This code is coordinated via the GC or some external means rather than by clients directly",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 123
    },
    "tv_relaypassword": {
        "data_type": "string",
        "default_value": "",
        "description": "SourceTV password for relay proxies",
        "flags": "prot, notify, norecord, release",
        "flagsRaw": 655648,
        "hasDefensiveFlag": false,
        "index": 296
    },
    "tv_relayvoice": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Relay voice data: 0=off, 1=on",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 121
    },
    "tv_secret_code": {
        "data_type": "bool",
        "default_value": "true",
        "description": "When enabled, this will use a uniquely generated server code to authenticate relay connections. This code is coordinated via the GC or some external means rather than by clients directly",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 122
    },
    "tv_show_allchat": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "game, release",
        "flagsRaw": 524292,
        "hasDefensiveFlag": false,
        "index": 1806
    },
    "tv_snapshotrate": {
        "data_type": "float",
        "default_value": "20",
        "description": "Snapshots broadcast per second",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 105
    },
    "tv_snapshotrate1": {
        "data_type": "float",
        "default_value": "32",
        "description": "Snapshots broadcast per second, GOTV[1]",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 106
    },
    "tv_threaded_merge_entity_deltas": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable SourceTV threading of delta merging",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 127
    },
    "tv_timeout": {
        "data_type": "float",
        "default_value": "20",
        "description": "SourceTV connection timeout in seconds.",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 104
    },
    "tv_title": {
        "data_type": "string",
        "default_value": "SourceTV",
        "description": "Set title for SourceTV spectator UI",
        "flags": "release",
        "flagsRaw": 524288,
        "hasDefensiveFlag": false,
        "index": 120
    },
    "tv_transmitall": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Transmit all entities (not only director view)",
        "flags": "replicated, release",
        "flagsRaw": 532480,
        "hasDefensiveFlag": false,
        "index": 136
    },
    "tv_update_hibernation_enabled": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Allow SourceTV to control server hibernation state.",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 113
    },
    "tv_window_size": {
        "data_type": "float",
        "default_value": "16",
        "description": "Specifies the number of seconds worth of frames that the tv replay system should keep in memory. Increasing this greatly increases the amount of memory consumed by the TV system",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 134
    },
    "ugc_fake_state": {
        "data_type": "int32",
        "default_value": "-1",
        "description": "1=s, 2=L, 4=I, 8=U, 16=D, 32=P",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3246
    },
    "ui_hud_dist": {
        "data_type": "float",
        "default_value": "24",
        "description": "distance from the player to the hud",
        "flags": "devonly, client, replicated",
        "flagsRaw": 8202,
        "hasDefensiveFlag": true,
        "index": 4357
    },
    "vconsole_rcon_server_details": {
        "data_type": "string",
        "default_value": "",
        "description": "when non-empty allows for easy vconsole connection to the dedicated server.",
        "flags": "norecord, release, server_cant_query",
        "flagsRaw": 67764224,
        "hasDefensiveFlag": false,
        "index": 256
    },
    "vehicle_debug_impact_damage": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": false,
        "index": 1692
    },
    "viewmodel_fov": {
        "data_type": "float",
        "default_value": "54",
        "description": "",
        "flags": "client, cheat",
        "flagsRaw": 16392,
        "hasDefensiveFlag": false,
        "index": 3896
    },
    "violence_ablood": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Draw alien blood",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 268
    },
    "violence_agibs": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show alien gib entities",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 269
    },
    "violence_hblood": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Draw human blood",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 266
    },
    "violence_hgibs": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Show human gib entities",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 267
    },
    "vis_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable precomputed visibility when true",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 61
    },
    "vis_force": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1804
    },
    "vis_sunlight_enable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Toggle whether to use sunlight PVS for sunlight views (0 = sky PVS, 1 = sunlight PVS)",
        "flags": "devonly, cheat",
        "flagsRaw": 16386,
        "hasDefensiveFlag": false,
        "index": 60
    },
    "vismon_poll_frequency": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1811
    },
    "vismon_trace_limit": {
        "data_type": "int32",
        "default_value": "12",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1812
    },
    "voice_all_icons": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Draw all players' voice icons",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3929
    },
    "voice_always_sample_mic": {
        "data_type": "bool",
        "default_value": "false",
        "description": "For systems experiencing a hang/stall when using voice chat.",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 190
    },
    "voice_bypass_noise_gate": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": false,
        "index": 199
    },
    "voice_chat_bubble_show_volume": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Visualize the volume transmitted with the icon displaying speech.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3645
    },
    "voice_chat_bubbles": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Whether to draw chat bubbles int the UI or not",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 3644
    },
    "voice_clientdebug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3928
    },
    "voice_debugfeedbackfrom": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 388
    },
    "voice_device_override": {
        "data_type": "string",
        "default_value": "",
        "description": "Default device used for voice capture.",
        "flags": "archive, release",
        "flagsRaw": 524416,
        "hasDefensiveFlag": false,
        "index": 202
    },
    "voice_fadeouttime": {
        "data_type": "float",
        "default_value": "0.005",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 799
    },
    "voice_in_process": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 197
    },
    "voice_initial_buffer_ms": {
        "data_type": "int32",
        "default_value": "200",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 804
    },
    "voice_input_stallout": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "Time before we consider a mic stalled out and need to reset it..",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 196
    },
    "voice_loopback": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "userinfo",
        "flagsRaw": 512,
        "hasDefensiveFlag": false,
        "index": 798
    },
    "voice_loopback_no_networking": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "userinfo",
        "flagsRaw": 512,
        "hasDefensiveFlag": false,
        "index": 201
    },
    "voice_min_buffer_ms": {
        "data_type": "int32",
        "default_value": "100",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 803
    },
    "voice_modenable": {
        "data_type": "bool",
        "default_value": "true",
        "description": "Enable/disable voice in this mod.",
        "flags": "client, archive, release, clientcmd_can_execute",
        "flagsRaw": 268959880,
        "hasDefensiveFlag": false,
        "index": 3927
    },
    "voice_noise_supression": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 198
    },
    "voice_player_speaking_delay_threshold": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "",
        "flags": "game, cheat",
        "flagsRaw": 16388,
        "hasDefensiveFlag": false,
        "index": 1727
    },
    "voice_sequence_maximum_wait_time": {
        "data_type": "float",
        "default_value": "0.5",
        "description": "When receiving packets out of sequence, wait this many seconds for missing sequences to arrive",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 189
    },
    "voice_serverdebug": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 1592
    },
    "voice_stall_ms": {
        "data_type": "float",
        "default_value": "250",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 802
    },
    "voice_threshold": {
        "data_type": "float",
        "default_value": "-120",
        "description": "decibel threshold for how loud the talker's input signal is before we think they are talking.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 195
    },
    "voice_threshold_attack": {
        "data_type": "float",
        "default_value": "0.3",
        "description": "Amount of time we buffer outgoing audio to detect an onset.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 192
    },
    "voice_threshold_delay": {
        "data_type": "float",
        "default_value": "0.7",
        "description": "Amount of time the talker is silent before we infer that they are no longer talking.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 193
    },
    "voice_threshold_hold": {
        "data_type": "float",
        "default_value": "0.2",
        "description": "Amount of time after the talker starts talking we should keep listening regardless of how loud they are speaking.",
        "flags": "client, archive",
        "flagsRaw": 136,
        "hasDefensiveFlag": false,
        "index": 194
    },
    "voice_vox": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Voice chat uses a vox-style always on",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 3642
    },
    "voice_vox_current_peak": {
        "data_type": "float",
        "default_value": "0",
        "description": "Current peak value (out of 64k) of the incoming voice stream",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 3643
    },
    "volume": {
        "data_type": "float",
        "default_value": "1",
        "description": "Sound volume",
        "flags": "archive",
        "flagsRaw": 128,
        "hasDefensiveFlag": false,
        "index": 739
    },
    "volume_fog_clipmap_update": {
        "data_type": "int32",
        "default_value": "1",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 822
    },
    "volume_fog_clipmaps_enabled": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 823
    },
    "volume_fog_depth": {
        "data_type": "int32",
        "default_value": "128",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 830
    },
    "volume_fog_disable": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 821
    },
    "volume_fog_dither_scale": {
        "data_type": "float",
        "default_value": "3",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 824
    },
    "volume_fog_enable_jitter": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 819
    },
    "volume_fog_enable_stereo": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 820
    },
    "volume_fog_enlarge_frusta": {
        "data_type": "float",
        "default_value": "2",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 826
    },
    "volume_fog_height": {
        "data_type": "int32",
        "default_value": "160",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 829
    },
    "volume_fog_intermediate_textures_hdr": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 825
    },
    "volume_fog_jitter_offset_random": {
        "data_type": "bool",
        "default_value": "true",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 831
    },
    "volume_fog_show_volumes": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 827
    },
    "volume_fog_width": {
        "data_type": "int32",
        "default_value": "240",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 828
    },
    "vphys2_friction_factor": {
        "data_type": "float",
        "default_value": "1",
        "description": "Change global friction factor",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 643
    },
    "vphys2_restitution_factor": {
        "data_type": "float",
        "default_value": "1",
        "description": "Change global restitution factor",
        "flags": "cheat",
        "flagsRaw": 16384,
        "hasDefensiveFlag": false,
        "index": 644
    },
    "vphysics_force_apply_magnitude": {
        "data_type": "float",
        "default_value": "1",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 634
    },
    "vphysics_return_implicit_velocity": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 635
    },
    "vprof_counters": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 8
    },
    "vprof_counters_show_minmax": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly",
        "flagsRaw": 2,
        "hasDefensiveFlag": true,
        "index": 9
    },
    "vprof_scope_entity_clientthink": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Set to 1 to generate individual VPROF nodes for each client entity's think function.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 4053
    },
    "vprof_scope_entity_thinks": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game, client, replicated",
        "flagsRaw": 8206,
        "hasDefensiveFlag": true,
        "index": 2291
    },
    "vprof_think_limit": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, game",
        "flagsRaw": 6,
        "hasDefensiveFlag": true,
        "index": 2292
    },
    "waiting_joined": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3761
    },
    "waiting_test": {
        "data_type": "bool",
        "default_value": "false",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3759
    },
    "waiting_valid": {
        "data_type": "int32",
        "default_value": "0",
        "description": "",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 3760
    },
    "workshop_download_debug": {
        "data_type": "int32",
        "default_value": "0",
        "description": "Test different custom game download states",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": true,
        "index": 2408
    },
    "workshop_force_downloaded": {
        "data_type": "bool",
        "default_value": "false",
        "description": "Forces the custom game system to consider every subscribed game mode to be downloaded, even if it's not on disk.",
        "flags": "devonly, client",
        "flagsRaw": 10,
        "hasDefensiveFlag": false,
        "index": 2409
    },
    "zoom_sensitivity_ratio": {
        "data_type": "float",
        "default_value": "1",
        "description": "Additional mouse sensitivity scale factor applied when FOV is zoomed in.",
        "flags": "client, archive, per_user",
        "flagsRaw": 32904,
        "hasDefensiveFlag": false,
        "index": 4172
    }
}